
g431_withSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  080123e0  080123e0  000223e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012900  08012900  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08012900  08012900  00022900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012908  08012908  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012908  08012908  00022908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801290c  0801290c  0002290c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08012910  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a8  2000034c  08012c5c  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019f4  08012c5c  000319f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000250a3  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000525e  00000000  00000000  00055462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d90  00000000  00000000  0005a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016cb  00000000  00000000  0005c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248fc  00000000  00000000  0005db1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026926  00000000  00000000  00082417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3873  00000000  00000000  000a8d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008d74  00000000  00000000  0017c5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00185324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080123c4 	.word	0x080123c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	080123c4 	.word	0x080123c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8000f9e:	f107 030f 	add.w	r3, r7, #15
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	9200      	str	r2, [sp, #0]
 8000fa6:	2275      	movs	r2, #117	; 0x75
 8000fa8:	6839      	ldr	r1, [r7, #0]
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f853 	bl	8001056 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b71      	cmp	r3, #113	; 0x71
 8000fb4:	d129      	bne.n	800100a <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8000fb6:	236b      	movs	r3, #107	; 0x6b
 8000fb8:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000fbe:	f107 030d 	add.w	r3, r7, #13
 8000fc2:	f107 020e 	add.w	r2, r7, #14
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f823 	bl	8001014 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8000fce:	236a      	movs	r3, #106	; 0x6a
 8000fd0:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000fd6:	f107 030d 	add.w	r3, r7, #13
 8000fda:	f107 020e 	add.w	r2, r7, #14
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f817 	bl	8001014 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000fec:	461a      	mov	r2, r3
 8000fee:	6839      	ldr	r1, [r7, #0]
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f86d 	bl	80010d0 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8cd 	bl	80011a0 <MPU_writeGyroFullScaleRange>
        return 1;
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <MPU_begin+0x78>
    }
    else
    {
        return 0;
 800100a:	2300      	movs	r3, #0
    }
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8001022:	2100      	movs	r1, #0
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f000 f83e 	bl	80010a6 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f005 fd83 	bl	8006b3e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	2201      	movs	r2, #1
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f005 fd7c 	bl	8006b3e <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8001046:	2101      	movs	r1, #1
 8001048:	68b8      	ldr	r0, [r7, #8]
 800104a:	f000 f82c 	bl	80010a6 <MPU_CS>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8001066:	2100      	movs	r1, #0
 8001068:	68b8      	ldr	r0, [r7, #8]
 800106a:	f000 f81c 	bl	80010a6 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001074:	b2db      	uxtb	r3, r3
 8001076:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8001078:	f107 0117 	add.w	r1, r7, #23
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	2201      	movs	r2, #1
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f005 fd5b 	bl	8006b3e <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8001088:	8c3a      	ldrh	r2, [r7, #32]
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f005 fec9 	bl	8006e28 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8001096:	2101      	movs	r1, #1
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f000 f804 	bl	80010a6 <MPU_CS>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80010bc:	b29b      	uxth	r3, r3
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f002 f843 	bl	800314c <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 80010de:	231c      	movs	r3, #28
 80010e0:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d847      	bhi.n	8001178 <MPU_writeAccFullScaleRange+0xa8>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <MPU_writeAccFullScaleRange+0x20>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001101 	.word	0x08001101
 80010f4:	0800111f 	.word	0x0800111f
 80010f8:	0800113d 	.word	0x0800113d
 80010fc:	0800115b 	.word	0x0800115b
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001106:	60da      	str	r2, [r3, #12]
        val = 0x00;
 8001108:	2300      	movs	r3, #0
 800110a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800110c:	f107 0316 	add.w	r3, r7, #22
 8001110:	f107 0217 	add.w	r2, r7, #23
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff ff7c 	bl	8001014 <MPU_REG_WRITE>
        break;
 800111c:	e03b      	b.n	8001196 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001124:	60da      	str	r2, [r3, #12]
        val = 0x08;
 8001126:	2308      	movs	r3, #8
 8001128:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800112a:	f107 0316 	add.w	r3, r7, #22
 800112e:	f107 0217 	add.w	r2, r7, #23
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff ff6d 	bl	8001014 <MPU_REG_WRITE>
        break;
 800113a:	e02c      	b.n	8001196 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001142:	60da      	str	r2, [r3, #12]
        val = 0x10;
 8001144:	2310      	movs	r3, #16
 8001146:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001148:	f107 0316 	add.w	r3, r7, #22
 800114c:	f107 0217 	add.w	r2, r7, #23
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff ff5e 	bl	8001014 <MPU_REG_WRITE>
        break;
 8001158:	e01d      	b.n	8001196 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001160:	60da      	str	r2, [r3, #12]
        val = 0x18;
 8001162:	2318      	movs	r3, #24
 8001164:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001166:	f107 0316 	add.w	r3, r7, #22
 800116a:	f107 0217 	add.w	r2, r7, #23
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff4f 	bl	8001014 <MPU_REG_WRITE>
        break;
 8001176:	e00e      	b.n	8001196 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800117e:	60da      	str	r2, [r3, #12]
        val = 0x08;
 8001180:	2308      	movs	r3, #8
 8001182:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001184:	f107 0316 	add.w	r3, r7, #22
 8001188:	f107 0217 	add.w	r2, r7, #23
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff ff40 	bl	8001014 <MPU_REG_WRITE>
        break;
 8001194:	bf00      	nop
    }
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop

080011a0 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	4613      	mov	r3, r2
 80011ac:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 80011ae:	231b      	movs	r3, #27
 80011b0:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d843      	bhi.n	8001240 <MPU_writeGyroFullScaleRange+0xa0>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <MPU_writeGyroFullScaleRange+0x20>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	08001209 	.word	0x08001209
 80011cc:	08001225 	.word	0x08001225
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4a24      	ldr	r2, [pc, #144]	; (8001264 <MPU_writeGyroFullScaleRange+0xc4>)
 80011d4:	611a      	str	r2, [r3, #16]
        val = 0x00;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011da:	f107 0316 	add.w	r3, r7, #22
 80011de:	f107 0217 	add.w	r2, r7, #23
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7ff ff15 	bl	8001014 <MPU_REG_WRITE>
        break;
 80011ea:	e037      	b.n	800125c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <MPU_writeGyroFullScaleRange+0xc8>)
 80011f0:	611a      	str	r2, [r3, #16]
        val = 0x08;
 80011f2:	2308      	movs	r3, #8
 80011f4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011f6:	f107 0316 	add.w	r3, r7, #22
 80011fa:	f107 0217 	add.w	r2, r7, #23
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ff07 	bl	8001014 <MPU_REG_WRITE>
        break;
 8001206:	e029      	b.n	800125c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4a18      	ldr	r2, [pc, #96]	; (800126c <MPU_writeGyroFullScaleRange+0xcc>)
 800120c:	611a      	str	r2, [r3, #16]
        val = 0x10;
 800120e:	2310      	movs	r3, #16
 8001210:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001212:	f107 0316 	add.w	r3, r7, #22
 8001216:	f107 0217 	add.w	r2, r7, #23
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff fef9 	bl	8001014 <MPU_REG_WRITE>
        break;
 8001222:	e01b      	b.n	800125c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MPU_writeGyroFullScaleRange+0xd0>)
 8001228:	611a      	str	r2, [r3, #16]
        val = 0x18;
 800122a:	2318      	movs	r3, #24
 800122c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800122e:	f107 0316 	add.w	r3, r7, #22
 8001232:	f107 0217 	add.w	r2, r7, #23
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff feeb 	bl	8001014 <MPU_REG_WRITE>
        break;
 800123e:	e00d      	b.n	800125c <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <MPU_writeGyroFullScaleRange+0xc8>)
 8001244:	611a      	str	r2, [r3, #16]
        val = 0x08;
 8001246:	2308      	movs	r3, #8
 8001248:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800124a:	f107 0316 	add.w	r3, r7, #22
 800124e:	f107 0217 	add.w	r2, r7, #23
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f7ff fedd 	bl	8001014 <MPU_REG_WRITE>
        break;
 800125a:	bf00      	nop
    }
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	43030000 	.word	0x43030000
 8001268:	42830000 	.word	0x42830000
 800126c:	42033333 	.word	0x42033333
 8001270:	41833333 	.word	0x41833333

08001274 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, &buf[0], 14);
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	220e      	movs	r2, #14
 8001284:	9200      	str	r2, [sp, #0]
 8001286:	223b      	movs	r2, #59	; 0x3b
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fee3 	bl	8001056 <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 8001290:	7a3b      	ldrb	r3, [r7, #8]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7a7b      	ldrb	r3, [r7, #9]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 80012a2:	7abb      	ldrb	r3, [r7, #10]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 80012b4:	7b3b      	ldrb	r3, [r7, #12]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    pMPU9250->rawData.gx = buf[8] << 8 | buf[9];
 80012c6:	7c3b      	ldrb	r3, [r7, #16]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7c7b      	ldrb	r3, [r7, #17]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	80da      	strh	r2, [r3, #6]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 80012d8:	7cbb      	ldrb	r3, [r7, #18]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7cfb      	ldrb	r3, [r7, #19]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 80012ea:	7d3b      	ldrb	r3, [r7, #20]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	7d7b      	ldrb	r3, [r7, #21]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	815a      	strh	r2, [r3, #10]
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001328:	2300      	movs	r3, #0
 800132a:	827b      	strh	r3, [r7, #18]
 800132c:	e01e      	b.n	800136c <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff ff9f 	bl	8001274 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800133c:	461a      	mov	r2, r3
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	4413      	add	r3, r2
 8001342:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800134a:	461a      	mov	r2, r3
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	4413      	add	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001358:	461a      	mov	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8001360:	2003      	movs	r0, #3
 8001362:	f001 f9b7 	bl	80026d4 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001366:	8a7b      	ldrh	r3, [r7, #18]
 8001368:	3301      	adds	r3, #1
 800136a:	827b      	strh	r3, [r7, #18]
 800136c:	8a7a      	ldrh	r2, [r7, #18]
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	429a      	cmp	r2, r3
 8001372:	d3dc      	bcc.n	800132e <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff46 	bl	8001274 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80013fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	ed93 7a03 	vldr	s14, [r3, #12]
 800141a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	ed93 7a03 	vldr	s14, [r3, #12]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	edc3 7a07 	vstr	s15, [r3, #28]

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	edd3 6a08 	vldr	s13, [r3, #32]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80014a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80014d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff6e 	bl	80013d6 <MPU_readProcessedData>

    // Complementary filter
    float accelPitch = atan2(pMPU9250->sensorData.ay, pMPU9250->sensorData.az) * RAD2DEG;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f84a 	bl	8000598 <__aeabi_f2d>
 8001504:	4604      	mov	r4, r0
 8001506:	460d      	mov	r5, r1
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f843 	bl	8000598 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	ec43 2b11 	vmov	d1, r2, r3
 800151a:	ec45 4b10 	vmov	d0, r4, r5
 800151e:	f010 fcdb 	bl	8011ed8 <atan2>
 8001522:	ec51 0b10 	vmov	r0, r1, d0
 8001526:	a344      	add	r3, pc, #272	; (adr r3, 8001638 <MPU_calcAttitude+0x150>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f88c 	bl	8000648 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb5e 	bl	8000bf8 <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(pMPU9250->sensorData.ax, pMPU9250->sensorData.az) * RAD2DEG;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f827 	bl	8000598 <__aeabi_f2d>
 800154a:	4604      	mov	r4, r0
 800154c:	460d      	mov	r5, r1
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f820 	bl	8000598 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ec43 2b11 	vmov	d1, r2, r3
 8001560:	ec45 4b10 	vmov	d0, r4, r5
 8001564:	f010 fcb8 	bl	8011ed8 <atan2>
 8001568:	ec51 0b10 	vmov	r0, r1, d0
 800156c:	a332      	add	r3, pc, #200	; (adr r3, 8001638 <MPU_calcAttitude+0x150>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f869 	bl	8000648 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb3b 	bl	8000bf8 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	60bb      	str	r3, [r7, #8]

    pMPU9250->attitude.r = pMPU9250->attitude.tau * (pMPU9250->attitude.r - pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelRoll;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800159e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    pMPU9250->attitude.p = pMPU9250->attitude.tau * (pMPU9250->attitude.p - pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelPitch;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	ed93 6a08 	vldr	s12, [r3, #32]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->attitude.y += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	1a63cbb0 	.word	0x1a63cbb0
 800163c:	404ca5dc 	.word	0x404ca5dc

08001640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_DMA_Init+0x60>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_DMA_Init+0x60>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6493      	str	r3, [r2, #72]	; 0x48
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_DMA_Init+0x60>)
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_DMA_Init+0x60>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <MX_DMA_Init+0x60>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6493      	str	r3, [r2, #72]	; 0x48
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_DMA_Init+0x60>)
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200b      	movs	r0, #11
 800167c:	f001 f927 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001680:	200b      	movs	r0, #11
 8001682:	f001 f93e 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200c      	movs	r0, #12
 800168c:	f001 f91f 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001690:	200c      	movs	r0, #12
 8001692:	f001 f936 	bl	8002902 <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a22      	ldr	r2, [pc, #136]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_GPIO_Init+0xa4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_GPIO_Init+0xa4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <MX_GPIO_Init+0xa4>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_GPIO_Init+0xa4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2110      	movs	r1, #16
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <MX_GPIO_Init+0xa8>)
 8001720:	f001 fd14 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001724:	2310      	movs	r3, #16
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_GPIO_Init+0xa8>)
 800173c:	f001 fb84 	bl	8002e48 <HAL_GPIO_Init>

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000
 800174c:	48000800 	.word	0x48000800

08001750 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_I2C1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60505F8C;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_I2C1_Init+0x74>)
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <MX_I2C1_Init+0x7c>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001768:	2201      	movs	r2, #1
 800176a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_I2C1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <MX_I2C1_Init+0x74>)
 800178c:	f001 fcf6 	bl	800317c <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001796:	f000 fa68 	bl	8001c6a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_I2C1_Init+0x74>)
 800179e:	f002 fb86 	bl	8003eae <HAL_I2CEx_ConfigAnalogFilter>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f000 fa5f 	bl	8001c6a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_I2C1_Init+0x74>)
 80017b0:	f002 fbc8 	bl	8003f44 <HAL_I2CEx_ConfigDigitalFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 fa56 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000368 	.word	0x20000368
 80017c8:	40005400 	.word	0x40005400
 80017cc:	60505f8c 	.word	0x60505f8c

080017d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b09c      	sub	sp, #112	; 0x70
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	2244      	movs	r2, #68	; 0x44
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00e fa76 	bl	800fce2 <memset>
  if(i2cHandle->Instance==I2C1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_I2C_MspInit+0x1a8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f040 80b7 	bne.w	8001970 <HAL_I2C_MspInit+0x1a0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	4618      	mov	r0, r3
 8001810:	f004 fefa 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800181a:	f000 fa26 	bl	8001c6a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a56      	ldr	r2, [pc, #344]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b54      	ldr	r3, [pc, #336]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a50      	ldr	r2, [pc, #320]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001858:	2301      	movs	r3, #1
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001860:	2304      	movs	r3, #4
 8001862:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f001 faeb 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001876:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001878:	2312      	movs	r3, #18
 800187a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187c:	2301      	movs	r3, #1
 800187e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001884:	2304      	movs	r3, #4
 8001886:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800188c:	4619      	mov	r1, r3
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <HAL_I2C_MspInit+0x1b0>)
 8001890:	f001 fada 	bl	8002e48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	4a38      	ldr	r2, [pc, #224]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 800189a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189e:	6593      	str	r3, [r2, #88]	; 0x58
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_I2C_MspInit+0x1ac>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <HAL_I2C_MspInit+0x1b8>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018b4:	2211      	movs	r2, #17
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80018e2:	4828      	ldr	r0, [pc, #160]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018e4:	f001 f828 	bl	8002938 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_MspInit+0x122>
    {
      Error_Handler();
 80018ee:	f000 f9bc 	bl	8001c6a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
 80018f8:	4a22      	ldr	r2, [pc, #136]	; (8001984 <HAL_I2C_MspInit+0x1b4>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_I2C_MspInit+0x1c0>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001906:	2210      	movs	r2, #16
 8001908:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001934:	4815      	ldr	r0, [pc, #84]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001936:	f000 ffff 	bl	8002938 <HAL_DMA_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_MspInit+0x174>
    {
      Error_Handler();
 8001940:	f000 f993 	bl	8001c6a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 8001948:	63da      	str	r2, [r3, #60]	; 0x3c
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_I2C_MspInit+0x1bc>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	201f      	movs	r0, #31
 8001956:	f000 ffba 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800195a:	201f      	movs	r0, #31
 800195c:	f000 ffd1 	bl	8002902 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2020      	movs	r0, #32
 8001966:	f000 ffb2 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800196a:	2020      	movs	r0, #32
 800196c:	f000 ffc9 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001970:	bf00      	nop
 8001972:	3770      	adds	r7, #112	; 0x70
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40005400 	.word	0x40005400
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400
 8001984:	200003bc 	.word	0x200003bc
 8001988:	40020008 	.word	0x40020008
 800198c:	2000041c 	.word	0x2000041c
 8001990:	4002001c 	.word	0x4002001c

08001994 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d114      	bne.n	80019d0 <HAL_TIM_IC_CaptureCallback+0x3c>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7f1b      	ldrb	r3, [r3, #28]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d110      	bne.n	80019d0 <HAL_TIM_IC_CaptureCallback+0x3c>
        {
            TIM4->CNT = 0;
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
            period = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80019b4:	2100      	movs	r1, #0
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x48>)
 80019b8:	f006 feb6 	bl	8008728 <HAL_TIM_ReadCapturedValue>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80019c0:	6013      	str	r3, [r2, #0]
            pulseWidth = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80019c2:	2104      	movs	r1, #4
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x48>)
 80019c6:	f006 feaf 	bl	8008728 <HAL_TIM_ReadCapturedValue>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_TIM_IC_CaptureCallback+0x50>)
 80019ce:	6013      	str	r3, [r2, #0]

        }
    }
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40000800 	.word	0x40000800
 80019dc:	200005f4 	.word	0x200005f4
 80019e0:	20000538 	.word	0x20000538
 80019e4:	2000053c 	.word	0x2000053c

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	b08e      	sub	sp, #56	; 0x38
 80019ee:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */

	  MPU9250.settings.gFullScaleRange = GFSR_500DPS;
 80019f0:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <main+0x1b0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	  MPU9250.settings.aFullScaleRange = AFSR_4G;
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <main+0x1b0>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  MPU9250.settings.CS_PIN = GPIO_PIN_4;
 8001a00:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <main+0x1b0>)
 8001a02:	2210      	movs	r2, #16
 8001a04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	  MPU9250.settings.CS_PORT = GPIOC;
 8001a08:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <main+0x1b0>)
 8001a0a:	4a64      	ldr	r2, [pc, #400]	; (8001b9c <main+0x1b4>)
 8001a0c:	651a      	str	r2, [r3, #80]	; 0x50
	  MPU9250.attitude.tau = 0.98;
 8001a0e:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <main+0x1b0>)
 8001a10:	4a63      	ldr	r2, [pc, #396]	; (8001ba0 <main+0x1b8>)
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
	  MPU9250.attitude.dt = 0.004;
 8001a14:	4b60      	ldr	r3, [pc, #384]	; (8001b98 <main+0x1b0>)
 8001a16:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <main+0x1bc>)
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1a:	f000 fdea 	bl	80025f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1e:	f000 f8d7 	bl	8001bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a22:	f7ff fe3f 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a26:	f7ff fe0b 	bl	8001640 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a2a:	f7ff fe91 	bl	8001750 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a2e:	f000 f921 	bl	8001c74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a32:	f000 fd09 	bl	8002448 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001a36:	f00c febf 	bl	800e7b8 <MX_USB_Device_Init>
  MX_TIM3_Init();
 8001a3a:	f000 fb19 	bl	8002070 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a3e:	f000 fbb1 	bl	80021a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Timer for PPM signal
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // direct channel
 8001a42:	2100      	movs	r1, #0
 8001a44:	4858      	ldr	r0, [pc, #352]	; (8001ba8 <main+0x1c0>)
 8001a46:	f006 f933 	bl	8007cb0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); //indirect channel
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	4856      	ldr	r0, [pc, #344]	; (8001ba8 <main+0x1c0>)
 8001a4e:	f006 f92f 	bl	8007cb0 <HAL_TIM_IC_Start_IT>


  // Check if IMU configured properly and block if it didn't
   if (MPU_begin(&hspi1, &MPU9250) != TRUE)
 8001a52:	4951      	ldr	r1, [pc, #324]	; (8001b98 <main+0x1b0>)
 8001a54:	4855      	ldr	r0, [pc, #340]	; (8001bac <main+0x1c4>)
 8001a56:	f7ff fa9d 	bl	8000f94 <MPU_begin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d008      	beq.n	8001a72 <main+0x8a>
   {
     sprintf((char *)serialBuf, "ERROR!\r\n");
 8001a60:	4953      	ldr	r1, [pc, #332]	; (8001bb0 <main+0x1c8>)
 8001a62:	4854      	ldr	r0, [pc, #336]	; (8001bb4 <main+0x1cc>)
 8001a64:	f00e f8da 	bl	800fc1c <siprintf>
     CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001a68:	2164      	movs	r1, #100	; 0x64
 8001a6a:	4852      	ldr	r0, [pc, #328]	; (8001bb4 <main+0x1cc>)
 8001a6c:	f00c ff62 	bl	800e934 <CDC_Transmit_FS>
     while (1){}
 8001a70:	e7fe      	b.n	8001a70 <main+0x88>
   }

   // Calibrate the IMU
    sprintf((char *)serialBuf, "CALIBRATING...\r\n");
 8001a72:	4951      	ldr	r1, [pc, #324]	; (8001bb8 <main+0x1d0>)
 8001a74:	484f      	ldr	r0, [pc, #316]	; (8001bb4 <main+0x1cc>)
 8001a76:	f00e f8d1 	bl	800fc1c <siprintf>
    CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001a7a:	2164      	movs	r1, #100	; 0x64
 8001a7c:	484d      	ldr	r0, [pc, #308]	; (8001bb4 <main+0x1cc>)
 8001a7e:	f00c ff59 	bl	800e934 <CDC_Transmit_FS>
    MPU_calibrateGyro(&hspi1, &MPU9250, 1500);
 8001a82:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a86:	4944      	ldr	r1, [pc, #272]	; (8001b98 <main+0x1b0>)
 8001a88:	4848      	ldr	r0, [pc, #288]	; (8001bac <main+0x1c4>)
 8001a8a:	f7ff fc3b 	bl	8001304 <MPU_calibrateGyro>


  while (1)
  {
	  // Serial out MPU9250 data
	 	  MPU_readRawData(&hspi1, &MPU9250);
 8001a8e:	4942      	ldr	r1, [pc, #264]	; (8001b98 <main+0x1b0>)
 8001a90:	4846      	ldr	r0, [pc, #280]	; (8001bac <main+0x1c4>)
 8001a92:	f7ff fbef 	bl	8001274 <MPU_readRawData>
	 	  sprintf((char *)serialBuf, "RAW DATA\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <main+0x1b0>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <main+0x1b0>)
 8001aa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <main+0x1b0>)
 8001aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aac:	461a      	mov	r2, r3
	 			  , MPU9250.rawData.gx, MPU9250.rawData.gy, MPU9250.rawData.gz);
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <main+0x1b0>)
 8001ab0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	 	  sprintf((char *)serialBuf, "RAW DATA\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 8001ab4:	4619      	mov	r1, r3
	 			  , MPU9250.rawData.gx, MPU9250.rawData.gy, MPU9250.rawData.gz);
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <main+0x1b0>)
 8001ab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	 	  sprintf((char *)serialBuf, "RAW DATA\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 8001abc:	4618      	mov	r0, r3
	 			  , MPU9250.rawData.gx, MPU9250.rawData.gy, MPU9250.rawData.gz);
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <main+0x1b0>)
 8001ac0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	 	  sprintf((char *)serialBuf, "RAW DATA\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 8001ac4:	9303      	str	r3, [sp, #12]
 8001ac6:	9002      	str	r0, [sp, #8]
 8001ac8:	9101      	str	r1, [sp, #4]
 8001aca:	9200      	str	r2, [sp, #0]
 8001acc:	462b      	mov	r3, r5
 8001ace:	4622      	mov	r2, r4
 8001ad0:	493a      	ldr	r1, [pc, #232]	; (8001bbc <main+0x1d4>)
 8001ad2:	4838      	ldr	r0, [pc, #224]	; (8001bb4 <main+0x1cc>)
 8001ad4:	f00e f8a2 	bl	800fc1c <siprintf>
	 	  CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001ad8:	2164      	movs	r1, #100	; 0x64
 8001ada:	4836      	ldr	r0, [pc, #216]	; (8001bb4 <main+0x1cc>)
 8001adc:	f00c ff2a 	bl	800e934 <CDC_Transmit_FS>

	 	  MPU_readProcessedData(&hspi1, &MPU9250);
 8001ae0:	492d      	ldr	r1, [pc, #180]	; (8001b98 <main+0x1b0>)
 8001ae2:	4832      	ldr	r0, [pc, #200]	; (8001bac <main+0x1c4>)
 8001ae4:	f7ff fc77 	bl	80013d6 <MPU_readProcessedData>
	 	  sprintf((char *)serialBuf, "PROCSSED DATA\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <main+0x1b0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd53 	bl	8000598 <__aeabi_f2d>
 8001af2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <main+0x1b0>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd4c 	bl	8000598 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <main+0x1b0>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd45 	bl	8000598 <__aeabi_f2d>
 8001b0e:	4680      	mov	r8, r0
 8001b10:	4689      	mov	r9, r1
	 	  			  , MPU9250.sensorData.gx, MPU9250.sensorData.gy, MPU9250.sensorData.gz);
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <main+0x1b0>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
	 	  sprintf((char *)serialBuf, "PROCSSED DATA\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd3e 	bl	8000598 <__aeabi_f2d>
 8001b1c:	4682      	mov	sl, r0
 8001b1e:	468b      	mov	fp, r1
	 	  			  , MPU9250.sensorData.gx, MPU9250.sensorData.gy, MPU9250.sensorData.gz);
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <main+0x1b0>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	 	  sprintf((char *)serialBuf, "PROCSSED DATA\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd37 	bl	8000598 <__aeabi_f2d>
 8001b2a:	e9c7 0100 	strd	r0, r1, [r7]
	 	  			  , MPU9250.sensorData.gx, MPU9250.sensorData.gy, MPU9250.sensorData.gz);
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <main+0x1b0>)
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 	  sprintf((char *)serialBuf, "PROCSSED DATA\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd30 	bl	8000598 <__aeabi_f2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001b40:	ed97 7b00 	vldr	d7, [r7]
 8001b44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001b48:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001b4c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b50:	e9cd 4500 	strd	r4, r5, [sp]
 8001b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b58:	4919      	ldr	r1, [pc, #100]	; (8001bc0 <main+0x1d8>)
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <main+0x1cc>)
 8001b5c:	f00e f85e 	bl	800fc1c <siprintf>
	 	  CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001b60:	2164      	movs	r1, #100	; 0x64
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <main+0x1cc>)
 8001b64:	f00c fee6 	bl	800e934 <CDC_Transmit_FS>

          sprintf((char *)serialBuf, "Period = %u \t PulseWidth = %u \n", (uint16_t)period, (uint16_t)pulseWidth);
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <main+0x1dc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <main+0x1e0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4915      	ldr	r1, [pc, #84]	; (8001bcc <main+0x1e4>)
 8001b78:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <main+0x1cc>)
 8001b7a:	f00e f84f 	bl	800fc1c <siprintf>
          CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001b7e:	2164      	movs	r1, #100	; 0x64
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <main+0x1cc>)
 8001b82:	f00c fed7 	bl	800e934 <CDC_Transmit_FS>

	 	  HAL_Delay(5000);
 8001b86:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b8a:	f000 fda3 	bl	80026d4 <HAL_Delay>



	  MPU_calcAttitude(&hspi1, &MPU9250);
 8001b8e:	4902      	ldr	r1, [pc, #8]	; (8001b98 <main+0x1b0>)
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <main+0x1c4>)
 8001b92:	f7ff fca9 	bl	80014e8 <MPU_calcAttitude>
	 	  MPU_readRawData(&hspi1, &MPU9250);
 8001b96:	e77a      	b.n	8001a8e <main+0xa6>
 8001b98:	200004e0 	.word	0x200004e0
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	3f7ae148 	.word	0x3f7ae148
 8001ba4:	3b83126f 	.word	0x3b83126f
 8001ba8:	200005f4 	.word	0x200005f4
 8001bac:	20000540 	.word	0x20000540
 8001bb0:	080123e0 	.word	0x080123e0
 8001bb4:	2000047c 	.word	0x2000047c
 8001bb8:	080123ec 	.word	0x080123ec
 8001bbc:	08012400 	.word	0x08012400
 8001bc0:	08012438 	.word	0x08012438
 8001bc4:	20000538 	.word	0x20000538
 8001bc8:	2000053c 	.word	0x2000053c
 8001bcc:	08012474 	.word	0x08012474

08001bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b094      	sub	sp, #80	; 0x50
 8001bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd6:	f107 0318 	add.w	r3, r7, #24
 8001bda:	2238      	movs	r2, #56	; 0x38
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00e f87f 	bl	800fce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f003 ff26 	bl	8005a44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001bf8:	2322      	movs	r3, #34	; 0x22
 8001bfa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c02:	2340      	movs	r3, #64	; 0x40
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c06:	2301      	movs	r3, #1
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 63;
 8001c16:	233f      	movs	r3, #63	; 0x3f
 8001c18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c26:	f107 0318 	add.w	r3, r7, #24
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 ffbe 	bl	8005bac <HAL_RCC_OscConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c36:	f000 f818 	bl	8001c6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2104      	movs	r1, #4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fabc 	bl	80061d0 <HAL_RCC_ClockConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c5e:	f000 f804 	bl	8001c6a <Error_Handler>
  }
}
 8001c62:	bf00      	nop
 8001c64:	3750      	adds	r7, #80	; 0x50
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6e:	b672      	cpsid	i
}
 8001c70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <Error_Handler+0x8>

08001c74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <MX_SPI1_Init+0x78>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001c8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001caa:	2218      	movs	r2, #24
 8001cac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cce:	2208      	movs	r2, #8
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_SPI1_Init+0x74>)
 8001cd4:	f004 fe88 	bl	80069e8 <HAL_SPI_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f7ff ffc4 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000540 	.word	0x20000540
 8001cec:	40013000 	.word	0x40013000

08001cf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_SPI_MspInit+0x8c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d130      	bne.n	8001d74 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_SPI_MspInit+0x90>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_SPI_MspInit+0x90>)
 8001d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_SPI_MspInit+0x90>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_SPI_MspInit+0x90>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <HAL_SPI_MspInit+0x90>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_SPI_MspInit+0x90>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d42:	23e0      	movs	r3, #224	; 0xe0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d52:	2305      	movs	r3, #5
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f001 f872 	bl	8002e48 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2023      	movs	r0, #35	; 0x23
 8001d6a:	f000 fdb0 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d6e:	2023      	movs	r0, #35	; 0x23
 8001d70:	f000 fdc7 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6613      	str	r3, [r2, #96]	; 0x60
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	6593      	str	r3, [r2, #88]	; 0x58
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_MspInit+0x44>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dba:	f003 fee7 	bl	8005b8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e18:	f000 fc3e 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA1_Channel1_IRQHandler+0x10>)
 8001e26:	f000 feef 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200003bc 	.word	0x200003bc

08001e34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA1_Channel2_IRQHandler+0x10>)
 8001e3a:	f000 fee5 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000041c 	.word	0x2000041c

08001e48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <USB_LP_IRQHandler+0x10>)
 8001e4e:	f002 f9b5 	bl	80041bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200013ac 	.word	0x200013ac

08001e5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM3_IRQHandler+0x10>)
 8001e62:	f006 f867 	bl	8007f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200005a8 	.word	0x200005a8

08001e70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <I2C1_EV_IRQHandler+0x10>)
 8001e76:	f001 fa1c 	bl	80032b2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000368 	.word	0x20000368

08001e84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <I2C1_ER_IRQHandler+0x10>)
 8001e8a:	f001 fa2c 	bl	80032e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000368 	.word	0x20000368

08001e98 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <SPI1_IRQHandler+0x10>)
 8001e9e:	f005 fb1d 	bl	80074dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000540 	.word	0x20000540

08001eac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <USART1_IRQHandler+0x10>)
 8001eb2:	f007 fb2f 	bl	8009514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000640 	.word	0x20000640

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f00d ff55 	bl	800fd88 <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	e7fe      	b.n	8001f02 <_exit+0x12>

08001f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e00a      	b.n	8001f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f16:	f3af 8000 	nop.w
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	b2ca      	uxtb	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf0      	blt.n	8001f16 <_read+0x12>
  }

  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e009      	b.n	8001f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbf1      	blt.n	8001f50 <_write+0x12>
  }
  return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_close>:

int _close(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_isatty>:

int _isatty(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f00d feba 	bl	800fd88 <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20008000 	.word	0x20008000
 8002040:	00000400 	.word	0x00000400
 8002044:	200005a4 	.word	0x200005a4
 8002048:	200019f8 	.word	0x200019f8

0800204c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <MX_TIM3_Init+0x12c>)
 80020a4:	4a3e      	ldr	r2, [pc, #248]	; (80021a0 <MX_TIM3_Init+0x130>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <MX_TIM3_Init+0x12c>)
 80020aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80020ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <MX_TIM3_Init+0x12c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <MX_TIM3_Init+0x12c>)
 80020b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <MX_TIM3_Init+0x12c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <MX_TIM3_Init+0x12c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020ca:	4834      	ldr	r0, [pc, #208]	; (800219c <MX_TIM3_Init+0x12c>)
 80020cc:	f005 fcd6 	bl	8007a7c <HAL_TIM_Base_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80020d6:	f7ff fdc8 	bl	8001c6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e4:	4619      	mov	r1, r3
 80020e6:	482d      	ldr	r0, [pc, #180]	; (800219c <MX_TIM3_Init+0x12c>)
 80020e8:	f006 fa24 	bl	8008534 <HAL_TIM_ConfigClockSource>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80020f2:	f7ff fdba 	bl	8001c6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020f6:	4829      	ldr	r0, [pc, #164]	; (800219c <MX_TIM3_Init+0x12c>)
 80020f8:	f005 fd17 	bl	8007b2a <HAL_TIM_PWM_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002102:	f7ff fdb2 	bl	8001c6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4821      	ldr	r0, [pc, #132]	; (800219c <MX_TIM3_Init+0x12c>)
 8002116:	f007 f8e5 	bl	80092e4 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002120:	f7ff fda3 	bl	8001c6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002124:	2360      	movs	r3, #96	; 0x60
 8002126:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4818      	ldr	r0, [pc, #96]	; (800219c <MX_TIM3_Init+0x12c>)
 800213c:	f006 f8e6 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002146:	f7ff fd90 	bl	8001c6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214a:	463b      	mov	r3, r7
 800214c:	2204      	movs	r2, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4812      	ldr	r0, [pc, #72]	; (800219c <MX_TIM3_Init+0x12c>)
 8002152:	f006 f8db 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800215c:	f7ff fd85 	bl	8001c6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	2208      	movs	r2, #8
 8002164:	4619      	mov	r1, r3
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <MX_TIM3_Init+0x12c>)
 8002168:	f006 f8d0 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8002172:	f7ff fd7a 	bl	8001c6a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	220c      	movs	r2, #12
 800217a:	4619      	mov	r1, r3
 800217c:	4807      	ldr	r0, [pc, #28]	; (800219c <MX_TIM3_Init+0x12c>)
 800217e:	f006 f8c5 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8002188:	f7ff fd6f 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <MX_TIM3_Init+0x12c>)
 800218e:	f000 f8e9 	bl	8002364 <HAL_TIM_MspPostInit>

}
 8002192:	bf00      	nop
 8002194:	3738      	adds	r7, #56	; 0x38
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200005a8 	.word	0x200005a8
 80021a0:	40000400 	.word	0x40000400

080021a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <MX_TIM4_Init+0xf8>)
 80021d2:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <MX_TIM4_Init+0xfc>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168 - 1;
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <MX_TIM4_Init+0xf8>)
 80021d8:	22a7      	movs	r2, #167	; 0xa7
 80021da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <MX_TIM4_Init+0xf8>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <MX_TIM4_Init+0xf8>)
 80021e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <MX_TIM4_Init+0xf8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <MX_TIM4_Init+0xf8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021f6:	4829      	ldr	r0, [pc, #164]	; (800229c <MX_TIM4_Init+0xf8>)
 80021f8:	f005 fc40 	bl	8007a7c <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002202:	f7ff fd32 	bl	8001c6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	4619      	mov	r1, r3
 8002212:	4822      	ldr	r0, [pc, #136]	; (800229c <MX_TIM4_Init+0xf8>)
 8002214:	f006 f98e 	bl	8008534 <HAL_TIM_ConfigClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800221e:	f7ff fd24 	bl	8001c6a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002222:	481e      	ldr	r0, [pc, #120]	; (800229c <MX_TIM4_Init+0xf8>)
 8002224:	f005 fce2 	bl	8007bec <HAL_TIM_IC_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800222e:	f7ff fd1c 	bl	8001c6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4816      	ldr	r0, [pc, #88]	; (800229c <MX_TIM4_Init+0xf8>)
 8002242:	f007 f84f 	bl	80092e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800224c:	f7ff fd0d 	bl	8001c6a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002254:	2301      	movs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_TIM4_Init+0xf8>)
 8002268:	f005 ffb3 	bl	80081d2 <HAL_TIM_IC_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002272:	f7ff fcfa 	bl	8001c6a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002276:	2302      	movs	r3, #2
 8002278:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800227a:	2302      	movs	r3, #2
 800227c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2204      	movs	r2, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_TIM4_Init+0xf8>)
 8002286:	f005 ffa4 	bl	80081d2 <HAL_TIM_IC_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002290:	f7ff fceb 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	3730      	adds	r7, #48	; 0x30
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200005f4 	.word	0x200005f4
 80022a0:	40000800 	.word	0x40000800

080022a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a24      	ldr	r2, [pc, #144]	; (8002354 <HAL_TIM_Base_MspInit+0xb0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d114      	bne.n	80022f0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a23      	ldr	r2, [pc, #140]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	201d      	movs	r0, #29
 80022e4:	f000 faf3 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022e8:	201d      	movs	r0, #29
 80022ea:	f000 fb0a 	bl	8002902 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022ee:	e02c      	b.n	800234a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_TIM_Base_MspInit+0xb8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d127      	bne.n	800234a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800232a:	2340      	movs	r3, #64	; 0x40
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800233a:	2302      	movs	r3, #2
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	4806      	ldr	r0, [pc, #24]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 8002346:	f000 fd7f 	bl	8002e48 <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40000400 	.word	0x40000400
 8002358:	40021000 	.word	0x40021000
 800235c:	40000800 	.word	0x40000800
 8002360:	48000400 	.word	0x48000400

08002364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <HAL_TIM_MspPostInit+0xd4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d154      	bne.n	8002430 <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4a20      	ldr	r2, [pc, #128]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_TIM_MspPostInit+0xd8>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023ce:	2310      	movs	r3, #16
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023de:	2302      	movs	r3, #2
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f000 fd2c 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023f0:	2303      	movs	r3, #3
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002400:	2302      	movs	r3, #2
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <HAL_TIM_MspPostInit+0xdc>)
 800240c:	f000 fd1c 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002420:	2302      	movs	r3, #2
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <HAL_TIM_MspPostInit+0xe0>)
 800242c:	f000 fd0c 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40000400 	.word	0x40000400
 800243c:	40021000 	.word	0x40021000
 8002440:	48000400 	.word	0x48000400
 8002444:	48000800 	.word	0x48000800

08002448 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 800244e:	4a23      	ldr	r2, [pc, #140]	; (80024dc <MX_USART1_UART_Init+0x94>)
 8002450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002490:	4811      	ldr	r0, [pc, #68]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 8002492:	f006 ffef 	bl	8009474 <HAL_UART_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800249c:	f7ff fbe5 	bl	8001c6a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a0:	2100      	movs	r1, #0
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 80024a4:	f008 f8fd 	bl	800a6a2 <HAL_UARTEx_SetTxFifoThreshold>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024ae:	f7ff fbdc 	bl	8001c6a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b2:	2100      	movs	r1, #0
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 80024b6:	f008 f932 	bl	800a71e <HAL_UARTEx_SetRxFifoThreshold>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024c0:	f7ff fbd3 	bl	8001c6a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_USART1_UART_Init+0x90>)
 80024c6:	f008 f8b3 	bl	800a630 <HAL_UARTEx_DisableFifoMode>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024d0:	f7ff fbcb 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000640 	.word	0x20000640
 80024dc:	40013800 	.word	0x40013800

080024e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09a      	sub	sp, #104	; 0x68
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2244      	movs	r2, #68	; 0x44
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f00d fbee 	bl	800fce2 <memset>
  if(uartHandle->Instance==USART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_UART_MspInit+0xb8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d13f      	bne.n	8002590 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4618      	mov	r0, r3
 800251e:	f004 f873 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002528:	f7ff fb9f 	bl	8001c6a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_UART_MspInit+0xbc>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_UART_MspInit+0xbc>)
 8002532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002536:	6613      	str	r3, [r2, #96]	; 0x60
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_MspInit+0xbc>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0xbc>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_UART_MspInit+0xbc>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_UART_MspInit+0xbc>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800255c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002560:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800256e:	2307      	movs	r3, #7
 8002570:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257c:	f000 fc64 	bl	8002e48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2025      	movs	r0, #37	; 0x25
 8002586:	f000 f9a2 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800258a:	2025      	movs	r0, #37	; 0x25
 800258c:	f000 f9b9 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002590:	bf00      	nop
 8002592:	3768      	adds	r7, #104	; 0x68
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40013800 	.word	0x40013800
 800259c:	40021000 	.word	0x40021000

080025a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025a0:	480d      	ldr	r0, [pc, #52]	; (80025d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a4:	f7ff fd52 	bl	800204c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <LoopForever+0x6>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <LoopForever+0xe>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	; (80025ec <LoopForever+0x16>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f00d fbe1 	bl	800fd94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025d2:	f7ff fa09 	bl	80019e8 <main>

080025d6 <LoopForever>:

LoopForever:
    b LoopForever
 80025d6:	e7fe      	b.n	80025d6 <LoopForever>
  ldr   r0, =_estack
 80025d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e0:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80025e4:	08012910 	.word	0x08012910
  ldr r2, =_sbss
 80025e8:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80025ec:	200019f4 	.word	0x200019f4

080025f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC1_2_IRQHandler>

080025f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 f95b 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002602:	200f      	movs	r0, #15
 8002604:	f000 f80e 	bl	8002624 <HAL_InitTick>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	e001      	b.n	8002618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002614:	f7ff fbb6 	bl	8001d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002618:	79fb      	ldrb	r3, [r7, #7]

}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_InitTick+0x68>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d022      	beq.n	800267e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_InitTick+0x6c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_InitTick+0x68>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002644:	fbb1 f3f3 	udiv	r3, r1, r3
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f966 	bl	800291e <HAL_SYSTICK_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	d809      	bhi.n	8002672 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265e:	2200      	movs	r2, #0
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002666:	f000 f932 	bl	80028ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_InitTick+0x70>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e007      	b.n	8002682 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e004      	b.n	8002682 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e001      	b.n	8002682 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000008 	.word	0x20000008
 8002690:	20000000 	.word	0x20000000
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_IncTick+0x1c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_IncTick+0x20>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_IncTick+0x1c>)
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	200006d4 	.word	0x200006d4
 80026b8:	20000008 	.word	0x20000008

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	200006d4 	.word	0x200006d4

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff ffee 	bl	80026bc <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ec:	d004      	beq.n	80026f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_Delay+0x40>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f8:	bf00      	nop
 80026fa:	f7ff ffdf 	bl	80026bc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	429a      	cmp	r2, r3
 8002708:	d8f7      	bhi.n	80026fa <HAL_Delay+0x26>
  {
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000008 	.word	0x20000008

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002898:	f7ff ff8e 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff29 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff40 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff90 	bl	800280c <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5f 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff33 	bl	800277c <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa4 	bl	8002874 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e08d      	b.n	8002a66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_DMA_Init+0x138>)
 8002952:	429a      	cmp	r2, r3
 8002954:	d80f      	bhi.n	8002976 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <HAL_DMA_Init+0x13c>)
 800295e:	4413      	add	r3, r2
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <HAL_DMA_Init+0x140>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	009a      	lsls	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a42      	ldr	r2, [pc, #264]	; (8002a7c <HAL_DMA_Init+0x144>)
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
 8002974:	e00e      	b.n	8002994 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <HAL_DMA_Init+0x148>)
 800297e:	4413      	add	r3, r2
 8002980:	4a3d      	ldr	r2, [pc, #244]	; (8002a78 <HAL_DMA_Init+0x140>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	009a      	lsls	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a3c      	ldr	r2, [pc, #240]	; (8002a84 <HAL_DMA_Init+0x14c>)
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9cc 	bl	8002d84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f4:	d102      	bne.n	80029fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a10:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_DMA_Init+0x104>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d80c      	bhi.n	8002a3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f9ec 	bl	8002e00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	e008      	b.n	8002a4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020407 	.word	0x40020407
 8002a74:	bffdfff8 	.word	0xbffdfff8
 8002a78:	cccccccd 	.word	0xcccccccd
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	bffdfbf8 	.word	0xbffdfbf8
 8002a84:	40020400 	.word	0x40020400

08002a88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d005      	beq.n	8002aac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e037      	b.n	8002b1c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020e 	bic.w	r2, r2, #14
 8002aba:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aca:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002af8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b1a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d00d      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2204      	movs	r2, #4
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e047      	b.n	8002bfe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 020e 	bic.w	r2, r2, #14
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f003 021f 	and.w	r2, r3, #31
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00c      	beq.n	8002bde <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bdc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4798      	blx	r3
    }
  }
  return status;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2204      	movs	r2, #4
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d026      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x7a>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d021      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0204 	bic.w	r2, r2, #4
 8002c5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2104      	movs	r1, #4
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d071      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c80:	e06c      	b.n	8002d5c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02e      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d029      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 020a 	bic.w	r2, r2, #10
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d038      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cf2:	e033      	b.n	8002d5c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d02a      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d025      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 020e 	bic.w	r2, r2, #14
 8002d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
}
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d74:	b2db      	uxtb	r3, r3
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d802      	bhi.n	8002d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e001      	b.n	8002da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002da0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3b08      	subs	r3, #8
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002dce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40020407 	.word	0x40020407
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020820 	.word	0x40020820
 8002df8:	cccccccd 	.word	0xcccccccd
 8002dfc:	40020880 	.word	0x40020880

08002e00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	1000823f 	.word	0x1000823f
 8002e44:	40020940 	.word	0x40020940

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e56:	e15a      	b.n	800310e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 814c 	beq.w	8003108 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d005      	beq.n	8002e88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d130      	bne.n	8002eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0201 	and.w	r2, r3, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d017      	beq.n	8002f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d123      	bne.n	8002f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	08da      	lsrs	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3208      	adds	r2, #8
 8002f74:	6939      	ldr	r1, [r7, #16]
 8002f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0203 	and.w	r2, r3, #3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80a6 	beq.w	8003108 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbc:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_GPIO_Init+0x2e4>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	4a5a      	ldr	r2, [pc, #360]	; (800312c <HAL_GPIO_Init+0x2e4>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <HAL_GPIO_Init+0x2e4>)
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd4:	4a56      	ldr	r2, [pc, #344]	; (8003130 <HAL_GPIO_Init+0x2e8>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ffe:	d01f      	beq.n	8003040 <HAL_GPIO_Init+0x1f8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a4c      	ldr	r2, [pc, #304]	; (8003134 <HAL_GPIO_Init+0x2ec>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d019      	beq.n	800303c <HAL_GPIO_Init+0x1f4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a4b      	ldr	r2, [pc, #300]	; (8003138 <HAL_GPIO_Init+0x2f0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_GPIO_Init+0x1f0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a4a      	ldr	r2, [pc, #296]	; (800313c <HAL_GPIO_Init+0x2f4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_GPIO_Init+0x1ec>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_GPIO_Init+0x2f8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <HAL_GPIO_Init+0x1e8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_GPIO_Init+0x2fc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_GPIO_Init+0x1e4>
 8003028:	2305      	movs	r3, #5
 800302a:	e00a      	b.n	8003042 <HAL_GPIO_Init+0x1fa>
 800302c:	2306      	movs	r3, #6
 800302e:	e008      	b.n	8003042 <HAL_GPIO_Init+0x1fa>
 8003030:	2304      	movs	r3, #4
 8003032:	e006      	b.n	8003042 <HAL_GPIO_Init+0x1fa>
 8003034:	2303      	movs	r3, #3
 8003036:	e004      	b.n	8003042 <HAL_GPIO_Init+0x1fa>
 8003038:	2302      	movs	r3, #2
 800303a:	e002      	b.n	8003042 <HAL_GPIO_Init+0x1fa>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_GPIO_Init+0x1fa>
 8003040:	2300      	movs	r3, #0
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	f002 0203 	and.w	r2, r2, #3
 8003048:	0092      	lsls	r2, r2, #2
 800304a:	4093      	lsls	r3, r2
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003052:	4937      	ldr	r1, [pc, #220]	; (8003130 <HAL_GPIO_Init+0x2e8>)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	3302      	adds	r3, #2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_GPIO_Init+0x300>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003084:	4a30      	ldr	r2, [pc, #192]	; (8003148 <HAL_GPIO_Init+0x300>)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <HAL_GPIO_Init+0x300>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ae:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003102:	4a11      	ldr	r2, [pc, #68]	; (8003148 <HAL_GPIO_Init+0x300>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3301      	adds	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f ae9d 	bne.w	8002e58 <HAL_GPIO_Init+0x10>
  }
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40021000 	.word	0x40021000
 8003130:	40010000 	.word	0x40010000
 8003134:	48000400 	.word	0x48000400
 8003138:	48000800 	.word	0x48000800
 800313c:	48000c00 	.word	0x48000c00
 8003140:	48001000 	.word	0x48001000
 8003144:	48001400 	.word	0x48001400
 8003148:	40010400 	.word	0x40010400

0800314c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800315c:	787b      	ldrb	r3, [r7, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003168:	e002      	b.n	8003170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e08d      	b.n	80032aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe fb14 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e006      	b.n	8003204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d108      	bne.n	800321e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	e007      	b.n	800322e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800323c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003240:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003250:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
  }
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00f      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f043 0208 	orr.w	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003350:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00f      	beq.n	800337c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 030b 	and.w	r3, r3, #11
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fbd6 	bl	8003b40 <I2C_ITError>
  }
}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
 80033d0:	4613      	mov	r3, r2
 80033d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <I2C_Slave_ISR_IT+0x24>
 800343c:	2302      	movs	r3, #2
 800343e:	e0e2      	b.n	8003606 <I2C_Slave_ISR_IT+0x1ea>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800345c:	6939      	ldr	r1, [r7, #16]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f9b6 	bl	80037d0 <I2C_ITSlaveCplt>
 8003464:	e0ca      	b.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d04b      	beq.n	8003508 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003476:	2b00      	cmp	r3, #0
 8003478:	d046      	beq.n	8003508 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d128      	bne.n	80034d6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b28      	cmp	r3, #40	; 0x28
 800348e:	d108      	bne.n	80034a2 <I2C_Slave_ISR_IT+0x86>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003496:	d104      	bne.n	80034a2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003498:	6939      	ldr	r1, [r7, #16]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fafc 	bl	8003a98 <I2C_ITListenCplt>
 80034a0:	e031      	b.n	8003506 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b29      	cmp	r3, #41	; 0x29
 80034ac:	d10e      	bne.n	80034cc <I2C_Slave_ISR_IT+0xb0>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034b4:	d00a      	beq.n	80034cc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2210      	movs	r2, #16
 80034bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fc55 	bl	8003d6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f926 	bl	8003716 <I2C_ITSlaveSeqCplt>
 80034ca:	e01c      	b.n	8003506 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80034d4:	e08f      	b.n	80035f6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2210      	movs	r2, #16
 80034dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <I2C_Slave_ISR_IT+0xdc>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f6:	d17e      	bne.n	80035f6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	4619      	mov	r1, r3
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fb1e 	bl	8003b40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003504:	e077      	b.n	80035f6 <I2C_Slave_ISR_IT+0x1da>
 8003506:	e076      	b.n	80035f6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d02f      	beq.n	8003572 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02a      	beq.n	8003572 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d018      	beq.n	8003558 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d14b      	bne.n	80035fa <I2C_Slave_ISR_IT+0x1de>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003568:	d047      	beq.n	80035fa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f8d3 	bl	8003716 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003570:	e043      	b.n	80035fa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003586:	6939      	ldr	r1, [r7, #16]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f840 	bl	800360e <I2C_ITAddrCplt>
 800358e:	e035      	b.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d030      	beq.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02b      	beq.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
 80035de:	e00d      	b.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e6:	d002      	beq.n	80035ee <I2C_Slave_ISR_IT+0x1d2>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f891 	bl	8003716 <I2C_ITSlaveSeqCplt>
 80035f4:	e002      	b.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80035fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003624:	2b28      	cmp	r3, #40	; 0x28
 8003626:	d16a      	bne.n	80036fe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	0c1b      	lsrs	r3, r3, #16
 8003640:	b29b      	uxth	r3, r3
 8003642:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003646:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003662:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d138      	bne.n	80036de <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	09db      	lsrs	r3, r3, #7
 8003670:	b29a      	uxth	r2, r3
 8003672:	89bb      	ldrh	r3, [r7, #12]
 8003674:	4053      	eors	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	f003 0306 	and.w	r3, r3, #6
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11c      	bne.n	80036ba <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	2b02      	cmp	r3, #2
 8003694:	d13b      	bne.n	800370e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036ac:	89ba      	ldrh	r2, [r7, #12]
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fe86 	bl	80033c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036b8:	e029      	b.n	800370e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80036ba:	893b      	ldrh	r3, [r7, #8]
 80036bc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fb95 	bl	8003df2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036d0:	89ba      	ldrh	r2, [r7, #12]
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe74 	bl	80033c4 <HAL_I2C_AddrCallback>
}
 80036dc:	e017      	b.n	800370e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb85 	bl	8003df2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036f0:	89ba      	ldrh	r2, [r7, #12]
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fe64 	bl	80033c4 <HAL_I2C_AddrCallback>
}
 80036fc:	e007      	b.n	800370e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e00c      	b.n	8003764 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003762:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b29      	cmp	r3, #41	; 0x29
 800376e:	d112      	bne.n	8003796 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2228      	movs	r2, #40	; 0x28
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800377e:	2101      	movs	r1, #1
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb36 	bl	8003df2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fe04 	bl	800339c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003794:	e017      	b.n	80037c6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b2a      	cmp	r3, #42	; 0x2a
 80037a0:	d111      	bne.n	80037c6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2228      	movs	r2, #40	; 0x28
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2222      	movs	r2, #34	; 0x22
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80037b0:	2102      	movs	r1, #2
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fb1d 	bl	8003df2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fdf5 	bl	80033b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2220      	movs	r2, #32
 80037fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	2b21      	cmp	r3, #33	; 0x21
 8003800:	d002      	beq.n	8003808 <I2C_ITSlaveCplt+0x38>
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	2b29      	cmp	r3, #41	; 0x29
 8003806:	d108      	bne.n	800381a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003808:	f248 0101 	movw	r1, #32769	; 0x8001
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 faf0 	bl	8003df2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2221      	movs	r2, #33	; 0x21
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
 8003818:	e019      	b.n	800384e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	2b22      	cmp	r3, #34	; 0x22
 800381e:	d002      	beq.n	8003826 <I2C_ITSlaveCplt+0x56>
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	2b2a      	cmp	r3, #42	; 0x2a
 8003824:	d108      	bne.n	8003838 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003826:	f248 0102 	movw	r1, #32770	; 0x8002
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fae1 	bl	8003df2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2222      	movs	r2, #34	; 0x22
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
 8003836:	e00a      	b.n	800384e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	2b28      	cmp	r3, #40	; 0x28
 800383c:	d107      	bne.n	800384e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800383e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fad5 	bl	8003df2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <I2C_ITSlaveCplt+0x2c0>)
 800386a:	400b      	ands	r3, r1
 800386c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa7d 	bl	8003d6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d013      	beq.n	80038a6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800388c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01f      	beq.n	80038d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a4:	e017      	b.n	80038d6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d049      	beq.n	80039d6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003948:	2b00      	cmp	r3, #0
 800394a:	d044      	beq.n	80039d6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d128      	bne.n	80039a8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b28      	cmp	r3, #40	; 0x28
 8003960:	d108      	bne.n	8003974 <I2C_ITSlaveCplt+0x1a4>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003968:	d104      	bne.n	8003974 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800396a:	6979      	ldr	r1, [r7, #20]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f893 	bl	8003a98 <I2C_ITListenCplt>
 8003972:	e030      	b.n	80039d6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b29      	cmp	r3, #41	; 0x29
 800397e:	d10e      	bne.n	800399e <I2C_ITSlaveCplt+0x1ce>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003986:	d00a      	beq.n	800399e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f9ec 	bl	8003d6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff febd 	bl	8003716 <I2C_ITSlaveSeqCplt>
 800399c:	e01b      	b.n	80039d6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	61da      	str	r2, [r3, #28]
 80039a6:	e016      	b.n	80039d6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <I2C_ITSlaveCplt+0x1fa>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c8:	d105      	bne.n	80039d6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4619      	mov	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8b5 	bl	8003b40 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8a4 	bl	8003b40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b28      	cmp	r3, #40	; 0x28
 8003a02:	d141      	bne.n	8003a88 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f846 	bl	8003a98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a0c:	e03c      	b.n	8003a88 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a16:	d014      	beq.n	8003a42 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fe7c 	bl	8003716 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <I2C_ITSlaveCplt+0x2c4>)
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fcd0 	bl	80033e0 <HAL_I2C_ListenCpltCallback>
}
 8003a40:	e022      	b.n	8003a88 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b22      	cmp	r3, #34	; 0x22
 8003a4c:	d10e      	bne.n	8003a6c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fca3 	bl	80033b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a6a:	e00d      	b.n	8003a88 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fc8a 	bl	800339c <HAL_I2C_SlaveTxCpltCallback>
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	fe00e800 	.word	0xfe00e800
 8003a94:	ffff0000 	.word	0xffff0000

08003a98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <I2C_ITListenCplt+0xa4>)
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d022      	beq.n	8003b14 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d012      	beq.n	8003b14 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b14:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f96a 	bl	8003df2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2210      	movs	r2, #16
 8003b24:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fc56 	bl	80033e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	ffff0000 	.word	0xffff0000

08003b40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a6d      	ldr	r2, [pc, #436]	; (8003d14 <I2C_ITError+0x1d4>)
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b28      	cmp	r3, #40	; 0x28
 8003b76:	d005      	beq.n	8003b84 <I2C_ITError+0x44>
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b29      	cmp	r3, #41	; 0x29
 8003b7c:	d002      	beq.n	8003b84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b2a      	cmp	r3, #42	; 0x2a
 8003b82:	d10b      	bne.n	8003b9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b84:	2103      	movs	r1, #3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f933 	bl	8003df2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2228      	movs	r2, #40	; 0x28
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a60      	ldr	r2, [pc, #384]	; (8003d18 <I2C_ITError+0x1d8>)
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9a:	e030      	b.n	8003bfe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b9c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f926 	bl	8003df2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8e1 	bl	8003d6e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d01f      	beq.n	8003bf8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d114      	bne.n	8003bf8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d109      	bne.n	8003bf0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d039      	beq.n	8003c80 <I2C_ITError+0x140>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b11      	cmp	r3, #17
 8003c10:	d002      	beq.n	8003c18 <I2C_ITError+0xd8>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b21      	cmp	r3, #33	; 0x21
 8003c16:	d133      	bne.n	8003c80 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c26:	d107      	bne.n	8003c38 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff f892 	bl	8002d66 <HAL_DMA_GetState>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d017      	beq.n	8003c78 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <I2C_ITError+0x1dc>)
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe ff6c 	bl	8002b3a <HAL_DMA_Abort_IT>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d04d      	beq.n	8003d04 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c72:	4610      	mov	r0, r2
 8003c74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c76:	e045      	b.n	8003d04 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f851 	bl	8003d20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c7e:	e041      	b.n	8003d04 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d039      	beq.n	8003cfc <I2C_ITError+0x1bc>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b12      	cmp	r3, #18
 8003c8c:	d002      	beq.n	8003c94 <I2C_ITError+0x154>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b22      	cmp	r3, #34	; 0x22
 8003c92:	d133      	bne.n	8003cfc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	d107      	bne.n	8003cb4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff f854 	bl	8002d66 <HAL_DMA_GetState>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d017      	beq.n	8003cf4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <I2C_ITError+0x1dc>)
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe ff2e 	bl	8002b3a <HAL_DMA_Abort_IT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf2:	e009      	b.n	8003d08 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f813 	bl	8003d20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cfa:	e005      	b.n	8003d08 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f80f 	bl	8003d20 <I2C_TreatErrorCallback>
  }
}
 8003d02:	e002      	b.n	8003d0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d08:	bf00      	nop
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	ffff0000 	.word	0xffff0000
 8003d18:	0800341d 	.word	0x0800341d
 8003d1c:	08003db7 	.word	0x08003db7

08003d20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d10e      	bne.n	8003d52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fb5c 	bl	8003408 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d50:	e009      	b.n	8003d66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fb47 	bl	80033f4 <HAL_I2C_ErrorCallback>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d103      	bne.n	8003d8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d007      	beq.n	8003daa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	619a      	str	r2, [r3, #24]
  }
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	2200      	movs	r2, #0
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff ff9b 	bl	8003d20 <I2C_TreatErrorCallback>
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003e12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e20:	2b28      	cmp	r3, #40	; 0x28
 8003e22:	d003      	beq.n	8003e2c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00f      	beq.n	8003e56 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003e3c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e4a:	2b28      	cmp	r3, #40	; 0x28
 8003e4c:	d003      	beq.n	8003e56 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da03      	bge.n	8003e66 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d103      	bne.n	8003e74 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d103      	bne.n	8003e82 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f043 0320 	orr.w	r3, r3, #32
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d103      	bne.n	8003e90 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d138      	bne.n	8003f36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e032      	b.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2224      	movs	r2, #36	; 0x24
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d139      	bne.n	8003fce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e033      	b.n	8003fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0c0      	b.n	8004170 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f00a fdde 	bl	800ebc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f006 fc26 	bl	800a866 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	e03e      	b.n	800409e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3311      	adds	r3, #17
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	440b      	add	r3, r1
 8004042:	3310      	adds	r3, #16
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	3313      	adds	r3, #19
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	3320      	adds	r3, #32
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	440b      	add	r3, r1
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	3301      	adds	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3bb      	bcc.n	8004020 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	e044      	b.n	8004138 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	f203 1351 	addw	r3, r3, #337	; 0x151
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	3301      	adds	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	791b      	ldrb	r3, [r3, #4]
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	429a      	cmp	r2, r3
 8004140:	d3b5      	bcc.n	80040ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800414e:	f006 fba5 	bl	800a89c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7a9b      	ldrb	r3, [r3, #10]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d102      	bne.n	800416e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 fc41 	bl	80059f0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_PCD_Start+0x16>
 800418a:	2302      	movs	r3, #2
 800418c:	e012      	b.n	80041b4 <HAL_PCD_Start+0x3c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f006 fb4c 	bl	800a838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f008 fe0c 	bl	800cdc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f008 fe11 	bl	800cdf0 <USB_ReadInterrupts>
 80041ce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fb04 	bl	80047e8 <PCD_EP_ISR_Handler>

    return;
 80041e0:	e110      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	b292      	uxth	r2, r2
 8004200:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f00a fd6e 	bl	800ece6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800420a:	2100      	movs	r1, #0
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8fc 	bl	800440a <HAL_PCD_SetAddress>

    return;
 8004212:	e0f7      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004230:	b292      	uxth	r2, r2
 8004232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004236:	e0e5      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004254:	b292      	uxth	r2, r2
 8004256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800425a:	e0d3      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d034      	beq.n	80042d0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0204 	bic.w	r2, r2, #4
 8004278:	b292      	uxth	r2, r2
 800427a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	b292      	uxth	r2, r2
 8004292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042a8:	2100      	movs	r1, #0
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f00a ff0e 	bl	800f0cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f00a fd51 	bl	800ed58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042c8:	b292      	uxth	r2, r2
 80042ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80042ce:	e099      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d027      	beq.n	800432a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0208 	orr.w	r2, r2, #8
 80042ec:	b292      	uxth	r2, r2
 80042ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004304:	b292      	uxth	r2, r2
 8004306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0204 	orr.w	r2, r2, #4
 800431c:	b292      	uxth	r2, r2
 800431e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f00a fcfe 	bl	800ed24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004328:	e06c      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	d040      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004346:	b292      	uxth	r2, r2
 8004348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12b      	bne.n	80043ae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0204 	orr.w	r2, r2, #4
 8004368:	b292      	uxth	r2, r2
 800436a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0208 	orr.w	r2, r2, #8
 8004380:	b292      	uxth	r2, r2
 8004382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004396:	b29b      	uxth	r3, r3
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80043a4:	2101      	movs	r1, #1
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f00a fe90 	bl	800f0cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80043ac:	e02a      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f00a fcb8 	bl	800ed24 <HAL_PCD_SuspendCallback>
    return;
 80043b4:	e026      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00f      	beq.n	80043e0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043d2:	b292      	uxth	r2, r2
 80043d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f00a fc76 	bl	800ecca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80043de:	e011      	b.n	8004404 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fc:	b292      	uxth	r2, r2
 80043fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004402:	bf00      	nop
  }
}
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_PCD_SetAddress+0x1a>
 8004420:	2302      	movs	r3, #2
 8004422:	e012      	b.n	800444a <HAL_PCD_SetAddress+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f008 fcad 	bl	800cd9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	4608      	mov	r0, r1
 800445c:	4611      	mov	r1, r2
 800445e:	461a      	mov	r2, r3
 8004460:	4603      	mov	r3, r0
 8004462:	70fb      	strb	r3, [r7, #3]
 8004464:	460b      	mov	r3, r1
 8004466:	803b      	strh	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da0e      	bge.n	8004496 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	f003 0207 	and.w	r2, r3, #7
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	3310      	adds	r3, #16
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4413      	add	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	705a      	strb	r2, [r3, #1]
 8004494:	e00e      	b.n	80044b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 0207 	and.w	r2, r3, #7
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044c0:	883a      	ldrh	r2, [r7, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	78ba      	ldrb	r2, [r7, #2]
 80044ca:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044cc:	78bb      	ldrb	r3, [r7, #2]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d102      	bne.n	80044d8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_PCD_EP_Open+0x94>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e00e      	b.n	8004504 <HAL_PCD_EP_Open+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f006 f9ef 	bl	800a8d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004502:	7afb      	ldrb	r3, [r7, #11]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800451c:	2b00      	cmp	r3, #0
 800451e:	da0e      	bge.n	800453e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 0207 	and.w	r2, r3, #7
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	3310      	adds	r3, #16
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	705a      	strb	r2, [r3, #1]
 800453c:	e00e      	b.n	800455c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 0207 	and.w	r2, r3, #7
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_PCD_EP_Close+0x6a>
 8004572:	2302      	movs	r3, #2
 8004574:	e00e      	b.n	8004594 <HAL_PCD_EP_Close+0x88>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	4618      	mov	r0, r3
 8004586:	f006 fd6b 	bl	800b060 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	460b      	mov	r3, r1
 80045aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ac:	7afb      	ldrb	r3, [r7, #11]
 80045ae:	f003 0207 	and.w	r2, r3, #7
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045dc:	7afb      	ldrb	r3, [r7, #11]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f006 ff23 	bl	800b43a <USB_EPStartXfer>

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	f003 0207 	and.w	r2, r3, #7
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	440b      	add	r3, r1
 800461c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004620:	681b      	ldr	r3, [r3, #0]
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	460b      	mov	r3, r1
 800463c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	f003 0207 	and.w	r2, r3, #7
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3310      	adds	r3, #16
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2201      	movs	r2, #1
 8004678:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	b2da      	uxtb	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6979      	ldr	r1, [r7, #20]
 800468c:	4618      	mov	r0, r3
 800468e:	f006 fed4 	bl	800b43a <USB_EPStartXfer>

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	7912      	ldrb	r2, [r2, #4]
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e03e      	b.n	8004738 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da0e      	bge.n	80046e0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 0207 	and.w	r2, r3, #7
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	3310      	adds	r3, #16
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	705a      	strb	r2, [r3, #1]
 80046de:	e00c      	b.n	80046fa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_PCD_EP_SetStall+0x7e>
 8004716:	2302      	movs	r3, #2
 8004718:	e00e      	b.n	8004738 <HAL_PCD_EP_SetStall+0x9c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	4618      	mov	r0, r3
 800472a:	f008 fa37 	bl	800cb9c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	7912      	ldrb	r2, [r2, #4]
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e040      	b.n	80047e0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800475e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	da0e      	bge.n	8004784 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 0207 	and.w	r2, r3, #7
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3310      	adds	r3, #16
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	705a      	strb	r2, [r3, #1]
 8004782:	e00e      	b.n	80047a2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 0207 	and.w	r2, r3, #7
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_PCD_EP_ClrStall+0x82>
 80047be:	2302      	movs	r3, #2
 80047c0:	e00e      	b.n	80047e0 <HAL_PCD_EP_ClrStall+0xa0>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f008 fa34 	bl	800cc3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b096      	sub	sp, #88	; 0x58
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047f0:	e3ae      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80047fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800480c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 8170 	bne.w	8004af6 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d14d      	bne.n	80048be <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	81fb      	strh	r3, [r7, #14]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	89fb      	ldrh	r3, [r7, #14]
 800483a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3310      	adds	r3, #16
 800484a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	4413      	add	r3, r2
 8004866:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004872:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	441a      	add	r2, r3
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004882:	2100      	movs	r1, #0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f00a fa06 	bl	800ec96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7b1b      	ldrb	r3, [r3, #12]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 835d 	beq.w	8004f50 <PCD_EP_ISR_Handler+0x768>
 8004896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8358 	bne.w	8004f50 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7b1b      	ldrb	r3, [r3, #12]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	b292      	uxth	r2, r2
 80048b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	731a      	strb	r2, [r3, #12]
 80048bc:	e348      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80048c4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d032      	beq.n	8004942 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004902:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004916:	b29b      	uxth	r3, r3
 8004918:	f008 fabc 	bl	800ce94 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29a      	uxth	r2, r3
 8004924:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004928:	4013      	ands	r3, r2
 800492a:	823b      	strh	r3, [r7, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	8a3a      	ldrh	r2, [r7, #16]
 8004932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004936:	b292      	uxth	r2, r2
 8004938:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f00a f97e 	bl	800ec3c <HAL_PCD_SetupStageCallback>
 8004940:	e306      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004942:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004946:	2b00      	cmp	r3, #0
 8004948:	f280 8302 	bge.w	8004f50 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004958:	4013      	ands	r3, r2
 800495a:	83fb      	strh	r3, [r7, #30]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	8bfa      	ldrh	r2, [r7, #30]
 8004962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004966:	b292      	uxth	r2, r2
 8004968:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4413      	add	r3, r2
 8004984:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004990:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d019      	beq.n	80049ce <PCD_EP_ISR_Handler+0x1e6>
 800499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d015      	beq.n	80049ce <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	6959      	ldr	r1, [r3, #20]
 80049aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80049ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f008 fa6e 	bl	800ce94 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80049b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	441a      	add	r2, r3
 80049c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049c6:	2100      	movs	r1, #0
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f00a f949 	bl	800ec60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80049d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 82b5 	bne.w	8004f50 <PCD_EP_ISR_Handler+0x768>
 80049e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f2:	f000 82ad 	beq.w	8004f50 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a2c:	d91d      	bls.n	8004a6a <PCD_EP_ISR_Handler+0x282>
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <PCD_EP_ISR_Handler+0x260>
 8004a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a44:	3b01      	subs	r3, #1
 8004a46:	647b      	str	r3, [r7, #68]	; 0x44
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e026      	b.n	8004ab8 <PCD_EP_ISR_Handler+0x2d0>
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <PCD_EP_ISR_Handler+0x2a0>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	e017      	b.n	8004ab8 <PCD_EP_ISR_Handler+0x2d0>
 8004a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <PCD_EP_ISR_Handler+0x2ba>
 8004a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	827b      	strh	r3, [r7, #18]
 8004aca:	8a7b      	ldrh	r3, [r7, #18]
 8004acc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ad0:	827b      	strh	r3, [r7, #18]
 8004ad2:	8a7b      	ldrh	r3, [r7, #18]
 8004ad4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ad8:	827b      	strh	r3, [r7, #18]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	8a7b      	ldrh	r3, [r7, #18]
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]
 8004af4:	e22c      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b0a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f280 80f6 	bge.w	8004d00 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b46:	b292      	uxth	r2, r2
 8004b48:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b4a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b62:	7b1b      	ldrb	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d123      	bne.n	8004bb0 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	4413      	add	r3, r2
 8004b82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004b90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 808e 	beq.w	8004cb6 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba0:	6959      	ldr	r1, [r3, #20]
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba4:	88da      	ldrh	r2, [r3, #6]
 8004ba6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004baa:	f008 f973 	bl	800ce94 <USB_ReadPMA>
 8004bae:	e082      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb2:	78db      	ldrb	r3, [r3, #3]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d10a      	bne.n	8004bce <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004bb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f9d3 	bl	8004f6c <HAL_PCD_EP_DB_Receive>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004bcc:	e073      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d022      	beq.n	8004c72 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d02c      	beq.n	8004cb6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c62:	6959      	ldr	r1, [r3, #20]
 8004c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c66:	891a      	ldrh	r2, [r3, #8]
 8004c68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c6c:	f008 f912 	bl	800ce94 <USB_ReadPMA>
 8004c70:	e021      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004c9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca8:	6959      	ldr	r1, [r3, #20]
 8004caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cac:	895a      	ldrh	r2, [r3, #10]
 8004cae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004cb2:	f008 f8ef 	bl	800ce94 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004cbe:	441a      	add	r2, r3
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ccc:	441a      	add	r2, r3
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <PCD_EP_ISR_Handler+0x4fe>
 8004cda:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d206      	bcs.n	8004cf4 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f009 ffb7 	bl	800ec60 <HAL_PCD_DataOutStageCallback>
 8004cf2:	e005      	b.n	8004d00 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f006 fb9d 	bl	800b43a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8121 	beq.w	8004f50 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d0e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	3310      	adds	r3, #16
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	f040 80a2 	bne.w	8004eac <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d70:	7b1b      	ldrb	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8093 	beq.w	8004e9e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d046      	beq.n	8004e12 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d126      	bne.n	8004dda <PCD_EP_ISR_Handler+0x5f2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	4413      	add	r3, r2
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
 8004da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	00da      	lsls	r2, r3, #3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	4413      	add	r3, r2
 8004dae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	e061      	b.n	8004e9e <PCD_EP_ISR_Handler+0x6b6>
 8004dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d15d      	bne.n	8004e9e <PCD_EP_ISR_Handler+0x6b6>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	4413      	add	r3, r2
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	00da      	lsls	r2, r3, #3
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	4413      	add	r3, r2
 8004e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	e045      	b.n	8004e9e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d126      	bne.n	8004e6e <PCD_EP_ISR_Handler+0x686>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	4413      	add	r3, r2
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
 8004e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00da      	lsls	r2, r3, #3
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	4413      	add	r3, r2
 8004e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e46:	633b      	str	r3, [r7, #48]	; 0x30
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e017      	b.n	8004e9e <PCD_EP_ISR_Handler+0x6b6>
 8004e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d113      	bne.n	8004e9e <PCD_EP_ISR_Handler+0x6b6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e84:	4413      	add	r3, r2
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	00da      	lsls	r2, r3, #3
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e90:	4413      	add	r3, r2
 8004e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f009 fef6 	bl	800ec96 <HAL_PCD_DataInStageCallback>
 8004eaa:	e051      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d144      	bne.n	8004f42 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004edc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d907      	bls.n	8004efc <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ef4:	1ad2      	subs	r2, r2, r3
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef8:	619a      	str	r2, [r3, #24]
 8004efa:	e002      	b.n	8004f02 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efe:	2200      	movs	r2, #0
 8004f00:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f009 fec0 	bl	800ec96 <HAL_PCD_DataInStageCallback>
 8004f16:	e01b      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f20:	441a      	add	r2, r3
 8004f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f24:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f2e:	441a      	add	r2, r3
 8004f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f32:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f006 fa7d 	bl	800b43a <USB_EPStartXfer>
 8004f40:	e006      	b.n	8004f50 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f46:	461a      	mov	r2, r3
 8004f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f917 	bl	800517e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	b21b      	sxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f6ff ac48 	blt.w	80047f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3758      	adds	r7, #88	; 0x58
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d07c      	beq.n	800507e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4413      	add	r3, r2
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	8b7b      	ldrh	r3, [r7, #26]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d306      	bcc.n	8004fc2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	619a      	str	r2, [r3, #24]
 8004fc0:	e002      	b.n	8004fc8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d123      	bne.n	8005018 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	833b      	strh	r3, [r7, #24]
 8004fec:	8b3b      	ldrh	r3, [r7, #24]
 8004fee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ff2:	833b      	strh	r3, [r7, #24]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	8b3b      	ldrh	r3, [r7, #24]
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01f      	beq.n	8005062 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503c:	82fb      	strh	r3, [r7, #22]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8afb      	ldrh	r3, [r7, #22]
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005062:	8b7b      	ldrh	r3, [r7, #26]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8085 	beq.w	8005174 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	891a      	ldrh	r2, [r3, #8]
 8005076:	8b7b      	ldrh	r3, [r7, #26]
 8005078:	f007 ff0c 	bl	800ce94 <USB_ReadPMA>
 800507c:	e07a      	b.n	8005174 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	4413      	add	r3, r2
 8005098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	8b7b      	ldrh	r3, [r7, #26]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d306      	bcc.n	80050bc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	8b7b      	ldrh	r3, [r7, #26]
 80050b4:	1ad2      	subs	r2, r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	619a      	str	r2, [r3, #24]
 80050ba:	e002      	b.n	80050c2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d123      	bne.n	8005112 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	83fb      	strh	r3, [r7, #30]
 80050e6:	8bfb      	ldrh	r3, [r7, #30]
 80050e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050ec:	83fb      	strh	r3, [r7, #30]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	8bfb      	ldrh	r3, [r7, #30]
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11f      	bne.n	800515c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	83bb      	strh	r3, [r7, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	8bbb      	ldrh	r3, [r7, #28]
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800515c:	8b7b      	ldrh	r3, [r7, #26]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6959      	ldr	r1, [r3, #20]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	895a      	ldrh	r2, [r3, #10]
 800516e:	8b7b      	ldrh	r3, [r7, #26]
 8005170:	f007 fe90 	bl	800ce94 <USB_ReadPMA>
    }
  }

  return count;
 8005174:	8b7b      	ldrh	r3, [r7, #26]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b0a4      	sub	sp, #144	; 0x90
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	4613      	mov	r3, r2
 800518a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 81db 	beq.w	800554e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051bc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	699a      	ldr	r2, [r3, #24]
 80051c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d907      	bls.n	80051dc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	699a      	ldr	r2, [r3, #24]
 80051d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	619a      	str	r2, [r3, #24]
 80051da:	e002      	b.n	80051e2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 80b9 	bne.w	800535e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d126      	bne.n	8005242 <HAL_PCD_EP_DB_Transmit+0xc4>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	4413      	add	r3, r2
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	00da      	lsls	r2, r3, #3
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	4413      	add	r3, r2
 8005216:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005226:	b29a      	uxth	r2, r3
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523a:	b29a      	uxth	r2, r3
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e01a      	b.n	8005278 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d116      	bne.n	8005278 <HAL_PCD_EP_DB_Transmit+0xfa>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	4413      	add	r3, r2
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	00da      	lsls	r2, r3, #3
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	4413      	add	r3, r2
 800526c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	2200      	movs	r2, #0
 8005276:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d126      	bne.n	80052d4 <HAL_PCD_EP_DB_Transmit+0x156>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	00da      	lsls	r2, r3, #3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	e017      	b.n	8005304 <HAL_PCD_EP_DB_Transmit+0x186>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d113      	bne.n	8005304 <HAL_PCD_EP_DB_Transmit+0x186>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	4413      	add	r3, r2
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	00da      	lsls	r2, r3, #3
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	4413      	add	r3, r2
 80052f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	2200      	movs	r2, #0
 8005302:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f009 fcc3 	bl	800ec96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 82fa 	beq.w	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	82fb      	strh	r3, [r7, #22]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	441a      	add	r2, r3
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005358:	b29b      	uxth	r3, r3
 800535a:	8013      	strh	r3, [r2, #0]
 800535c:	e2d8      	b.n	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d021      	beq.n	80053ac <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f040 82ac 	bne.w	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80053c0:	441a      	add	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80053ce:	441a      	add	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d30b      	bcc.n	80053f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	621a      	str	r2, [r3, #32]
 80053f6:	e017      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d108      	bne.n	8005412 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005400:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005410:	e00a      	b.n	8005428 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2200      	movs	r2, #0
 8005426:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d165      	bne.n	80054fc <HAL_PCD_EP_DB_Transmit+0x37e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	4413      	add	r3, r2
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	00da      	lsls	r2, r3, #3
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	4413      	add	r3, r2
 8005452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005462:	b29a      	uxth	r2, r3
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800546c:	2b3e      	cmp	r3, #62	; 0x3e
 800546e:	d91d      	bls.n	80054ac <HAL_PCD_EP_DB_Transmit+0x32e>
 8005470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	64bb      	str	r3, [r7, #72]	; 0x48
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <HAL_PCD_EP_DB_Transmit+0x30c>
 8005484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005486:	3b01      	subs	r3, #1
 8005488:	64bb      	str	r3, [r7, #72]	; 0x48
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29a      	uxth	r2, r3
 8005490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005492:	b29b      	uxth	r3, r3
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	b29b      	uxth	r3, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e044      	b.n	8005536 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <HAL_PCD_EP_DB_Transmit+0x34c>
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e035      	b.n	8005536 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80054ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_PCD_EP_DB_Transmit+0x366>
 80054de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e0:	3301      	adds	r3, #1
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	029b      	lsls	r3, r3, #10
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	4313      	orrs	r3, r2
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e01c      	b.n	8005536 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d118      	bne.n	8005536 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	647b      	str	r3, [r7, #68]	; 0x44
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005512:	b29b      	uxth	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005518:	4413      	add	r3, r2
 800551a:	647b      	str	r3, [r7, #68]	; 0x44
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	00da      	lsls	r2, r3, #3
 8005522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005524:	4413      	add	r3, r2
 8005526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
 800552c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005530:	b29a      	uxth	r2, r3
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6959      	ldr	r1, [r3, #20]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	891a      	ldrh	r2, [r3, #8]
 8005542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005546:	b29b      	uxth	r3, r3
 8005548:	f007 fc62 	bl	800ce10 <USB_WritePMA>
 800554c:	e1e0      	b.n	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	4413      	add	r3, r2
 8005568:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005572:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800557e:	429a      	cmp	r2, r3
 8005580:	d307      	bcc.n	8005592 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	619a      	str	r2, [r3, #24]
 8005590:	e002      	b.n	8005598 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 80c0 	bne.w	8005722 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d126      	bne.n	80055f8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055be:	4413      	add	r3, r2
 80055c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	00da      	lsls	r2, r3, #3
 80055c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ca:	4413      	add	r3, r2
 80055cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	e01a      	b.n	800562e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d116      	bne.n	800562e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	667b      	str	r3, [r7, #100]	; 0x64
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005614:	4413      	add	r3, r2
 8005616:	667b      	str	r3, [r7, #100]	; 0x64
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005620:	4413      	add	r3, r2
 8005622:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005626:	663b      	str	r3, [r7, #96]	; 0x60
 8005628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562a:	2200      	movs	r2, #0
 800562c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	677b      	str	r3, [r7, #116]	; 0x74
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d12b      	bne.n	8005694 <HAL_PCD_EP_DB_Transmit+0x516>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	4413      	add	r3, r2
 8005652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565c:	4413      	add	r3, r2
 800565e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005672:	b29a      	uxth	r2, r3
 8005674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e017      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x546>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d113      	bne.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x546>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056aa:	4413      	add	r3, r2
 80056ac:	677b      	str	r3, [r7, #116]	; 0x74
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	00da      	lsls	r2, r3, #3
 80056b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b6:	4413      	add	r3, r2
 80056b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056bc:	673b      	str	r3, [r7, #112]	; 0x70
 80056be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c0:	2200      	movs	r2, #0
 80056c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f009 fae3 	bl	800ec96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 811a 	bne.w	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800570c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571c:	b29b      	uxth	r3, r3
 800571e:	8013      	strh	r3, [r2, #0]
 8005720:	e0f6      	b.n	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d121      	bne.n	8005770 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005776:	2b01      	cmp	r3, #1
 8005778:	f040 80ca 	bne.w	8005910 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005784:	441a      	add	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005792:	441a      	add	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d30b      	bcc.n	80057bc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057b4:	1ad2      	subs	r2, r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	621a      	str	r2, [r3, #32]
 80057ba:	e017      	b.n	80057ec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d108      	bne.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80057c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80057c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057d4:	e00a      	b.n	80057ec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	657b      	str	r3, [r7, #84]	; 0x54
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d165      	bne.n	80058c6 <HAL_PCD_EP_DB_Transmit+0x748>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005808:	b29b      	uxth	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580e:	4413      	add	r3, r2
 8005810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	00da      	lsls	r2, r3, #3
 8005818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581a:	4413      	add	r3, r2
 800581c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005820:	65bb      	str	r3, [r7, #88]	; 0x58
 8005822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005836:	2b3e      	cmp	r3, #62	; 0x3e
 8005838:	d91d      	bls.n	8005876 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800583a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	66bb      	str	r3, [r7, #104]	; 0x68
 8005842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800584e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005850:	3b01      	subs	r3, #1
 8005852:	66bb      	str	r3, [r7, #104]	; 0x68
 8005854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29a      	uxth	r2, r3
 800585a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800585c:	b29b      	uxth	r3, r3
 800585e:	029b      	lsls	r3, r3, #10
 8005860:	b29b      	uxth	r3, r3
 8005862:	4313      	orrs	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586e:	b29a      	uxth	r2, r3
 8005870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e041      	b.n	80058fa <HAL_PCD_EP_DB_Transmit+0x77c>
 8005876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <HAL_PCD_EP_DB_Transmit+0x716>
 800587e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e032      	b.n	80058fa <HAL_PCD_EP_DB_Transmit+0x77c>
 8005894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	66bb      	str	r3, [r7, #104]	; 0x68
 800589c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_PCD_EP_DB_Transmit+0x730>
 80058a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058aa:	3301      	adds	r3, #1
 80058ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4313      	orrs	r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e019      	b.n	80058fa <HAL_PCD_EP_DB_Transmit+0x77c>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d115      	bne.n	80058fa <HAL_PCD_EP_DB_Transmit+0x77c>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058dc:	4413      	add	r3, r2
 80058de:	657b      	str	r3, [r7, #84]	; 0x54
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	00da      	lsls	r2, r3, #3
 80058e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
 80058f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6959      	ldr	r1, [r3, #20]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	895a      	ldrh	r2, [r3, #10]
 8005906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800590a:	b29b      	uxth	r3, r3
 800590c:	f007 fa80 	bl	800ce10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592a:	82bb      	strh	r3, [r7, #20]
 800592c:	8abb      	ldrh	r3, [r7, #20]
 800592e:	f083 0310 	eor.w	r3, r3, #16
 8005932:	82bb      	strh	r3, [r7, #20]
 8005934:	8abb      	ldrh	r3, [r7, #20]
 8005936:	f083 0320 	eor.w	r3, r3, #32
 800593a:	82bb      	strh	r3, [r7, #20]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	441a      	add	r2, r3
 800594a:	8abb      	ldrh	r3, [r7, #20]
 800594c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595c:	b29b      	uxth	r3, r3
 800595e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3790      	adds	r7, #144	; 0x90
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	817b      	strh	r3, [r7, #10]
 8005978:	4613      	mov	r3, r2
 800597a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800597c:	897b      	ldrh	r3, [r7, #10]
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	f003 0207 	and.w	r2, r3, #7
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	3310      	adds	r3, #16
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e009      	b.n	80059b4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059a0:	897a      	ldrh	r2, [r7, #10]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059b4:	893b      	ldrh	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2200      	movs	r2, #0
 80059be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	80da      	strh	r2, [r3, #6]
 80059c8:	e00b      	b.n	80059e2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2201      	movs	r2, #1
 80059ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	0c1b      	lsrs	r3, r3, #16
 80059dc:	b29a      	uxth	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f043 0302 	orr.w	r3, r3, #2
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d141      	bne.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a52:	4b4b      	ldr	r3, [pc, #300]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5e:	d131      	bne.n	8005ac4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a60:	4b47      	ldr	r3, [pc, #284]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a66:	4a46      	ldr	r2, [pc, #280]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a70:	4b43      	ldr	r3, [pc, #268]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a78:	4a41      	ldr	r2, [pc, #260]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a80:	4b40      	ldr	r3, [pc, #256]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2232      	movs	r2, #50	; 0x32
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	0c9b      	lsrs	r3, r3, #18
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a96:	e002      	b.n	8005a9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a9e:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d102      	bne.n	8005ab2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f2      	bne.n	8005a98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ab2:	4b33      	ldr	r3, [pc, #204]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abe:	d158      	bne.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e057      	b.n	8005b74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ac4:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aca:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ad4:	e04d      	b.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005adc:	d141      	bne.n	8005b62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ade:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aea:	d131      	bne.n	8005b50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aec:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af2:	4a23      	ldr	r2, [pc, #140]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b04:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2232      	movs	r2, #50	; 0x32
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	4a1c      	ldr	r2, [pc, #112]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	0c9b      	lsrs	r3, r3, #18
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b22:	e002      	b.n	8005b2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b36:	d102      	bne.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f2      	bne.n	8005b24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4a:	d112      	bne.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e011      	b.n	8005b74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b60:	e007      	b.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40007000 	.word	0x40007000
 8005b84:	20000000 	.word	0x20000000
 8005b88:	431bde83 	.word	0x431bde83

08005b8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b9a:	6093      	str	r3, [r2, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40007000 	.word	0x40007000

08005bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e2fe      	b.n	80061bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d075      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bca:	4b97      	ldr	r3, [pc, #604]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd4:	4b94      	ldr	r3, [pc, #592]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d102      	bne.n	8005bea <HAL_RCC_OscConfig+0x3e>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d002      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x44>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d10b      	bne.n	8005c08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	4b8d      	ldr	r3, [pc, #564]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05b      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x108>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d157      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e2d9      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d106      	bne.n	8005c20 <HAL_RCC_OscConfig+0x74>
 8005c12:	4b85      	ldr	r3, [pc, #532]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a84      	ldr	r2, [pc, #528]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e01d      	b.n	8005c5c <HAL_RCC_OscConfig+0xb0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x98>
 8005c2a:	4b7f      	ldr	r3, [pc, #508]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a7e      	ldr	r2, [pc, #504]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b7c      	ldr	r3, [pc, #496]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7b      	ldr	r2, [pc, #492]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_OscConfig+0xb0>
 8005c44:	4b78      	ldr	r3, [pc, #480]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a77      	ldr	r2, [pc, #476]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b75      	ldr	r3, [pc, #468]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a74      	ldr	r2, [pc, #464]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fc fd2a 	bl	80026bc <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7fc fd26 	bl	80026bc <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e29e      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7e:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0xc0>
 8005c8a:	e014      	b.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fc fd16 	bl	80026bc <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c94:	f7fc fd12 	bl	80026bc <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	; 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e28a      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ca6:	4b60      	ldr	r3, [pc, #384]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0xe8>
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d075      	beq.n	8005dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	4b59      	ldr	r3, [pc, #356]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ccc:	4b56      	ldr	r3, [pc, #344]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d102      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x136>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d002      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x13c>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d11f      	bne.n	8005d28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_OscConfig+0x154>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e25d      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	4b49      	ldr	r3, [pc, #292]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	061b      	lsls	r3, r3, #24
 8005d0e:	4946      	ldr	r1, [pc, #280]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d14:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <HAL_RCC_OscConfig+0x280>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fc fc83 	bl	8002624 <HAL_InitTick>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d043      	beq.n	8005dac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e249      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d023      	beq.n	8005d78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a3c      	ldr	r2, [pc, #240]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fc fcbe 	bl	80026bc <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d44:	f7fc fcba 	bl	80026bc <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e232      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d56:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d62:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	492d      	ldr	r1, [pc, #180]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
 8005d76:	e01a      	b.n	8005dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d78:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a2a      	ldr	r2, [pc, #168]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d84:	f7fc fc9a 	bl	80026bc <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d8c:	f7fc fc96 	bl	80026bc <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e20e      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0x1e0>
 8005daa:	e000      	b.n	8005dae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d041      	beq.n	8005e3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01c      	beq.n	8005dfc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc2:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc8:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd2:	f7fc fc73 	bl	80026bc <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fc fc6f 	bl	80026bc <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e1e7      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ef      	beq.n	8005dda <HAL_RCC_OscConfig+0x22e>
 8005dfa:	e020      	b.n	8005e3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <HAL_RCC_OscConfig+0x27c>)
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0c:	f7fc fc56 	bl	80026bc <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e12:	e00d      	b.n	8005e30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e14:	f7fc fc52 	bl	80026bc <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d906      	bls.n	8005e30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e1ca      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e30:	4b8c      	ldr	r3, [pc, #560]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1ea      	bne.n	8005e14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80a6 	beq.w	8005f98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e50:	4b84      	ldr	r3, [pc, #528]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x2b4>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x2b6>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	4b7f      	ldr	r3, [pc, #508]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6a:	4a7e      	ldr	r2, [pc, #504]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e70:	6593      	str	r3, [r2, #88]	; 0x58
 8005e72:	4b7c      	ldr	r3, [pc, #496]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e82:	4b79      	ldr	r3, [pc, #484]	; (8006068 <HAL_RCC_OscConfig+0x4bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d118      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e8e:	4b76      	ldr	r3, [pc, #472]	; (8006068 <HAL_RCC_OscConfig+0x4bc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a75      	ldr	r2, [pc, #468]	; (8006068 <HAL_RCC_OscConfig+0x4bc>)
 8005e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e9a:	f7fc fc0f 	bl	80026bc <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea2:	f7fc fc0b 	bl	80026bc <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e183      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb4:	4b6c      	ldr	r3, [pc, #432]	; (8006068 <HAL_RCC_OscConfig+0x4bc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d108      	bne.n	8005eda <HAL_RCC_OscConfig+0x32e>
 8005ec8:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	4a65      	ldr	r2, [pc, #404]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ed8:	e024      	b.n	8005f24 <HAL_RCC_OscConfig+0x378>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d110      	bne.n	8005f04 <HAL_RCC_OscConfig+0x358>
 8005ee2:	4b60      	ldr	r3, [pc, #384]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	4a5e      	ldr	r2, [pc, #376]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005eea:	f043 0304 	orr.w	r3, r3, #4
 8005eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ef2:	4b5c      	ldr	r3, [pc, #368]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	4a5a      	ldr	r2, [pc, #360]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f02:	e00f      	b.n	8005f24 <HAL_RCC_OscConfig+0x378>
 8005f04:	4b57      	ldr	r3, [pc, #348]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	4a56      	ldr	r2, [pc, #344]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f14:	4b53      	ldr	r3, [pc, #332]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	4a52      	ldr	r2, [pc, #328]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d016      	beq.n	8005f5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2c:	f7fc fbc6 	bl	80026bc <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f34:	f7fc fbc2 	bl	80026bc <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e138      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f4a:	4b46      	ldr	r3, [pc, #280]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0ed      	beq.n	8005f34 <HAL_RCC_OscConfig+0x388>
 8005f58:	e015      	b.n	8005f86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5a:	f7fc fbaf 	bl	80026bc <HAL_GetTick>
 8005f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f60:	e00a      	b.n	8005f78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f62:	f7fc fbab 	bl	80026bc <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e121      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f78:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ed      	bne.n	8005f62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f86:	7ffb      	ldrb	r3, [r7, #31]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d105      	bne.n	8005f98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	4a34      	ldr	r2, [pc, #208]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d03c      	beq.n	800601e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01c      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb2:	4a2c      	ldr	r2, [pc, #176]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fc fb7e 	bl	80026bc <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fc4:	f7fc fb7a 	bl	80026bc <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e0f2      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fd6:	4b23      	ldr	r3, [pc, #140]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0ef      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x418>
 8005fe4:	e01b      	b.n	800601e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fe6:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fc fb61 	bl	80026bc <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ffe:	f7fc fb5d 	bl	80026bc <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e0d5      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006010:	4b14      	ldr	r3, [pc, #80]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8006012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ef      	bne.n	8005ffe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80c9 	beq.w	80061ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006028:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
 8006030:	2b0c      	cmp	r3, #12
 8006032:	f000 8083 	beq.w	800613c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d15e      	bne.n	80060fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <HAL_RCC_OscConfig+0x4b8>)
 8006044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fc fb37 	bl	80026bc <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006050:	e00c      	b.n	800606c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006052:	f7fc fb33 	bl	80026bc <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d905      	bls.n	800606c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e0ab      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800606c:	4b55      	ldr	r3, [pc, #340]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1ec      	bne.n	8006052 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006078:	4b52      	ldr	r3, [pc, #328]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	4b52      	ldr	r3, [pc, #328]	; (80061c8 <HAL_RCC_OscConfig+0x61c>)
 800607e:	4013      	ands	r3, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6a11      	ldr	r1, [r2, #32]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006088:	3a01      	subs	r2, #1
 800608a:	0112      	lsls	r2, r2, #4
 800608c:	4311      	orrs	r1, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006092:	0212      	lsls	r2, r2, #8
 8006094:	4311      	orrs	r1, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800609a:	0852      	lsrs	r2, r2, #1
 800609c:	3a01      	subs	r2, #1
 800609e:	0552      	lsls	r2, r2, #21
 80060a0:	4311      	orrs	r1, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060a6:	0852      	lsrs	r2, r2, #1
 80060a8:	3a01      	subs	r2, #1
 80060aa:	0652      	lsls	r2, r2, #25
 80060ac:	4311      	orrs	r1, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060b2:	06d2      	lsls	r2, r2, #27
 80060b4:	430a      	orrs	r2, r1
 80060b6:	4943      	ldr	r1, [pc, #268]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060bc:	4b41      	ldr	r3, [pc, #260]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a40      	ldr	r2, [pc, #256]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060c8:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4a3d      	ldr	r2, [pc, #244]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fc faf2 	bl	80026bc <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fc faee 	bl	80026bc <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e066      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ee:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x530>
 80060fa:	e05e      	b.n	80061ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fc:	4b31      	ldr	r3, [pc, #196]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 8006102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fc fad8 	bl	80026bc <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006110:	f7fc fad4 	bl	80026bc <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e04c      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800612e:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	4924      	ldr	r1, [pc, #144]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 8006134:	4b25      	ldr	r3, [pc, #148]	; (80061cc <HAL_RCC_OscConfig+0x620>)
 8006136:	4013      	ands	r3, r2
 8006138:	60cb      	str	r3, [r1, #12]
 800613a:	e03e      	b.n	80061ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e039      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006148:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <HAL_RCC_OscConfig+0x618>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 0203 	and.w	r2, r3, #3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	429a      	cmp	r2, r3
 800615a:	d12c      	bne.n	80061b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	3b01      	subs	r3, #1
 8006168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d123      	bne.n	80061b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800617a:	429a      	cmp	r2, r3
 800617c:	d11b      	bne.n	80061b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800618a:	429a      	cmp	r2, r3
 800618c:	d113      	bne.n	80061b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	3b01      	subs	r3, #1
 800619c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800619e:	429a      	cmp	r2, r3
 80061a0:	d109      	bne.n	80061b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	3b01      	subs	r3, #1
 80061b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d001      	beq.n	80061ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40021000 	.word	0x40021000
 80061c8:	019f800c 	.word	0x019f800c
 80061cc:	feeefffc 	.word	0xfeeefffc

080061d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e11e      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061e8:	4b91      	ldr	r3, [pc, #580]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d910      	bls.n	8006218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f6:	4b8e      	ldr	r3, [pc, #568]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f023 020f 	bic.w	r2, r3, #15
 80061fe:	498c      	ldr	r1, [pc, #560]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	4313      	orrs	r3, r2
 8006204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006206:	4b8a      	ldr	r3, [pc, #552]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e106      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d073      	beq.n	800630c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d129      	bne.n	8006280 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800622c:	4b81      	ldr	r3, [pc, #516]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0f4      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800623c:	f000 f99e 	bl	800657c <RCC_GetSysClockFreqFromPLLSource>
 8006240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4a7c      	ldr	r2, [pc, #496]	; (8006438 <HAL_RCC_ClockConfig+0x268>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d93f      	bls.n	80062ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800624a:	4b7a      	ldr	r3, [pc, #488]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800625e:	2b00      	cmp	r3, #0
 8006260:	d033      	beq.n	80062ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006266:	2b00      	cmp	r3, #0
 8006268:	d12f      	bne.n	80062ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800626a:	4b72      	ldr	r3, [pc, #456]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006272:	4a70      	ldr	r2, [pc, #448]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e024      	b.n	80062ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d107      	bne.n	8006298 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006288:	4b6a      	ldr	r3, [pc, #424]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0c6      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006298:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0be      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062a8:	f000 f8ce 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80062ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4a61      	ldr	r2, [pc, #388]	; (8006438 <HAL_RCC_ClockConfig+0x268>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d909      	bls.n	80062ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062b6:	4b5f      	ldr	r3, [pc, #380]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062be:	4a5d      	ldr	r2, [pc, #372]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b5a      	ldr	r3, [pc, #360]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4957      	ldr	r1, [pc, #348]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062dc:	f7fc f9ee 	bl	80026bc <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fc f9ea 	bl	80026bc <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e095      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b4e      	ldr	r3, [pc, #312]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d023      	beq.n	8006360 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006324:	4b43      	ldr	r3, [pc, #268]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a42      	ldr	r2, [pc, #264]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800632a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800632e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800633c:	4b3d      	ldr	r3, [pc, #244]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006344:	4a3b      	ldr	r2, [pc, #236]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 8006346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800634a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800634c:	4b39      	ldr	r3, [pc, #228]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4936      	ldr	r1, [pc, #216]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
 800635e:	e008      	b.n	8006372 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d105      	bne.n	8006372 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006366:	4b33      	ldr	r3, [pc, #204]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	4a32      	ldr	r2, [pc, #200]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 800636c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006370:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006372:	4b2f      	ldr	r3, [pc, #188]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d21d      	bcs.n	80063bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006380:	4b2b      	ldr	r3, [pc, #172]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f023 020f 	bic.w	r2, r3, #15
 8006388:	4929      	ldr	r1, [pc, #164]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006390:	f7fc f994 	bl	80026bc <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006396:	e00a      	b.n	80063ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006398:	f7fc f990 	bl	80026bc <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e03b      	b.n	8006426 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <HAL_RCC_ClockConfig+0x260>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1ed      	bne.n	8006398 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c8:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4917      	ldr	r1, [pc, #92]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e6:	4b13      	ldr	r3, [pc, #76]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	490f      	ldr	r1, [pc, #60]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063fa:	f000 f825 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 80063fe:	4602      	mov	r2, r0
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <HAL_RCC_ClockConfig+0x264>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	490c      	ldr	r1, [pc, #48]	; (800643c <HAL_RCC_ClockConfig+0x26c>)
 800640c:	5ccb      	ldrb	r3, [r1, r3]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	fa22 f303 	lsr.w	r3, r2, r3
 8006416:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <HAL_RCC_ClockConfig+0x270>)
 8006418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <HAL_RCC_ClockConfig+0x274>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f7fc f900 	bl	8002624 <HAL_InitTick>
 8006424:	4603      	mov	r3, r0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40022000 	.word	0x40022000
 8006434:	40021000 	.word	0x40021000
 8006438:	04c4b400 	.word	0x04c4b400
 800643c:	080124dc 	.word	0x080124dc
 8006440:	20000000 	.word	0x20000000
 8006444:	20000004 	.word	0x20000004

08006448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800644e:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	2b04      	cmp	r3, #4
 8006458:	d102      	bne.n	8006460 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800645a:	4b2a      	ldr	r3, [pc, #168]	; (8006504 <HAL_RCC_GetSysClockFreq+0xbc>)
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e047      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006460:	4b27      	ldr	r3, [pc, #156]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 030c 	and.w	r3, r3, #12
 8006468:	2b08      	cmp	r3, #8
 800646a:	d102      	bne.n	8006472 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800646c:	4b26      	ldr	r3, [pc, #152]	; (8006508 <HAL_RCC_GetSysClockFreq+0xc0>)
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e03e      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	2b0c      	cmp	r3, #12
 800647c:	d136      	bne.n	80064ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800647e:	4b20      	ldr	r3, [pc, #128]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	3301      	adds	r3, #1
 8006494:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d10c      	bne.n	80064b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800649c:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <HAL_RCC_GetSysClockFreq+0xc0>)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	4a16      	ldr	r2, [pc, #88]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064a6:	68d2      	ldr	r2, [r2, #12]
 80064a8:	0a12      	lsrs	r2, r2, #8
 80064aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	617b      	str	r3, [r7, #20]
      break;
 80064b4:	e00c      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	4a10      	ldr	r2, [pc, #64]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064c0:	68d2      	ldr	r2, [r2, #12]
 80064c2:	0a12      	lsrs	r2, r2, #8
 80064c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]
      break;
 80064ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	0e5b      	lsrs	r3, r3, #25
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	3301      	adds	r3, #1
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e001      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064f0:	693b      	ldr	r3, [r7, #16]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	00f42400 	.word	0x00f42400
 8006508:	007a1200 	.word	0x007a1200

0800650c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006510:	4b03      	ldr	r3, [pc, #12]	; (8006520 <HAL_RCC_GetHCLKFreq+0x14>)
 8006512:	681b      	ldr	r3, [r3, #0]
}
 8006514:	4618      	mov	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000000 	.word	0x20000000

08006524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006528:	f7ff fff0 	bl	800650c <HAL_RCC_GetHCLKFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4904      	ldr	r1, [pc, #16]	; (800654c <HAL_RCC_GetPCLK1Freq+0x28>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40021000 	.word	0x40021000
 800654c:	080124ec 	.word	0x080124ec

08006550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006554:	f7ff ffda 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8006558:	4602      	mov	r2, r0
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0adb      	lsrs	r3, r3, #11
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006566:	5ccb      	ldrb	r3, [r1, r3]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000
 8006578:	080124ec 	.word	0x080124ec

0800657c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006582:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d10c      	bne.n	80065ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065a0:	4a17      	ldr	r2, [pc, #92]	; (8006600 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	4a14      	ldr	r2, [pc, #80]	; (80065fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065aa:	68d2      	ldr	r2, [r2, #12]
 80065ac:	0a12      	lsrs	r2, r2, #8
 80065ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	617b      	str	r3, [r7, #20]
    break;
 80065b8:	e00c      	b.n	80065d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065ba:	4a12      	ldr	r2, [pc, #72]	; (8006604 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065c4:	68d2      	ldr	r2, [r2, #12]
 80065c6:	0a12      	lsrs	r2, r2, #8
 80065c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]
    break;
 80065d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	0e5b      	lsrs	r3, r3, #25
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	3301      	adds	r3, #1
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80065ee:	687b      	ldr	r3, [r7, #4]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40021000 	.word	0x40021000
 8006600:	007a1200 	.word	0x007a1200
 8006604:	00f42400 	.word	0x00f42400

08006608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006610:	2300      	movs	r3, #0
 8006612:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006614:	2300      	movs	r3, #0
 8006616:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8098 	beq.w	8006756 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006626:	2300      	movs	r3, #0
 8006628:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800662a:	4b43      	ldr	r3, [pc, #268]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10d      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006636:	4b40      	ldr	r3, [pc, #256]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	4a3f      	ldr	r2, [pc, #252]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800663c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006640:	6593      	str	r3, [r2, #88]	; 0x58
 8006642:	4b3d      	ldr	r3, [pc, #244]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664e:	2301      	movs	r3, #1
 8006650:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006652:	4b3a      	ldr	r3, [pc, #232]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a39      	ldr	r2, [pc, #228]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800665e:	f7fc f82d 	bl	80026bc <HAL_GetTick>
 8006662:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006664:	e009      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006666:	f7fc f829 	bl	80026bc <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d902      	bls.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	74fb      	strb	r3, [r7, #19]
        break;
 8006678:	e005      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800667a:	4b30      	ldr	r3, [pc, #192]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0ef      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006686:	7cfb      	ldrb	r3, [r7, #19]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d159      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800668c:	4b2a      	ldr	r3, [pc, #168]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01e      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d019      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066a8:	4b23      	ldr	r3, [pc, #140]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ba:	4a1f      	ldr	r2, [pc, #124]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066c4:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ca:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e6:	f7fb ffe9 	bl	80026bc <HAL_GetTick>
 80066ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ec:	e00b      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ee:	f7fb ffe5 	bl	80026bc <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d902      	bls.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	74fb      	strb	r3, [r7, #19]
            break;
 8006704:	e006      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0ec      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006714:	7cfb      	ldrb	r3, [r7, #19]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	4903      	ldr	r1, [pc, #12]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	74bb      	strb	r3, [r7, #18]
 8006736:	e005      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006738:	40021000 	.word	0x40021000
 800673c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006744:	7c7b      	ldrb	r3, [r7, #17]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d105      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674a:	4ba6      	ldr	r3, [pc, #664]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674e:	4aa5      	ldr	r2, [pc, #660]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006762:	4ba0      	ldr	r3, [pc, #640]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	f023 0203 	bic.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	499c      	ldr	r1, [pc, #624]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006784:	4b97      	ldr	r3, [pc, #604]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f023 020c 	bic.w	r2, r3, #12
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	4994      	ldr	r1, [pc, #592]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067a6:	4b8f      	ldr	r3, [pc, #572]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	498b      	ldr	r1, [pc, #556]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067c8:	4b86      	ldr	r3, [pc, #536]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	4983      	ldr	r1, [pc, #524]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067ea:	4b7e      	ldr	r3, [pc, #504]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	497a      	ldr	r1, [pc, #488]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800680c:	4b75      	ldr	r3, [pc, #468]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	4972      	ldr	r1, [pc, #456]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800682e:	4b6d      	ldr	r3, [pc, #436]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	4969      	ldr	r1, [pc, #420]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006850:	4b64      	ldr	r3, [pc, #400]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	4961      	ldr	r1, [pc, #388]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006872:	4b5c      	ldr	r3, [pc, #368]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	4958      	ldr	r1, [pc, #352]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006894:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	4950      	ldr	r1, [pc, #320]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b2:	d105      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4a4a      	ldr	r2, [pc, #296]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d015      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068cc:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	4942      	ldr	r1, [pc, #264]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ea:	d105      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ec:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d015      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006904:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4934      	ldr	r1, [pc, #208]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006922:	d105      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006924:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d015      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800693c:	4b29      	ldr	r3, [pc, #164]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	4926      	ldr	r1, [pc, #152]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800695a:	d105      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800695c:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4a20      	ldr	r2, [pc, #128]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006966:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d015      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006974:	4b1b      	ldr	r3, [pc, #108]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	4918      	ldr	r1, [pc, #96]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006992:	d105      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006994:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800699a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800699e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d015      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	490a      	ldr	r1, [pc, #40]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ca:	d105      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80069d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000

080069e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e09d      	b.n	8006b36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0a:	d009      	beq.n	8006a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
 8006a12:	e005      	b.n	8006a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fb f958 	bl	8001cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a60:	d902      	bls.n	8006a68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e002      	b.n	8006a6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a76:	d007      	beq.n	8006a88 <HAL_SPI_Init+0xa0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aca:	ea42 0103 	orr.w	r1, r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	f003 0204 	and.w	r2, r3, #4
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b04:	ea42 0103 	orr.w	r1, r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_SPI_Transmit+0x22>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e15f      	b.n	8006e20 <HAL_SPI_Transmit+0x2e2>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b68:	f7fb fda8 	bl	80026bc <HAL_GetTick>
 8006b6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d002      	beq.n	8006b84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b82:	e148      	b.n	8006e16 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_SPI_Transmit+0x52>
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b94:	e13f      	b.n	8006e16 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	88fa      	ldrh	r2, [r7, #6]
 8006bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be0:	d10f      	bne.n	8006c02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d007      	beq.n	8006c20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c28:	d94f      	bls.n	8006cca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0xfa>
 8006c32:	8afb      	ldrh	r3, [r7, #22]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d142      	bne.n	8006cbe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c5c:	e02f      	b.n	8006cbe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d112      	bne.n	8006c92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	881a      	ldrh	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	1c9a      	adds	r2, r3, #2
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c90:	e015      	b.n	8006cbe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c92:	f7fb fd13 	bl	80026bc <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d803      	bhi.n	8006caa <HAL_SPI_Transmit+0x16c>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca8:	d102      	bne.n	8006cb0 <HAL_SPI_Transmit+0x172>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006cbc:	e0ab      	b.n	8006e16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1ca      	bne.n	8006c5e <HAL_SPI_Transmit+0x120>
 8006cc8:	e080      	b.n	8006dcc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_SPI_Transmit+0x19a>
 8006cd2:	8afb      	ldrh	r3, [r7, #22]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d174      	bne.n	8006dc2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d912      	bls.n	8006d08 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	881a      	ldrh	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	1c9a      	adds	r2, r3, #2
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d06:	e05c      	b.n	8006dc2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d2e:	e048      	b.n	8006dc2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d12b      	bne.n	8006d96 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d912      	bls.n	8006d6e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	881a      	ldrh	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	1c9a      	adds	r2, r3, #2
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b02      	subs	r3, #2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d6c:	e029      	b.n	8006dc2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d94:	e015      	b.n	8006dc2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d96:	f7fb fc91 	bl	80026bc <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d803      	bhi.n	8006dae <HAL_SPI_Transmit+0x270>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dac:	d102      	bne.n	8006db4 <HAL_SPI_Transmit+0x276>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006dc0:	e029      	b.n	8006e16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1b1      	bne.n	8006d30 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fe0d 	bl	80079f0 <SPI_EndRxTxTransaction>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e003      	b.n	8006e16 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d002      	beq.n	8006e4e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e4c:	e11a      	b.n	8007084 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d112      	bne.n	8006e7e <HAL_SPI_Receive+0x56>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10e      	bne.n	8006e7e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f90e 	bl	8007096 <HAL_SPI_TransmitReceive>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	e107      	b.n	800708e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_SPI_Receive+0x64>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e100      	b.n	800708e <HAL_SPI_Receive+0x266>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e94:	f7fb fc12 	bl	80026bc <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SPI_Receive+0x7e>
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eaa:	e0eb      	b.n	8007084 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ef6:	d908      	bls.n	8006f0a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	e007      	b.n	8006f1a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f18:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d10f      	bne.n	8006f44 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d007      	beq.n	8006f62 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f6a:	d86f      	bhi.n	800704c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f6c:	e034      	b.n	8006fd8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d117      	bne.n	8006fac <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f103 020c 	add.w	r2, r3, #12
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	7812      	ldrb	r2, [r2, #0]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006faa:	e015      	b.n	8006fd8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fac:	f7fb fb86 	bl	80026bc <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d803      	bhi.n	8006fc4 <HAL_SPI_Receive+0x19c>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc2:	d102      	bne.n	8006fca <HAL_SPI_Receive+0x1a2>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006fd6:	e055      	b.n	8007084 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1c4      	bne.n	8006f6e <HAL_SPI_Receive+0x146>
 8006fe4:	e038      	b.n	8007058 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d115      	bne.n	8007020 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	b292      	uxth	r2, r2
 8007000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800701e:	e015      	b.n	800704c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007020:	f7fb fb4c 	bl	80026bc <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d803      	bhi.n	8007038 <HAL_SPI_Receive+0x210>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007036:	d102      	bne.n	800703e <HAL_SPI_Receive+0x216>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800704a:	e01b      	b.n	8007084 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1c6      	bne.n	8006fe6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fc6f 	bl	8007940 <SPI_EndRxTransaction>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
 800707a:	e003      	b.n	8007084 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b08a      	sub	sp, #40	; 0x28
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070a4:	2301      	movs	r3, #1
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_SPI_TransmitReceive+0x26>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e20a      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x43c>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c4:	f7fb fafa 	bl	80026bc <HAL_GetTick>
 80070c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070dc:	887b      	ldrh	r3, [r7, #2]
 80070de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070e0:	7efb      	ldrb	r3, [r7, #27]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d00e      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x6e>
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ec:	d106      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x66>
 80070f6:	7efb      	ldrb	r3, [r7, #27]
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d003      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070fc:	2302      	movs	r3, #2
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007102:	e1e0      	b.n	80074c6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x80>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x80>
 8007110:	887b      	ldrh	r3, [r7, #2]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800711c:	e1d3      	b.n	80074c6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b04      	cmp	r3, #4
 8007128:	d003      	beq.n	8007132 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2205      	movs	r2, #5
 800712e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	887a      	ldrh	r2, [r7, #2]
 8007142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	887a      	ldrh	r2, [r7, #2]
 800714a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	887a      	ldrh	r2, [r7, #2]
 8007158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	887a      	ldrh	r2, [r7, #2]
 800715e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007174:	d802      	bhi.n	800717c <HAL_SPI_TransmitReceive+0xe6>
 8007176:	8a3b      	ldrh	r3, [r7, #16]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d908      	bls.n	800718e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800718a:	605a      	str	r2, [r3, #4]
 800718c:	e007      	b.n	800719e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800719c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d007      	beq.n	80071bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c4:	f240 8081 	bls.w	80072ca <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_TransmitReceive+0x140>
 80071d0:	8a7b      	ldrh	r3, [r7, #18]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d16d      	bne.n	80072b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	881a      	ldrh	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071fa:	e05a      	b.n	80072b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b02      	cmp	r3, #2
 8007208:	d11b      	bne.n	8007242 <HAL_SPI_TransmitReceive+0x1ac>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d016      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x1ac>
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	2b01      	cmp	r3, #1
 8007218:	d113      	bne.n	8007242 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	881a      	ldrh	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	1c9a      	adds	r2, r3, #2
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	d11c      	bne.n	800728a <HAL_SPI_TransmitReceive+0x1f4>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	b292      	uxth	r2, r2
 8007268:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007286:	2301      	movs	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800728a:	f7fb fa17 	bl	80026bc <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007296:	429a      	cmp	r2, r3
 8007298:	d80b      	bhi.n	80072b2 <HAL_SPI_TransmitReceive+0x21c>
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072a0:	d007      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80072b0:	e109      	b.n	80074c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d19f      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x166>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d199      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x166>
 80072c8:	e0e3      	b.n	8007492 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_SPI_TransmitReceive+0x244>
 80072d2:	8a7b      	ldrh	r3, [r7, #18]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	f040 80cf 	bne.w	8007478 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d912      	bls.n	800730a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	881a      	ldrh	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	1c9a      	adds	r2, r3, #2
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b02      	subs	r3, #2
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007308:	e0b6      	b.n	8007478 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	7812      	ldrb	r2, [r2, #0]
 8007316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007330:	e0a2      	b.n	8007478 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b02      	cmp	r3, #2
 800733e:	d134      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x314>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02f      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x314>
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	2b01      	cmp	r3, #1
 800734e:	d12c      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b01      	cmp	r3, #1
 8007358:	d912      	bls.n	8007380 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	881a      	ldrh	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	1c9a      	adds	r2, r3, #2
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b02      	subs	r3, #2
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800737e:	e012      	b.n	80073a6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739c:	b29b      	uxth	r3, r3
 800739e:	3b01      	subs	r3, #1
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d148      	bne.n	800744a <HAL_SPI_TransmitReceive+0x3b4>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d042      	beq.n	800744a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d923      	bls.n	8007418 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	b292      	uxth	r2, r2
 80073dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	1c9a      	adds	r2, r3, #2
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b02      	subs	r3, #2
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d81f      	bhi.n	8007446 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	e016      	b.n	8007446 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f103 020c 	add.w	r2, r3, #12
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	7812      	ldrb	r2, [r2, #0]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007446:	2301      	movs	r3, #1
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800744a:	f7fb f937 	bl	80026bc <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007456:	429a      	cmp	r2, r3
 8007458:	d803      	bhi.n	8007462 <HAL_SPI_TransmitReceive+0x3cc>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007460:	d102      	bne.n	8007468 <HAL_SPI_TransmitReceive+0x3d2>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d107      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007476:	e026      	b.n	80074c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	f47f af57 	bne.w	8007332 <HAL_SPI_TransmitReceive+0x29c>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	f47f af50 	bne.w	8007332 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 faaa 	bl	80079f0 <SPI_EndRxTxTransaction>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2220      	movs	r2, #32
 80074ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074bc:	e003      	b.n	80074c6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10e      	bne.n	800751c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
    return;
 800751a:	e0ce      	b.n	80076ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d009      	beq.n	800753a <HAL_SPI_IRQHandler+0x5e>
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
    return;
 8007538:	e0bf      	b.n	80076ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <HAL_SPI_IRQHandler+0x7e>
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80b0 	beq.w	80076ba <HAL_SPI_IRQHandler+0x1de>
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80aa 	beq.w	80076ba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d023      	beq.n	80075b8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b03      	cmp	r3, #3
 800757a:	d011      	beq.n	80075a0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007580:	f043 0204 	orr.w	r2, r3, #4
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	e00b      	b.n	80075b8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075a0:	2300      	movs	r3, #0
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
        return;
 80075b6:	e080      	b.n	80076ba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d014      	beq.n	80075ec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c6:	f043 0201 	orr.w	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075fa:	f043 0208 	orr.w	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007614:	2b00      	cmp	r3, #0
 8007616:	d04f      	beq.n	80076b8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007626:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <HAL_SPI_IRQHandler+0x168>
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d034      	beq.n	80076ae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0203 	bic.w	r2, r2, #3
 8007652:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	2b00      	cmp	r3, #0
 800765a:	d011      	beq.n	8007680 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007660:	4a17      	ldr	r2, [pc, #92]	; (80076c0 <HAL_SPI_IRQHandler+0x1e4>)
 8007662:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007668:	4618      	mov	r0, r3
 800766a:	f7fb fa66 	bl	8002b3a <HAL_DMA_Abort_IT>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	4a0c      	ldr	r2, [pc, #48]	; (80076c0 <HAL_SPI_IRQHandler+0x1e4>)
 800768e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	4618      	mov	r0, r3
 8007696:	f7fb fa50 	bl	8002b3a <HAL_DMA_Abort_IT>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80076ac:	e003      	b.n	80076b6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f808 	bl	80076c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80076b4:	e000      	b.n	80076b8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80076b6:	bf00      	nop
    return;
 80076b8:	bf00      	nop
  }
}
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	080076d9 	.word	0x080076d9

080076c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff ffe5 	bl	80076c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007714:	f7fa ffd2 	bl	80026bc <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4413      	add	r3, r2
 8007722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007724:	f7fa ffca 	bl	80026bc <HAL_GetTick>
 8007728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800772a:	4b39      	ldr	r3, [pc, #228]	; (8007810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	015b      	lsls	r3, r3, #5
 8007730:	0d1b      	lsrs	r3, r3, #20
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	fb02 f303 	mul.w	r3, r2, r3
 8007738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800773a:	e054      	b.n	80077e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007742:	d050      	beq.n	80077e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007744:	f7fa ffba 	bl	80026bc <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	429a      	cmp	r2, r3
 8007752:	d902      	bls.n	800775a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d13d      	bne.n	80077d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007772:	d111      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777c:	d004      	beq.n	8007788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007786:	d107      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a0:	d10f      	bne.n	80077c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e017      	b.n	8007806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4013      	ands	r3, r2
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	bf0c      	ite	eq
 80077f6:	2301      	moveq	r3, #1
 80077f8:	2300      	movne	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	429a      	cmp	r2, r3
 8007802:	d19b      	bne.n	800773c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000000 	.word	0x20000000

08007814 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007826:	f7fa ff49 	bl	80026bc <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	4413      	add	r3, r2
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007836:	f7fa ff41 	bl	80026bc <HAL_GetTick>
 800783a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	330c      	adds	r3, #12
 8007842:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007844:	4b3d      	ldr	r3, [pc, #244]	; (800793c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	00da      	lsls	r2, r3, #3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	0d1b      	lsrs	r3, r3, #20
 8007854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007856:	fb02 f303 	mul.w	r3, r2, r3
 800785a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800785c:	e060      	b.n	8007920 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007864:	d107      	bne.n	8007876 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007874:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787c:	d050      	beq.n	8007920 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800787e:	f7fa ff1d 	bl	80026bc <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788a:	429a      	cmp	r2, r3
 800788c:	d902      	bls.n	8007894 <SPI_WaitFifoStateUntilTimeout+0x80>
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	d13d      	bne.n	8007910 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ac:	d111      	bne.n	80078d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b6:	d004      	beq.n	80078c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c0:	d107      	bne.n	80078d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078da:	d10f      	bne.n	80078fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e010      	b.n	8007932 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	3b01      	subs	r3, #1
 800791e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4013      	ands	r3, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d196      	bne.n	800785e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3728      	adds	r7, #40	; 0x28
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000000 	.word	0x20000000

08007940 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007954:	d111      	bne.n	800797a <SPI_EndRxTransaction+0x3a>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795e:	d004      	beq.n	800796a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007968:	d107      	bne.n	800797a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2200      	movs	r2, #0
 8007982:	2180      	movs	r1, #128	; 0x80
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff febd 	bl	8007704 <SPI_WaitFlagStateUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d007      	beq.n	80079a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007994:	f043 0220 	orr.w	r2, r3, #32
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e023      	b.n	80079e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a8:	d11d      	bne.n	80079e6 <SPI_EndRxTransaction+0xa6>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b2:	d004      	beq.n	80079be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079bc:	d113      	bne.n	80079e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f7ff ff22 	bl	8007814 <SPI_WaitFifoStateUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d007      	beq.n	80079e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079da:	f043 0220 	orr.w	r2, r3, #32
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e000      	b.n	80079e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff ff03 	bl	8007814 <SPI_WaitFifoStateUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e027      	b.n	8007a74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fe68 	bl	8007704 <SPI_WaitFlagStateUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e014      	b.n	8007a74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fedc 	bl	8007814 <SPI_WaitFifoStateUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d007      	beq.n	8007a72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a66:	f043 0220 	orr.w	r2, r3, #32
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e000      	b.n	8007a74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e049      	b.n	8007b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fa fbfe 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	f000 fea0 	bl	8008800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e049      	b.n	8007bd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f841 	bl	8007bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f000 fe49 	bl	8008800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e049      	b.n	8007c92 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f841 	bl	8007c9a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f000 fde8 	bl	8008800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <HAL_TIM_IC_Start_IT+0x1e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e023      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x66>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_IC_Start_IT+0x2e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	e01b      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x66>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_IC_Start_IT+0x3e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e013      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x66>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b0c      	cmp	r3, #12
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_IC_Start_IT+0x4e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	e00b      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x66>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_IC_Start_IT+0x5e>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	e003      	b.n	8007d16 <HAL_TIM_IC_Start_IT+0x66>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <HAL_TIM_IC_Start_IT+0x78>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e013      	b.n	8007d50 <HAL_TIM_IC_Start_IT+0xa0>
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d104      	bne.n	8007d38 <HAL_TIM_IC_Start_IT+0x88>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	e00b      	b.n	8007d50 <HAL_TIM_IC_Start_IT+0xa0>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d104      	bne.n	8007d48 <HAL_TIM_IC_Start_IT+0x98>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	e003      	b.n	8007d50 <HAL_TIM_IC_Start_IT+0xa0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d102      	bne.n	8007d5e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d58:	7b7b      	ldrb	r3, [r7, #13]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d001      	beq.n	8007d62 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e0d8      	b.n	8007f14 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d104      	bne.n	8007d72 <HAL_TIM_IC_Start_IT+0xc2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d70:	e023      	b.n	8007dba <HAL_TIM_IC_Start_IT+0x10a>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_IC_Start_IT+0xd2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d80:	e01b      	b.n	8007dba <HAL_TIM_IC_Start_IT+0x10a>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d104      	bne.n	8007d92 <HAL_TIM_IC_Start_IT+0xe2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d90:	e013      	b.n	8007dba <HAL_TIM_IC_Start_IT+0x10a>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b0c      	cmp	r3, #12
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_IC_Start_IT+0xf2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007da0:	e00b      	b.n	8007dba <HAL_TIM_IC_Start_IT+0x10a>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_IC_Start_IT+0x102>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007db0:	e003      	b.n	8007dba <HAL_TIM_IC_Start_IT+0x10a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2202      	movs	r2, #2
 8007db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_IC_Start_IT+0x11a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc8:	e013      	b.n	8007df2 <HAL_TIM_IC_Start_IT+0x142>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d104      	bne.n	8007dda <HAL_TIM_IC_Start_IT+0x12a>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dd8:	e00b      	b.n	8007df2 <HAL_TIM_IC_Start_IT+0x142>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d104      	bne.n	8007dea <HAL_TIM_IC_Start_IT+0x13a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007de8:	e003      	b.n	8007df2 <HAL_TIM_IC_Start_IT+0x142>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b0c      	cmp	r3, #12
 8007df6:	d841      	bhi.n	8007e7c <HAL_TIM_IC_Start_IT+0x1cc>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <HAL_TIM_IC_Start_IT+0x150>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e35 	.word	0x08007e35
 8007e04:	08007e7d 	.word	0x08007e7d
 8007e08:	08007e7d 	.word	0x08007e7d
 8007e0c:	08007e7d 	.word	0x08007e7d
 8007e10:	08007e47 	.word	0x08007e47
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007e7d 	.word	0x08007e7d
 8007e1c:	08007e7d 	.word	0x08007e7d
 8007e20:	08007e59 	.word	0x08007e59
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e6b 	.word	0x08007e6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0202 	orr.w	r2, r2, #2
 8007e42:	60da      	str	r2, [r3, #12]
      break;
 8007e44:	e01d      	b.n	8007e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0204 	orr.w	r2, r2, #4
 8007e54:	60da      	str	r2, [r3, #12]
      break;
 8007e56:	e014      	b.n	8007e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0208 	orr.w	r2, r2, #8
 8007e66:	60da      	str	r2, [r3, #12]
      break;
 8007e68:	e00b      	b.n	8007e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0210 	orr.w	r2, r2, #16
 8007e78:	60da      	str	r2, [r3, #12]
      break;
 8007e7a:	e002      	b.n	8007e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d144      	bne.n	8007f12 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fa01 	bl	8009298 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a20      	ldr	r2, [pc, #128]	; (8007f1c <HAL_TIM_IC_Start_IT+0x26c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d018      	beq.n	8007ed2 <HAL_TIM_IC_Start_IT+0x222>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea8:	d013      	beq.n	8007ed2 <HAL_TIM_IC_Start_IT+0x222>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1c      	ldr	r2, [pc, #112]	; (8007f20 <HAL_TIM_IC_Start_IT+0x270>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00e      	beq.n	8007ed2 <HAL_TIM_IC_Start_IT+0x222>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1a      	ldr	r2, [pc, #104]	; (8007f24 <HAL_TIM_IC_Start_IT+0x274>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <HAL_TIM_IC_Start_IT+0x222>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a19      	ldr	r2, [pc, #100]	; (8007f28 <HAL_TIM_IC_Start_IT+0x278>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_TIM_IC_Start_IT+0x222>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a17      	ldr	r2, [pc, #92]	; (8007f2c <HAL_TIM_IC_Start_IT+0x27c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d115      	bne.n	8007efe <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <HAL_TIM_IC_Start_IT+0x280>)
 8007eda:	4013      	ands	r3, r2
 8007edc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b06      	cmp	r3, #6
 8007ee2:	d015      	beq.n	8007f10 <HAL_TIM_IC_Start_IT+0x260>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eea:	d011      	beq.n	8007f10 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efc:	e008      	b.n	8007f10 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0201 	orr.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e000      	b.n	8007f12 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40012c00 	.word	0x40012c00
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	00010007 	.word	0x00010007

08007f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d020      	beq.n	8007f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01b      	beq.n	8007f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0202 	mvn.w	r2, #2
 8007f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7f9 fd08 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8007f84:	e005      	b.n	8007f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fc1c 	bl	80087c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc23 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d020      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01b      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0204 	mvn.w	r2, #4
 8007fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7f9 fce2 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8007fd0:	e005      	b.n	8007fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fbf6 	bl	80087c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fbfd 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d020      	beq.n	8008030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0208 	mvn.w	r2, #8
 8008000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2204      	movs	r2, #4
 8008006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7f9 fcbc 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 800801c:	e005      	b.n	800802a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fbd0 	bl	80087c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fbd7 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d020      	beq.n	800807c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01b      	beq.n	800807c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0210 	mvn.w	r2, #16
 800804c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2208      	movs	r2, #8
 8008052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7f9 fc96 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8008068:	e005      	b.n	8008076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fbaa 	bl	80087c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fbb1 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00c      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0201 	mvn.w	r2, #1
 8008098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb88 	bl	80087b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d104      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80080c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 f997 	bl	80093fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00c      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 f98f 	bl	8009410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00c      	beq.n	8008116 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800810e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fb6b 	bl	80087ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00c      	beq.n	800813a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f06f 0220 	mvn.w	r2, #32
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f957 	bl	80093e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f963 	bl	8009424 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800817a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 f95b 	bl	8009438 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800819e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f953 	bl	800944c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00c      	beq.n	80081ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 f94b 	bl	8009460 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b086      	sub	sp, #24
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e088      	b.n	8008302 <HAL_TIM_IC_ConfigChannel+0x130>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d11b      	bne.n	8008236 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800820e:	f000 fe89 	bl	8008f24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 020c 	bic.w	r2, r2, #12
 8008220:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6999      	ldr	r1, [r3, #24]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	619a      	str	r2, [r3, #24]
 8008234:	e060      	b.n	80082f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d11c      	bne.n	8008276 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800824c:	f000 ff01 	bl	8009052 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800825e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	021a      	lsls	r2, r3, #8
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	619a      	str	r2, [r3, #24]
 8008274:	e040      	b.n	80082f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d11b      	bne.n	80082b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800828c:	f000 ff4e 	bl	800912c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 020c 	bic.w	r2, r2, #12
 800829e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69d9      	ldr	r1, [r3, #28]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	61da      	str	r2, [r3, #28]
 80082b2:	e021      	b.n	80082f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d11c      	bne.n	80082f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80082ca:	f000 ff6b 	bl	80091a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69d9      	ldr	r1, [r3, #28]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	021a      	lsls	r2, r3, #8
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	61da      	str	r2, [r3, #28]
 80082f2:	e001      	b.n	80082f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008300:	7dfb      	ldrb	r3, [r7, #23]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008326:	2302      	movs	r3, #2
 8008328:	e0ff      	b.n	800852a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b14      	cmp	r3, #20
 8008336:	f200 80f0 	bhi.w	800851a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008395 	.word	0x08008395
 8008344:	0800851b 	.word	0x0800851b
 8008348:	0800851b 	.word	0x0800851b
 800834c:	0800851b 	.word	0x0800851b
 8008350:	080083d5 	.word	0x080083d5
 8008354:	0800851b 	.word	0x0800851b
 8008358:	0800851b 	.word	0x0800851b
 800835c:	0800851b 	.word	0x0800851b
 8008360:	08008417 	.word	0x08008417
 8008364:	0800851b 	.word	0x0800851b
 8008368:	0800851b 	.word	0x0800851b
 800836c:	0800851b 	.word	0x0800851b
 8008370:	08008457 	.word	0x08008457
 8008374:	0800851b 	.word	0x0800851b
 8008378:	0800851b 	.word	0x0800851b
 800837c:	0800851b 	.word	0x0800851b
 8008380:	08008499 	.word	0x08008499
 8008384:	0800851b 	.word	0x0800851b
 8008388:	0800851b 	.word	0x0800851b
 800838c:	0800851b 	.word	0x0800851b
 8008390:	080084d9 	.word	0x080084d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 facc 	bl	8008938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0208 	orr.w	r2, r2, #8
 80083ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6999      	ldr	r1, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	619a      	str	r2, [r3, #24]
      break;
 80083d2:	e0a5      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fb3c 	bl	8008a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	619a      	str	r2, [r3, #24]
      break;
 8008414:	e084      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fba5 	bl	8008b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0208 	orr.w	r2, r2, #8
 8008430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0204 	bic.w	r2, r2, #4
 8008440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69d9      	ldr	r1, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	61da      	str	r2, [r3, #28]
      break;
 8008454:	e064      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fc0d 	bl	8008c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69d9      	ldr	r1, [r3, #28]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	021a      	lsls	r2, r3, #8
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	61da      	str	r2, [r3, #28]
      break;
 8008496:	e043      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fc76 	bl	8008d90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0208 	orr.w	r2, r2, #8
 80084b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0204 	bic.w	r2, r2, #4
 80084c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80084d6:	e023      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fcba 	bl	8008e58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008502:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008518:	e002      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	75fb      	strb	r3, [r7, #23]
      break;
 800851e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop

08008534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_TIM_ConfigClockSource+0x1c>
 800854c:	2302      	movs	r3, #2
 800854e:	e0de      	b.n	800870e <HAL_TIM_ConfigClockSource+0x1da>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800856e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800857a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a63      	ldr	r2, [pc, #396]	; (8008718 <HAL_TIM_ConfigClockSource+0x1e4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f000 80a9 	beq.w	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008590:	4a61      	ldr	r2, [pc, #388]	; (8008718 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	f200 80ae 	bhi.w	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008598:	4a60      	ldr	r2, [pc, #384]	; (800871c <HAL_TIM_ConfigClockSource+0x1e8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	f000 80a1 	beq.w	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085a0:	4a5e      	ldr	r2, [pc, #376]	; (800871c <HAL_TIM_ConfigClockSource+0x1e8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f200 80a6 	bhi.w	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085a8:	4a5d      	ldr	r2, [pc, #372]	; (8008720 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f000 8099 	beq.w	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085b0:	4a5b      	ldr	r2, [pc, #364]	; (8008720 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f200 809e 	bhi.w	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085b8:	4a5a      	ldr	r2, [pc, #360]	; (8008724 <HAL_TIM_ConfigClockSource+0x1f0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f000 8091 	beq.w	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085c0:	4a58      	ldr	r2, [pc, #352]	; (8008724 <HAL_TIM_ConfigClockSource+0x1f0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f200 8096 	bhi.w	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085cc:	f000 8089 	beq.w	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085d4:	f200 808e 	bhi.w	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085dc:	d03e      	beq.n	800865c <HAL_TIM_ConfigClockSource+0x128>
 80085de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e2:	f200 8087 	bhi.w	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ea:	f000 8086 	beq.w	80086fa <HAL_TIM_ConfigClockSource+0x1c6>
 80085ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f2:	d87f      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085f4:	2b70      	cmp	r3, #112	; 0x70
 80085f6:	d01a      	beq.n	800862e <HAL_TIM_ConfigClockSource+0xfa>
 80085f8:	2b70      	cmp	r3, #112	; 0x70
 80085fa:	d87b      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085fc:	2b60      	cmp	r3, #96	; 0x60
 80085fe:	d050      	beq.n	80086a2 <HAL_TIM_ConfigClockSource+0x16e>
 8008600:	2b60      	cmp	r3, #96	; 0x60
 8008602:	d877      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008604:	2b50      	cmp	r3, #80	; 0x50
 8008606:	d03c      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x14e>
 8008608:	2b50      	cmp	r3, #80	; 0x50
 800860a:	d873      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d058      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x18e>
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d86f      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008614:	2b30      	cmp	r3, #48	; 0x30
 8008616:	d064      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008618:	2b30      	cmp	r3, #48	; 0x30
 800861a:	d86b      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800861c:	2b20      	cmp	r3, #32
 800861e:	d060      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d867      	bhi.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d05c      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008628:	2b10      	cmp	r3, #16
 800862a:	d05a      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x1ae>
 800862c:	e062      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800863e:	f000 fe0b 	bl	8009258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	609a      	str	r2, [r3, #8]
      break;
 800865a:	e04f      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800866c:	f000 fdf4 	bl	8009258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800867e:	609a      	str	r2, [r3, #8]
      break;
 8008680:	e03c      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800868e:	461a      	mov	r2, r3
 8008690:	f000 fcb0 	bl	8008ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2150      	movs	r1, #80	; 0x50
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fdbf 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 80086a0:	e02c      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ae:	461a      	mov	r2, r3
 80086b0:	f000 fd0c 	bl	80090cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2160      	movs	r1, #96	; 0x60
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fdaf 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 80086c0:	e01c      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 fc90 	bl	8008ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2140      	movs	r1, #64	; 0x40
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fd9f 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 80086e0:	e00c      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4619      	mov	r1, r3
 80086ec:	4610      	mov	r0, r2
 80086ee:	f000 fd96 	bl	800921e <TIM_ITRx_SetConfig>
      break;
 80086f2:	e003      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
      break;
 80086f8:	e000      	b.n	80086fc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80086fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	00100070 	.word	0x00100070
 800871c:	00100040 	.word	0x00100040
 8008720:	00100030 	.word	0x00100030
 8008724:	00100020 	.word	0x00100020

08008728 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b0c      	cmp	r3, #12
 800873a:	d831      	bhi.n	80087a0 <HAL_TIM_ReadCapturedValue+0x78>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <HAL_TIM_ReadCapturedValue+0x1c>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008779 	.word	0x08008779
 8008748:	080087a1 	.word	0x080087a1
 800874c:	080087a1 	.word	0x080087a1
 8008750:	080087a1 	.word	0x080087a1
 8008754:	08008783 	.word	0x08008783
 8008758:	080087a1 	.word	0x080087a1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087a1 	.word	0x080087a1
 8008764:	0800878d 	.word	0x0800878d
 8008768:	080087a1 	.word	0x080087a1
 800876c:	080087a1 	.word	0x080087a1
 8008770:	080087a1 	.word	0x080087a1
 8008774:	08008797 	.word	0x08008797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877e:	60fb      	str	r3, [r7, #12]

      break;
 8008780:	e00f      	b.n	80087a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	60fb      	str	r3, [r7, #12]

      break;
 800878a:	e00a      	b.n	80087a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	60fb      	str	r3, [r7, #12]

      break;
 8008794:	e005      	b.n	80087a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	60fb      	str	r3, [r7, #12]

      break;
 800879e:	e000      	b.n	80087a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80087a0:	bf00      	nop
  }

  return tmpreg;
 80087a2:	68fb      	ldr	r3, [r7, #12]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a42      	ldr	r2, [pc, #264]	; (800891c <TIM_Base_SetConfig+0x11c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a3f      	ldr	r2, [pc, #252]	; (8008920 <TIM_Base_SetConfig+0x120>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a3e      	ldr	r2, [pc, #248]	; (8008924 <TIM_Base_SetConfig+0x124>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a3d      	ldr	r2, [pc, #244]	; (8008928 <TIM_Base_SetConfig+0x128>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d108      	bne.n	800884a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a33      	ldr	r2, [pc, #204]	; (800891c <TIM_Base_SetConfig+0x11c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d01b      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008858:	d017      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a30      	ldr	r2, [pc, #192]	; (8008920 <TIM_Base_SetConfig+0x120>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2f      	ldr	r2, [pc, #188]	; (8008924 <TIM_Base_SetConfig+0x124>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00f      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a2e      	ldr	r2, [pc, #184]	; (8008928 <TIM_Base_SetConfig+0x128>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00b      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2d      	ldr	r2, [pc, #180]	; (800892c <TIM_Base_SetConfig+0x12c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2c      	ldr	r2, [pc, #176]	; (8008930 <TIM_Base_SetConfig+0x130>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2b      	ldr	r2, [pc, #172]	; (8008934 <TIM_Base_SetConfig+0x134>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d108      	bne.n	800889c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a16      	ldr	r2, [pc, #88]	; (800891c <TIM_Base_SetConfig+0x11c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00f      	beq.n	80088e8 <TIM_Base_SetConfig+0xe8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <TIM_Base_SetConfig+0x128>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00b      	beq.n	80088e8 <TIM_Base_SetConfig+0xe8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	; (800892c <TIM_Base_SetConfig+0x12c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d007      	beq.n	80088e8 <TIM_Base_SetConfig+0xe8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a15      	ldr	r2, [pc, #84]	; (8008930 <TIM_Base_SetConfig+0x130>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_Base_SetConfig+0xe8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a14      	ldr	r2, [pc, #80]	; (8008934 <TIM_Base_SetConfig+0x134>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d103      	bne.n	80088f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d105      	bne.n	800890e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f023 0201 	bic.w	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	611a      	str	r2, [r3, #16]
  }
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40012c00 	.word	0x40012c00
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40013400 	.word	0x40013400
 800892c:	40014000 	.word	0x40014000
 8008930:	40014400 	.word	0x40014400
 8008934:	40014800 	.word	0x40014800

08008938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	f023 0201 	bic.w	r2, r3, #1
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 0302 	bic.w	r3, r3, #2
 8008984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a2c      	ldr	r2, [pc, #176]	; (8008a44 <TIM_OC1_SetConfig+0x10c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00f      	beq.n	80089b8 <TIM_OC1_SetConfig+0x80>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a2b      	ldr	r2, [pc, #172]	; (8008a48 <TIM_OC1_SetConfig+0x110>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d00b      	beq.n	80089b8 <TIM_OC1_SetConfig+0x80>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a2a      	ldr	r2, [pc, #168]	; (8008a4c <TIM_OC1_SetConfig+0x114>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d007      	beq.n	80089b8 <TIM_OC1_SetConfig+0x80>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a29      	ldr	r2, [pc, #164]	; (8008a50 <TIM_OC1_SetConfig+0x118>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_OC1_SetConfig+0x80>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a28      	ldr	r2, [pc, #160]	; (8008a54 <TIM_OC1_SetConfig+0x11c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d10c      	bne.n	80089d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f023 0308 	bic.w	r3, r3, #8
 80089be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f023 0304 	bic.w	r3, r3, #4
 80089d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a1b      	ldr	r2, [pc, #108]	; (8008a44 <TIM_OC1_SetConfig+0x10c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00f      	beq.n	80089fa <TIM_OC1_SetConfig+0xc2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a1a      	ldr	r2, [pc, #104]	; (8008a48 <TIM_OC1_SetConfig+0x110>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d00b      	beq.n	80089fa <TIM_OC1_SetConfig+0xc2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a19      	ldr	r2, [pc, #100]	; (8008a4c <TIM_OC1_SetConfig+0x114>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d007      	beq.n	80089fa <TIM_OC1_SetConfig+0xc2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a18      	ldr	r2, [pc, #96]	; (8008a50 <TIM_OC1_SetConfig+0x118>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d003      	beq.n	80089fa <TIM_OC1_SetConfig+0xc2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <TIM_OC1_SetConfig+0x11c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d111      	bne.n	8008a1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	621a      	str	r2, [r3, #32]
}
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	40012c00 	.word	0x40012c00
 8008a48:	40013400 	.word	0x40013400
 8008a4c:	40014000 	.word	0x40014000
 8008a50:	40014400 	.word	0x40014400
 8008a54:	40014800 	.word	0x40014800

08008a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f023 0210 	bic.w	r2, r3, #16
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f023 0320 	bic.w	r3, r3, #32
 8008aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a28      	ldr	r2, [pc, #160]	; (8008b58 <TIM_OC2_SetConfig+0x100>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_OC2_SetConfig+0x6c>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a27      	ldr	r2, [pc, #156]	; (8008b5c <TIM_OC2_SetConfig+0x104>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d10d      	bne.n	8008ae0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	011b      	lsls	r3, r3, #4
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <TIM_OC2_SetConfig+0x100>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <TIM_OC2_SetConfig+0xb0>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a1c      	ldr	r2, [pc, #112]	; (8008b5c <TIM_OC2_SetConfig+0x104>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d00b      	beq.n	8008b08 <TIM_OC2_SetConfig+0xb0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a1b      	ldr	r2, [pc, #108]	; (8008b60 <TIM_OC2_SetConfig+0x108>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d007      	beq.n	8008b08 <TIM_OC2_SetConfig+0xb0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <TIM_OC2_SetConfig+0x10c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_OC2_SetConfig+0xb0>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a19      	ldr	r2, [pc, #100]	; (8008b68 <TIM_OC2_SetConfig+0x110>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d113      	bne.n	8008b30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	621a      	str	r2, [r3, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40013400 	.word	0x40013400
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400
 8008b68:	40014800 	.word	0x40014800

08008b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0303 	bic.w	r3, r3, #3
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a27      	ldr	r2, [pc, #156]	; (8008c68 <TIM_OC3_SetConfig+0xfc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d003      	beq.n	8008bd6 <TIM_OC3_SetConfig+0x6a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a26      	ldr	r2, [pc, #152]	; (8008c6c <TIM_OC3_SetConfig+0x100>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d10d      	bne.n	8008bf2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a1c      	ldr	r2, [pc, #112]	; (8008c68 <TIM_OC3_SetConfig+0xfc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d00f      	beq.n	8008c1a <TIM_OC3_SetConfig+0xae>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <TIM_OC3_SetConfig+0x100>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d00b      	beq.n	8008c1a <TIM_OC3_SetConfig+0xae>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a1a      	ldr	r2, [pc, #104]	; (8008c70 <TIM_OC3_SetConfig+0x104>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d007      	beq.n	8008c1a <TIM_OC3_SetConfig+0xae>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a19      	ldr	r2, [pc, #100]	; (8008c74 <TIM_OC3_SetConfig+0x108>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d003      	beq.n	8008c1a <TIM_OC3_SetConfig+0xae>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <TIM_OC3_SetConfig+0x10c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d113      	bne.n	8008c42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	621a      	str	r2, [r3, #32]
}
 8008c5c:	bf00      	nop
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	40012c00 	.word	0x40012c00
 8008c6c:	40013400 	.word	0x40013400
 8008c70:	40014000 	.word	0x40014000
 8008c74:	40014400 	.word	0x40014400
 8008c78:	40014800 	.word	0x40014800

08008c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	031b      	lsls	r3, r3, #12
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a28      	ldr	r2, [pc, #160]	; (8008d7c <TIM_OC4_SetConfig+0x100>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_OC4_SetConfig+0x6c>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a27      	ldr	r2, [pc, #156]	; (8008d80 <TIM_OC4_SetConfig+0x104>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d10d      	bne.n	8008d04 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	031b      	lsls	r3, r3, #12
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a1d      	ldr	r2, [pc, #116]	; (8008d7c <TIM_OC4_SetConfig+0x100>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00f      	beq.n	8008d2c <TIM_OC4_SetConfig+0xb0>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a1c      	ldr	r2, [pc, #112]	; (8008d80 <TIM_OC4_SetConfig+0x104>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00b      	beq.n	8008d2c <TIM_OC4_SetConfig+0xb0>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1b      	ldr	r2, [pc, #108]	; (8008d84 <TIM_OC4_SetConfig+0x108>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d007      	beq.n	8008d2c <TIM_OC4_SetConfig+0xb0>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a1a      	ldr	r2, [pc, #104]	; (8008d88 <TIM_OC4_SetConfig+0x10c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d003      	beq.n	8008d2c <TIM_OC4_SetConfig+0xb0>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <TIM_OC4_SetConfig+0x110>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d113      	bne.n	8008d54 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	019b      	lsls	r3, r3, #6
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	019b      	lsls	r3, r3, #6
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	621a      	str	r2, [r3, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	40012c00 	.word	0x40012c00
 8008d80:	40013400 	.word	0x40013400
 8008d84:	40014000 	.word	0x40014000
 8008d88:	40014400 	.word	0x40014400
 8008d8c:	40014800 	.word	0x40014800

08008d90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008dd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	041b      	lsls	r3, r3, #16
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a17      	ldr	r2, [pc, #92]	; (8008e44 <TIM_OC5_SetConfig+0xb4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00f      	beq.n	8008e0a <TIM_OC5_SetConfig+0x7a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a16      	ldr	r2, [pc, #88]	; (8008e48 <TIM_OC5_SetConfig+0xb8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00b      	beq.n	8008e0a <TIM_OC5_SetConfig+0x7a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <TIM_OC5_SetConfig+0xbc>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d007      	beq.n	8008e0a <TIM_OC5_SetConfig+0x7a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a14      	ldr	r2, [pc, #80]	; (8008e50 <TIM_OC5_SetConfig+0xc0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d003      	beq.n	8008e0a <TIM_OC5_SetConfig+0x7a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a13      	ldr	r2, [pc, #76]	; (8008e54 <TIM_OC5_SetConfig+0xc4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d109      	bne.n	8008e1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	621a      	str	r2, [r3, #32]
}
 8008e38:	bf00      	nop
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40012c00 	.word	0x40012c00
 8008e48:	40013400 	.word	0x40013400
 8008e4c:	40014000 	.word	0x40014000
 8008e50:	40014400 	.word	0x40014400
 8008e54:	40014800 	.word	0x40014800

08008e58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	051b      	lsls	r3, r3, #20
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a18      	ldr	r2, [pc, #96]	; (8008f10 <TIM_OC6_SetConfig+0xb8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00f      	beq.n	8008ed4 <TIM_OC6_SetConfig+0x7c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <TIM_OC6_SetConfig+0xbc>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <TIM_OC6_SetConfig+0x7c>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a16      	ldr	r2, [pc, #88]	; (8008f18 <TIM_OC6_SetConfig+0xc0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d007      	beq.n	8008ed4 <TIM_OC6_SetConfig+0x7c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a15      	ldr	r2, [pc, #84]	; (8008f1c <TIM_OC6_SetConfig+0xc4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC6_SetConfig+0x7c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a14      	ldr	r2, [pc, #80]	; (8008f20 <TIM_OC6_SetConfig+0xc8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d109      	bne.n	8008ee8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	029b      	lsls	r3, r3, #10
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	621a      	str	r2, [r3, #32]
}
 8008f02:	bf00      	nop
 8008f04:	371c      	adds	r7, #28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	40012c00 	.word	0x40012c00
 8008f14:	40013400 	.word	0x40013400
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	40014400 	.word	0x40014400
 8008f20:	40014800 	.word	0x40014800

08008f24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	f023 0201 	bic.w	r2, r3, #1
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4a24      	ldr	r2, [pc, #144]	; (8008fe0 <TIM_TI1_SetConfig+0xbc>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d013      	beq.n	8008f7a <TIM_TI1_SetConfig+0x56>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f58:	d00f      	beq.n	8008f7a <TIM_TI1_SetConfig+0x56>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4a21      	ldr	r2, [pc, #132]	; (8008fe4 <TIM_TI1_SetConfig+0xc0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00b      	beq.n	8008f7a <TIM_TI1_SetConfig+0x56>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a20      	ldr	r2, [pc, #128]	; (8008fe8 <TIM_TI1_SetConfig+0xc4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d007      	beq.n	8008f7a <TIM_TI1_SetConfig+0x56>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4a1f      	ldr	r2, [pc, #124]	; (8008fec <TIM_TI1_SetConfig+0xc8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_TI1_SetConfig+0x56>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4a1e      	ldr	r2, [pc, #120]	; (8008ff0 <TIM_TI1_SetConfig+0xcc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d101      	bne.n	8008f7e <TIM_TI1_SetConfig+0x5a>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <TIM_TI1_SetConfig+0x5c>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e003      	b.n	8008f9e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f043 0301 	orr.w	r3, r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f023 030a 	bic.w	r3, r3, #10
 8008fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f003 030a 	and.w	r3, r3, #10
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	621a      	str	r2, [r3, #32]
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	40012c00 	.word	0x40012c00
 8008fe4:	40000400 	.word	0x40000400
 8008fe8:	40000800 	.word	0x40000800
 8008fec:	40013400 	.word	0x40013400
 8008ff0:	40014000 	.word	0x40014000

08008ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f023 0201 	bic.w	r2, r3, #1
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800901e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4313      	orrs	r3, r2
 8009028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f023 030a 	bic.w	r3, r3, #10
 8009030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009052:	b480      	push	{r7}
 8009054:	b087      	sub	sp, #28
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	607a      	str	r2, [r7, #4]
 800905e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0210 	bic.w	r2, r3, #16
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800907e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	031b      	lsls	r3, r3, #12
 8009096:	b29b      	uxth	r3, r3
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	621a      	str	r2, [r3, #32]
}
 80090c0:	bf00      	nop
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f023 0210 	bic.w	r2, r3, #16
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	031b      	lsls	r3, r3, #12
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009108:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	621a      	str	r2, [r3, #32]
}
 8009120:	bf00      	nop
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f023 0303 	bic.w	r3, r3, #3
 8009158:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4313      	orrs	r3, r2
 8009160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009168:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	b2db      	uxtb	r3, r3
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800917c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	021b      	lsls	r3, r3, #8
 8009182:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	621a      	str	r2, [r3, #32]
}
 8009198:	bf00      	nop
 800919a:	371c      	adds	r7, #28
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	031b      	lsls	r3, r3, #12
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80091f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	031b      	lsls	r3, r3, #12
 80091fc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	f043 0307 	orr.w	r3, r3, #7
 8009244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	609a      	str	r2, [r3, #8]
}
 800924c:	bf00      	nop
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	021a      	lsls	r2, r3, #8
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	431a      	orrs	r2, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4313      	orrs	r3, r2
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	4313      	orrs	r3, r2
 8009284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	609a      	str	r2, [r3, #8]
}
 800928c:	bf00      	nop
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f003 031f 	and.w	r3, r3, #31
 80092aa:	2201      	movs	r2, #1
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1a      	ldr	r2, [r3, #32]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	43db      	mvns	r3, r3
 80092ba:	401a      	ands	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f003 031f 	and.w	r3, r3, #31
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	fa01 f303 	lsl.w	r3, r1, r3
 80092d0:	431a      	orrs	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	621a      	str	r2, [r3, #32]
}
 80092d6:	bf00      	nop
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
	...

080092e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d101      	bne.n	80092fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e065      	b.n	80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a2c      	ldr	r2, [pc, #176]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d004      	beq.n	8009330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a2b      	ldr	r2, [pc, #172]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d108      	bne.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4313      	orrs	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d018      	beq.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009372:	d013      	beq.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a18      	ldr	r2, [pc, #96]	; (80093dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d00e      	beq.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d009      	beq.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a12      	ldr	r2, [pc, #72]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d004      	beq.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d10c      	bne.n	80093b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	40012c00 	.word	0x40012c00
 80093d8:	40013400 	.word	0x40013400
 80093dc:	40000400 	.word	0x40000400
 80093e0:	40000800 	.word	0x40000800
 80093e4:	40014000 	.word	0x40014000

080093e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e042      	b.n	800950c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7f9 f821 	bl	80024e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2224      	movs	r2, #36	; 0x24
 80094a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0201 	bic.w	r2, r2, #1
 80094b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fe38 	bl	800a134 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fb69 	bl	8009b9c <UART_SetConfig>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e01b      	b.n	800950c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689a      	ldr	r2, [r3, #8]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0201 	orr.w	r2, r2, #1
 8009502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 feb7 	bl	800a278 <UART_CheckIdleState>
 800950a:	4603      	mov	r3, r0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b0ba      	sub	sp, #232	; 0xe8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800953a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800953e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009542:	4013      	ands	r3, r2
 8009544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11b      	bne.n	8009588 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d015      	beq.n	8009588 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800955c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d105      	bne.n	8009574 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800956c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d009      	beq.n	8009588 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 82e3 	beq.w	8009b44 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
      }
      return;
 8009586:	e2dd      	b.n	8009b44 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 8123 	beq.w	80097d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009592:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009596:	4b8d      	ldr	r3, [pc, #564]	; (80097cc <HAL_UART_IRQHandler+0x2b8>)
 8009598:	4013      	ands	r3, r2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800959e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095a2:	4b8b      	ldr	r3, [pc, #556]	; (80097d0 <HAL_UART_IRQHandler+0x2bc>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 8116 	beq.w	80097d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d011      	beq.n	80095dc <HAL_UART_IRQHandler+0xc8>
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2201      	movs	r2, #1
 80095ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d2:	f043 0201 	orr.w	r2, r3, #1
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d011      	beq.n	800960c <HAL_UART_IRQHandler+0xf8>
 80095e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2202      	movs	r2, #2
 80095fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009602:	f043 0204 	orr.w	r2, r3, #4
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800960c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d011      	beq.n	800963c <HAL_UART_IRQHandler+0x128>
 8009618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2204      	movs	r2, #4
 800962a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009632:	f043 0202 	orr.w	r2, r3, #2
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800963c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d017      	beq.n	8009678 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b00      	cmp	r3, #0
 8009652:	d105      	bne.n	8009660 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009654:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009658:	4b5c      	ldr	r3, [pc, #368]	; (80097cc <HAL_UART_IRQHandler+0x2b8>)
 800965a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2208      	movs	r2, #8
 8009666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966e:	f043 0208 	orr.w	r2, r3, #8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009680:	2b00      	cmp	r3, #0
 8009682:	d012      	beq.n	80096aa <HAL_UART_IRQHandler+0x196>
 8009684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00c      	beq.n	80096aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 8249 	beq.w	8009b48 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d013      	beq.n	80096ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d105      	bne.n	80096da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fe:	2b40      	cmp	r3, #64	; 0x40
 8009700:	d005      	beq.n	800970e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009706:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800970a:	2b00      	cmp	r3, #0
 800970c:	d054      	beq.n	80097b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fec9 	bl	800a4a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b40      	cmp	r3, #64	; 0x40
 8009720:	d146      	bne.n	80097b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800973c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3308      	adds	r3, #8
 800974a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800974e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800975a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1d9      	bne.n	8009722 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009774:	2b00      	cmp	r3, #0
 8009776:	d017      	beq.n	80097a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800977e:	4a15      	ldr	r2, [pc, #84]	; (80097d4 <HAL_UART_IRQHandler+0x2c0>)
 8009780:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009788:	4618      	mov	r0, r3
 800978a:	f7f9 f9d6 	bl	8002b3a <HAL_DMA_Abort_IT>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d019      	beq.n	80097c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80097a2:	4610      	mov	r0, r2
 80097a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a6:	e00f      	b.n	80097c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9e1 	bl	8009b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ae:	e00b      	b.n	80097c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f9dd 	bl	8009b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b6:	e007      	b.n	80097c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f9d9 	bl	8009b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80097c6:	e1bf      	b.n	8009b48 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c8:	bf00      	nop
    return;
 80097ca:	e1bd      	b.n	8009b48 <HAL_UART_IRQHandler+0x634>
 80097cc:	10000001 	.word	0x10000001
 80097d0:	04000120 	.word	0x04000120
 80097d4:	0800a573 	.word	0x0800a573

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	f040 8153 	bne.w	8009a88 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e6:	f003 0310 	and.w	r3, r3, #16
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 814c 	beq.w	8009a88 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8145 	beq.w	8009a88 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2210      	movs	r2, #16
 8009804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009810:	2b40      	cmp	r3, #64	; 0x40
 8009812:	f040 80bb 	bne.w	800998c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009824:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 818f 	beq.w	8009b4c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009834:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009838:	429a      	cmp	r2, r3
 800983a:	f080 8187 	bcs.w	8009b4c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009844:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 8087 	bne.w	800996a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800988a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800989e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1da      	bne.n	800985c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e1      	bne.n	80098a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800990c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e3      	bne.n	80098e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009938:	f023 0310 	bic.w	r3, r3, #16
 800993c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800994a:	65bb      	str	r3, [r7, #88]	; 0x58
 800994c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e4      	bne.n	8009928 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009964:	4618      	mov	r0, r3
 8009966:	f7f9 f88f 	bl	8002a88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800997c:	b29b      	uxth	r3, r3
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	b29b      	uxth	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f8fd 	bl	8009b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800998a:	e0df      	b.n	8009b4c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009998:	b29b      	uxth	r3, r3
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 80d1 	beq.w	8009b50 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80099ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 80cc 	beq.w	8009b50 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099da:	647b      	str	r3, [r7, #68]	; 0x44
 80099dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e4      	bne.n	80099b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	623b      	str	r3, [r7, #32]
   return(result);
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a04:	f023 0301 	bic.w	r3, r3, #1
 8009a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3308      	adds	r3, #8
 8009a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a16:	633a      	str	r2, [r7, #48]	; 0x30
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e1      	bne.n	80099ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0310 	bic.w	r3, r3, #16
 8009a52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a60:	61fb      	str	r3, [r7, #28]
 8009a62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a64:	69b9      	ldr	r1, [r7, #24]
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	e841 2300 	strex	r3, r2, [r1]
 8009a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1e4      	bne.n	8009a3e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f87f 	bl	8009b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a86:	e063      	b.n	8009b50 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00e      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x59e>
 8009a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d008      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009aa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fda2 	bl	800a5f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ab0:	e051      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d014      	beq.n	8009ae8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d03a      	beq.n	8009b54 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
    }
    return;
 8009ae6:	e035      	b.n	8009b54 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <HAL_UART_IRQHandler+0x5f4>
 8009af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fd4c 	bl	800a59e <UART_EndTransmit_IT>
    return;
 8009b06:	e026      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d009      	beq.n	8009b28 <HAL_UART_IRQHandler+0x614>
 8009b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fd7b 	bl	800a61c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b26:	e016      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d010      	beq.n	8009b56 <HAL_UART_IRQHandler+0x642>
 8009b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	da0c      	bge.n	8009b56 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fd63 	bl	800a608 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b42:	e008      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
      return;
 8009b44:	bf00      	nop
 8009b46:	e006      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
    return;
 8009b48:	bf00      	nop
 8009b4a:	e004      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
      return;
 8009b4c:	bf00      	nop
 8009b4e:	e002      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
      return;
 8009b50:	bf00      	nop
 8009b52:	e000      	b.n	8009b56 <HAL_UART_IRQHandler+0x642>
    return;
 8009b54:	bf00      	nop
  }
}
 8009b56:	37e8      	adds	r7, #232	; 0xe8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ba0:	b08c      	sub	sp, #48	; 0x30
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4bab      	ldr	r3, [pc, #684]	; (8009e78 <UART_SetConfig+0x2dc>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	6812      	ldr	r2, [r2, #0]
 8009bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4aa0      	ldr	r2, [pc, #640]	; (8009e7c <UART_SetConfig+0x2e0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d004      	beq.n	8009c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c04:	4313      	orrs	r3, r2
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009c12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	f023 010f 	bic.w	r1, r3, #15
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a91      	ldr	r2, [pc, #580]	; (8009e80 <UART_SetConfig+0x2e4>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d125      	bne.n	8009c8c <UART_SetConfig+0xf0>
 8009c40:	4b90      	ldr	r3, [pc, #576]	; (8009e84 <UART_SetConfig+0x2e8>)
 8009c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d81a      	bhi.n	8009c84 <UART_SetConfig+0xe8>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <UART_SetConfig+0xb8>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009c75 	.word	0x08009c75
 8009c5c:	08009c6d 	.word	0x08009c6d
 8009c60:	08009c7d 	.word	0x08009c7d
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c6a:	e0d6      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c72:	e0d2      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009c74:	2304      	movs	r3, #4
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c7a:	e0ce      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c82:	e0ca      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009c84:	2310      	movs	r3, #16
 8009c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c8a:	e0c6      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a7d      	ldr	r2, [pc, #500]	; (8009e88 <UART_SetConfig+0x2ec>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d138      	bne.n	8009d08 <UART_SetConfig+0x16c>
 8009c96:	4b7b      	ldr	r3, [pc, #492]	; (8009e84 <UART_SetConfig+0x2e8>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	f003 030c 	and.w	r3, r3, #12
 8009ca0:	2b0c      	cmp	r3, #12
 8009ca2:	d82d      	bhi.n	8009d00 <UART_SetConfig+0x164>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <UART_SetConfig+0x110>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009ce1 	.word	0x08009ce1
 8009cb0:	08009d01 	.word	0x08009d01
 8009cb4:	08009d01 	.word	0x08009d01
 8009cb8:	08009d01 	.word	0x08009d01
 8009cbc:	08009cf1 	.word	0x08009cf1
 8009cc0:	08009d01 	.word	0x08009d01
 8009cc4:	08009d01 	.word	0x08009d01
 8009cc8:	08009d01 	.word	0x08009d01
 8009ccc:	08009ce9 	.word	0x08009ce9
 8009cd0:	08009d01 	.word	0x08009d01
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	08009d01 	.word	0x08009d01
 8009cdc:	08009cf9 	.word	0x08009cf9
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ce6:	e098      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cee:	e094      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cf6:	e090      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cfe:	e08c      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d00:	2310      	movs	r3, #16
 8009d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d06:	e088      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a5f      	ldr	r2, [pc, #380]	; (8009e8c <UART_SetConfig+0x2f0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d125      	bne.n	8009d5e <UART_SetConfig+0x1c2>
 8009d12:	4b5c      	ldr	r3, [pc, #368]	; (8009e84 <UART_SetConfig+0x2e8>)
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d1c:	2b30      	cmp	r3, #48	; 0x30
 8009d1e:	d016      	beq.n	8009d4e <UART_SetConfig+0x1b2>
 8009d20:	2b30      	cmp	r3, #48	; 0x30
 8009d22:	d818      	bhi.n	8009d56 <UART_SetConfig+0x1ba>
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	d00a      	beq.n	8009d3e <UART_SetConfig+0x1a2>
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	d814      	bhi.n	8009d56 <UART_SetConfig+0x1ba>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <UART_SetConfig+0x19a>
 8009d30:	2b10      	cmp	r3, #16
 8009d32:	d008      	beq.n	8009d46 <UART_SetConfig+0x1aa>
 8009d34:	e00f      	b.n	8009d56 <UART_SetConfig+0x1ba>
 8009d36:	2300      	movs	r3, #0
 8009d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d3c:	e06d      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d44:	e069      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d46:	2304      	movs	r3, #4
 8009d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d4c:	e065      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d4e:	2308      	movs	r3, #8
 8009d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d54:	e061      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d56:	2310      	movs	r3, #16
 8009d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d5c:	e05d      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a4b      	ldr	r2, [pc, #300]	; (8009e90 <UART_SetConfig+0x2f4>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d125      	bne.n	8009db4 <UART_SetConfig+0x218>
 8009d68:	4b46      	ldr	r3, [pc, #280]	; (8009e84 <UART_SetConfig+0x2e8>)
 8009d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d72:	2bc0      	cmp	r3, #192	; 0xc0
 8009d74:	d016      	beq.n	8009da4 <UART_SetConfig+0x208>
 8009d76:	2bc0      	cmp	r3, #192	; 0xc0
 8009d78:	d818      	bhi.n	8009dac <UART_SetConfig+0x210>
 8009d7a:	2b80      	cmp	r3, #128	; 0x80
 8009d7c:	d00a      	beq.n	8009d94 <UART_SetConfig+0x1f8>
 8009d7e:	2b80      	cmp	r3, #128	; 0x80
 8009d80:	d814      	bhi.n	8009dac <UART_SetConfig+0x210>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <UART_SetConfig+0x1f0>
 8009d86:	2b40      	cmp	r3, #64	; 0x40
 8009d88:	d008      	beq.n	8009d9c <UART_SetConfig+0x200>
 8009d8a:	e00f      	b.n	8009dac <UART_SetConfig+0x210>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d92:	e042      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d94:	2302      	movs	r3, #2
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d9a:	e03e      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009da2:	e03a      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009daa:	e036      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db2:	e032      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a30      	ldr	r2, [pc, #192]	; (8009e7c <UART_SetConfig+0x2e0>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d12a      	bne.n	8009e14 <UART_SetConfig+0x278>
 8009dbe:	4b31      	ldr	r3, [pc, #196]	; (8009e84 <UART_SetConfig+0x2e8>)
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009dcc:	d01a      	beq.n	8009e04 <UART_SetConfig+0x268>
 8009dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009dd2:	d81b      	bhi.n	8009e0c <UART_SetConfig+0x270>
 8009dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dd8:	d00c      	beq.n	8009df4 <UART_SetConfig+0x258>
 8009dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dde:	d815      	bhi.n	8009e0c <UART_SetConfig+0x270>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <UART_SetConfig+0x250>
 8009de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009de8:	d008      	beq.n	8009dfc <UART_SetConfig+0x260>
 8009dea:	e00f      	b.n	8009e0c <UART_SetConfig+0x270>
 8009dec:	2300      	movs	r3, #0
 8009dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009df2:	e012      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009df4:	2302      	movs	r3, #2
 8009df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dfa:	e00e      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009dfc:	2304      	movs	r3, #4
 8009dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e02:	e00a      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009e04:	2308      	movs	r3, #8
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e0a:	e006      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009e0c:	2310      	movs	r3, #16
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e12:	e002      	b.n	8009e1a <UART_SetConfig+0x27e>
 8009e14:	2310      	movs	r3, #16
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a17      	ldr	r2, [pc, #92]	; (8009e7c <UART_SetConfig+0x2e0>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	f040 80a8 	bne.w	8009f76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e2a:	2b08      	cmp	r3, #8
 8009e2c:	d834      	bhi.n	8009e98 <UART_SetConfig+0x2fc>
 8009e2e:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <UART_SetConfig+0x298>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e99 	.word	0x08009e99
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e99 	.word	0x08009e99
 8009e44:	08009e67 	.word	0x08009e67
 8009e48:	08009e99 	.word	0x08009e99
 8009e4c:	08009e99 	.word	0x08009e99
 8009e50:	08009e99 	.word	0x08009e99
 8009e54:	08009e6f 	.word	0x08009e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e58:	f7fc fb64 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8009e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e5e:	e021      	b.n	8009ea4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e60:	4b0c      	ldr	r3, [pc, #48]	; (8009e94 <UART_SetConfig+0x2f8>)
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e64:	e01e      	b.n	8009ea4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e66:	f7fc faef 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8009e6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e6c:	e01a      	b.n	8009ea4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e74:	e016      	b.n	8009ea4 <UART_SetConfig+0x308>
 8009e76:	bf00      	nop
 8009e78:	cfff69f3 	.word	0xcfff69f3
 8009e7c:	40008000 	.word	0x40008000
 8009e80:	40013800 	.word	0x40013800
 8009e84:	40021000 	.word	0x40021000
 8009e88:	40004400 	.word	0x40004400
 8009e8c:	40004800 	.word	0x40004800
 8009e90:	40004c00 	.word	0x40004c00
 8009e94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ea2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 812a 	beq.w	800a100 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	4a9e      	ldr	r2, [pc, #632]	; (800a12c <UART_SetConfig+0x590>)
 8009eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ebe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	4413      	add	r3, r2
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d305      	bcc.n	8009edc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d903      	bls.n	8009ee4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ee2:	e10d      	b.n	800a100 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	60fa      	str	r2, [r7, #12]
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	4a8e      	ldr	r2, [pc, #568]	; (800a12c <UART_SetConfig+0x590>)
 8009ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	2200      	movs	r2, #0
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	607a      	str	r2, [r7, #4]
 8009efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f06:	f7f6 fec7 	bl	8000c98 <__aeabi_uldivmod>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4619      	mov	r1, r3
 8009f12:	f04f 0200 	mov.w	r2, #0
 8009f16:	f04f 0300 	mov.w	r3, #0
 8009f1a:	020b      	lsls	r3, r1, #8
 8009f1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f20:	0202      	lsls	r2, r0, #8
 8009f22:	6979      	ldr	r1, [r7, #20]
 8009f24:	6849      	ldr	r1, [r1, #4]
 8009f26:	0849      	lsrs	r1, r1, #1
 8009f28:	2000      	movs	r0, #0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	eb12 0804 	adds.w	r8, r2, r4
 8009f32:	eb43 0905 	adc.w	r9, r3, r5
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	469a      	mov	sl, r3
 8009f3e:	4693      	mov	fp, r2
 8009f40:	4652      	mov	r2, sl
 8009f42:	465b      	mov	r3, fp
 8009f44:	4640      	mov	r0, r8
 8009f46:	4649      	mov	r1, r9
 8009f48:	f7f6 fea6 	bl	8000c98 <__aeabi_uldivmod>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4613      	mov	r3, r2
 8009f52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f5a:	d308      	bcc.n	8009f6e <UART_SetConfig+0x3d2>
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f62:	d204      	bcs.n	8009f6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6a3a      	ldr	r2, [r7, #32]
 8009f6a:	60da      	str	r2, [r3, #12]
 8009f6c:	e0c8      	b.n	800a100 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009f74:	e0c4      	b.n	800a100 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f7e:	d167      	bne.n	800a050 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009f80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d828      	bhi.n	8009fda <UART_SetConfig+0x43e>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <UART_SetConfig+0x3f4>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fb5 	.word	0x08009fb5
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fc5 	.word	0x08009fc5
 8009f9c:	08009fdb 	.word	0x08009fdb
 8009fa0:	08009fcb 	.word	0x08009fcb
 8009fa4:	08009fdb 	.word	0x08009fdb
 8009fa8:	08009fdb 	.word	0x08009fdb
 8009fac:	08009fdb 	.word	0x08009fdb
 8009fb0:	08009fd3 	.word	0x08009fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb4:	f7fc fab6 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8009fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fba:	e014      	b.n	8009fe6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fbc:	f7fc fac8 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 8009fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fc2:	e010      	b.n	8009fe6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fc4:	4b5a      	ldr	r3, [pc, #360]	; (800a130 <UART_SetConfig+0x594>)
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fc8:	e00d      	b.n	8009fe6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fca:	f7fc fa3d 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 8009fce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fd0:	e009      	b.n	8009fe6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fd8:	e005      	b.n	8009fe6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8089 	beq.w	800a100 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	4a4e      	ldr	r2, [pc, #312]	; (800a12c <UART_SetConfig+0x590>)
 8009ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a000:	005a      	lsls	r2, r3, #1
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	085b      	lsrs	r3, r3, #1
 800a008:	441a      	add	r2, r3
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a012:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	2b0f      	cmp	r3, #15
 800a018:	d916      	bls.n	800a048 <UART_SetConfig+0x4ac>
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a020:	d212      	bcs.n	800a048 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	b29b      	uxth	r3, r3
 800a026:	f023 030f 	bic.w	r3, r3, #15
 800a02a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	b29b      	uxth	r3, r3
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	b29a      	uxth	r2, r3
 800a038:	8bfb      	ldrh	r3, [r7, #30]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	8bfa      	ldrh	r2, [r7, #30]
 800a044:	60da      	str	r2, [r3, #12]
 800a046:	e05b      	b.n	800a100 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a04e:	e057      	b.n	800a100 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a054:	2b08      	cmp	r3, #8
 800a056:	d828      	bhi.n	800a0aa <UART_SetConfig+0x50e>
 800a058:	a201      	add	r2, pc, #4	; (adr r2, 800a060 <UART_SetConfig+0x4c4>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a08d 	.word	0x0800a08d
 800a068:	0800a095 	.word	0x0800a095
 800a06c:	0800a0ab 	.word	0x0800a0ab
 800a070:	0800a09b 	.word	0x0800a09b
 800a074:	0800a0ab 	.word	0x0800a0ab
 800a078:	0800a0ab 	.word	0x0800a0ab
 800a07c:	0800a0ab 	.word	0x0800a0ab
 800a080:	0800a0a3 	.word	0x0800a0a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a084:	f7fc fa4e 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 800a088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a08a:	e014      	b.n	800a0b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a08c:	f7fc fa60 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 800a090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a092:	e010      	b.n	800a0b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a094:	4b26      	ldr	r3, [pc, #152]	; (800a130 <UART_SetConfig+0x594>)
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a098:	e00d      	b.n	800a0b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a09a:	f7fc f9d5 	bl	8006448 <HAL_RCC_GetSysClockFreq>
 800a09e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0a0:	e009      	b.n	800a0b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0a8:	e005      	b.n	800a0b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0b4:	bf00      	nop
    }

    if (pclk != 0U)
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d021      	beq.n	800a100 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	4a1a      	ldr	r2, [pc, #104]	; (800a12c <UART_SetConfig+0x590>)
 800a0c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	441a      	add	r2, r3
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d909      	bls.n	800a0fa <UART_SetConfig+0x55e>
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ec:	d205      	bcs.n	800a0fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	60da      	str	r2, [r3, #12]
 800a0f8:	e002      	b.n	800a100 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2201      	movs	r2, #1
 800a104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2200      	movs	r2, #0
 800a114:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2200      	movs	r2, #0
 800a11a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a11c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a120:	4618      	mov	r0, r3
 800a122:	3730      	adds	r7, #48	; 0x30
 800a124:	46bd      	mov	sp, r7
 800a126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a12a:	bf00      	nop
 800a12c:	080124f4 	.word	0x080124f4
 800a130:	00f42400 	.word	0x00f42400

0800a134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	f003 0308 	and.w	r3, r3, #8
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01a      	beq.n	800a24a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a232:	d10a      	bne.n	800a24a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	605a      	str	r2, [r3, #4]
  }
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b098      	sub	sp, #96	; 0x60
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a288:	f7f8 fa18 	bl	80026bc <HAL_GetTick>
 800a28c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d12f      	bne.n	800a2fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a29c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f88e 	bl	800a3cc <UART_WaitOnFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d022      	beq.n	800a2fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a2d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e063      	b.n	800a3c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	2b04      	cmp	r3, #4
 800a308:	d149      	bne.n	800a39e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a30a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a312:	2200      	movs	r2, #0
 800a314:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f857 	bl	800a3cc <UART_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d03c      	beq.n	800a39e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	623b      	str	r3, [r7, #32]
   return(result);
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a342:	633b      	str	r3, [r7, #48]	; 0x30
 800a344:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e6      	bne.n	800a324 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3308      	adds	r3, #8
 800a35c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	60fb      	str	r3, [r7, #12]
   return(result);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a376:	61fa      	str	r2, [r7, #28]
 800a378:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	69b9      	ldr	r1, [r7, #24]
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	617b      	str	r3, [r7, #20]
   return(result);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e5      	bne.n	800a356 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e012      	b.n	800a3c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3758      	adds	r7, #88	; 0x58
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3dc:	e04f      	b.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e4:	d04b      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e6:	f7f8 f969 	bl	80026bc <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d302      	bcc.n	800a3fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e04e      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d037      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b80      	cmp	r3, #128	; 0x80
 800a412:	d034      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d031      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f003 0308 	and.w	r3, r3, #8
 800a424:	2b08      	cmp	r3, #8
 800a426:	d110      	bne.n	800a44a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2208      	movs	r2, #8
 800a42e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f838 	bl	800a4a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2208      	movs	r2, #8
 800a43a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e029      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a458:	d111      	bne.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a462:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 f81e 	bl	800a4a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2220      	movs	r2, #32
 800a46e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e00f      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4013      	ands	r3, r2
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	bf0c      	ite	eq
 800a48e:	2301      	moveq	r3, #1
 800a490:	2300      	movne	r3, #0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	461a      	mov	r2, r3
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d0a0      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b095      	sub	sp, #84	; 0x54
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b6:	e853 3f00 	ldrex	r3, [r3]
 800a4ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4d4:	e841 2300 	strex	r3, r2, [r1]
 800a4d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1e6      	bne.n	800a4ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4f6:	f023 0301 	bic.w	r3, r3, #1
 800a4fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3308      	adds	r3, #8
 800a502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a504:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a50c:	e841 2300 	strex	r3, r2, [r1]
 800a510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e3      	bne.n	800a4e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d118      	bne.n	800a552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	e853 3f00 	ldrex	r3, [r3]
 800a52c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f023 0310 	bic.w	r3, r3, #16
 800a534:	647b      	str	r3, [r7, #68]	; 0x44
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53e:	61bb      	str	r3, [r7, #24]
 800a540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6979      	ldr	r1, [r7, #20]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	613b      	str	r3, [r7, #16]
   return(result);
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e6      	bne.n	800a520 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2220      	movs	r2, #32
 800a556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a566:	bf00      	nop
 800a568:	3754      	adds	r7, #84	; 0x54
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff faed 	bl	8009b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b088      	sub	sp, #32
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	61bb      	str	r3, [r7, #24]
 800a5c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c8:	6979      	ldr	r1, [r7, #20]
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	e841 2300 	strex	r3, r2, [r1]
 800a5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e6      	bne.n	800a5a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fab8 	bl	8009b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ec:	bf00      	nop
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d101      	bne.n	800a646 <HAL_UARTEx_DisableFifoMode+0x16>
 800a642:	2302      	movs	r3, #2
 800a644:	e027      	b.n	800a696 <HAL_UARTEx_DisableFifoMode+0x66>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2224      	movs	r2, #36	; 0x24
 800a652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0201 	bic.w	r2, r2, #1
 800a66c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	e02d      	b.n	800a716 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2224      	movs	r2, #36	; 0x24
 800a6c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f022 0201 	bic.w	r2, r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f850 	bl	800a79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d101      	bne.n	800a736 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a732:	2302      	movs	r3, #2
 800a734:	e02d      	b.n	800a792 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2224      	movs	r2, #36	; 0x24
 800a742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f022 0201 	bic.w	r2, r2, #1
 800a75c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f812 	bl	800a79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2220      	movs	r2, #32
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
	...

0800a79c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d108      	bne.n	800a7be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7bc:	e031      	b.n	800a822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7be:	2308      	movs	r3, #8
 800a7c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	0e5b      	lsrs	r3, r3, #25
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f003 0307 	and.w	r3, r3, #7
 800a7d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	0f5b      	lsrs	r3, r3, #29
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	7b3a      	ldrb	r2, [r7, #12]
 800a7ea:	4911      	ldr	r1, [pc, #68]	; (800a830 <UARTEx_SetNbDataToProcess+0x94>)
 800a7ec:	5c8a      	ldrb	r2, [r1, r2]
 800a7ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7f2:	7b3a      	ldrb	r2, [r7, #12]
 800a7f4:	490f      	ldr	r1, [pc, #60]	; (800a834 <UARTEx_SetNbDataToProcess+0x98>)
 800a7f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	7b7a      	ldrb	r2, [r7, #13]
 800a808:	4909      	ldr	r1, [pc, #36]	; (800a830 <UARTEx_SetNbDataToProcess+0x94>)
 800a80a:	5c8a      	ldrb	r2, [r1, r2]
 800a80c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a810:	7b7a      	ldrb	r2, [r7, #13]
 800a812:	4908      	ldr	r1, [pc, #32]	; (800a834 <UARTEx_SetNbDataToProcess+0x98>)
 800a814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a816:	fb93 f3f2 	sdiv	r3, r3, r2
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a822:	bf00      	nop
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	0801250c 	.word	0x0801250c
 800a834:	08012514 	.word	0x08012514

0800a838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a848:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a84c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	b29a      	uxth	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a866:	b480      	push	{r7}
 800a868:	b085      	sub	sp, #20
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a86e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a872:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	43db      	mvns	r3, r3
 800a882:	b29b      	uxth	r3, r3
 800a884:	4013      	ands	r3, r2
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	1d3b      	adds	r3, r7, #4
 800a8a6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b09d      	sub	sp, #116	; 0x74
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	78db      	ldrb	r3, [r3, #3]
 800a906:	2b03      	cmp	r3, #3
 800a908:	d81f      	bhi.n	800a94a <USB_ActivateEndpoint+0x72>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <USB_ActivateEndpoint+0x38>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a921 	.word	0x0800a921
 800a914:	0800a93d 	.word	0x0800a93d
 800a918:	0800a953 	.word	0x0800a953
 800a91c:	0800a92f 	.word	0x0800a92f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a920:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a928:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a92c:	e012      	b.n	800a954 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a92e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a932:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a936:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a93a:	e00b      	b.n	800a954 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a93c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a944:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a948:	e004      	b.n	800a954 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a950:	e000      	b.n	800a954 <USB_ActivateEndpoint+0x7c>
      break;
 800a952:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	441a      	add	r2, r3
 800a95e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a96a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a972:	b29b      	uxth	r3, r3
 800a974:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	b21b      	sxth	r3, r3
 800a986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a98e:	b21a      	sxth	r2, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b21b      	sxth	r3, r3
 800a996:	4313      	orrs	r3, r2
 800a998:	b21b      	sxth	r3, r3
 800a99a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	441a      	add	r2, r3
 800a9a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	7b1b      	ldrb	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 8178 	bne.w	800acba <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 8084 	beq.w	800aadc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	61bb      	str	r3, [r7, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	61bb      	str	r3, [r7, #24]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	00da      	lsls	r2, r3, #3
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	88db      	ldrh	r3, [r3, #6]
 800a9fc:	085b      	lsrs	r3, r3, #1
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	827b      	strh	r3, [r7, #18]
 800aa16:	8a7b      	ldrh	r3, [r7, #18]
 800aa18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01b      	beq.n	800aa58 <USB_ActivateEndpoint+0x180>
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa36:	823b      	strh	r3, [r7, #16]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	441a      	add	r2, r3
 800aa42:	8a3b      	ldrh	r3, [r7, #16]
 800aa44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	78db      	ldrb	r3, [r3, #3]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d020      	beq.n	800aaa2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa76:	81bb      	strh	r3, [r7, #12]
 800aa78:	89bb      	ldrh	r3, [r7, #12]
 800aa7a:	f083 0320 	eor.w	r3, r3, #32
 800aa7e:	81bb      	strh	r3, [r7, #12]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	441a      	add	r2, r3
 800aa8a:	89bb      	ldrh	r3, [r7, #12]
 800aa8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	8013      	strh	r3, [r2, #0]
 800aaa0:	e2d5      	b.n	800b04e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aab8:	81fb      	strh	r3, [r7, #14]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	441a      	add	r2, r3
 800aac4:	89fb      	ldrh	r3, [r7, #14]
 800aac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	8013      	strh	r3, [r2, #0]
 800aada:	e2b8      	b.n	800b04e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	633b      	str	r3, [r7, #48]	; 0x30
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	4413      	add	r3, r2
 800aaee:	633b      	str	r3, [r7, #48]	; 0x30
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	00da      	lsls	r2, r3, #3
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	4413      	add	r3, r2
 800aafa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aafe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	88db      	ldrh	r3, [r3, #6]
 800ab04:	085b      	lsrs	r3, r3, #1
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	4413      	add	r3, r2
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	00da      	lsls	r2, r3, #3
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	801a      	strh	r2, [r3, #0]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	2b3e      	cmp	r3, #62	; 0x3e
 800ab4a:	d91d      	bls.n	800ab88 <USB_ActivateEndpoint+0x2b0>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	f003 031f 	and.w	r3, r3, #31
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <USB_ActivateEndpoint+0x28e>
 800ab60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab62:	3b01      	subs	r3, #1
 800ab64:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	029b      	lsls	r3, r3, #10
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	4313      	orrs	r3, r2
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	801a      	strh	r2, [r3, #0]
 800ab86:	e026      	b.n	800abd6 <USB_ActivateEndpoint+0x2fe>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <USB_ActivateEndpoint+0x2ce>
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	801a      	strh	r2, [r3, #0]
 800aba4:	e017      	b.n	800abd6 <USB_ActivateEndpoint+0x2fe>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	66bb      	str	r3, [r7, #104]	; 0x68
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <USB_ActivateEndpoint+0x2e8>
 800abba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abbc:	3301      	adds	r3, #1
 800abbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abc8:	b29b      	uxth	r3, r3
 800abca:	029b      	lsls	r3, r3, #10
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4313      	orrs	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	847b      	strh	r3, [r7, #34]	; 0x22
 800abe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d01b      	beq.n	800ac26 <USB_ActivateEndpoint+0x34e>
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac04:	843b      	strh	r3, [r7, #32]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	441a      	add	r2, r3
 800ac10:	8c3b      	ldrh	r3, [r7, #32]
 800ac12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d124      	bne.n	800ac78 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac44:	83bb      	strh	r3, [r7, #28]
 800ac46:	8bbb      	ldrh	r3, [r7, #28]
 800ac48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac4c:	83bb      	strh	r3, [r7, #28]
 800ac4e:	8bbb      	ldrh	r3, [r7, #28]
 800ac50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac54:	83bb      	strh	r3, [r7, #28]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	441a      	add	r2, r3
 800ac60:	8bbb      	ldrh	r3, [r7, #28]
 800ac62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	8013      	strh	r3, [r2, #0]
 800ac76:	e1ea      	b.n	800b04e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8e:	83fb      	strh	r3, [r7, #30]
 800ac90:	8bfb      	ldrh	r3, [r7, #30]
 800ac92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac96:	83fb      	strh	r3, [r7, #30]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	441a      	add	r2, r3
 800aca2:	8bfb      	ldrh	r3, [r7, #30]
 800aca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	8013      	strh	r3, [r2, #0]
 800acb8:	e1c9      	b.n	800b04e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	78db      	ldrb	r3, [r3, #3]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d11e      	bne.n	800ad00 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	441a      	add	r2, r3
 800ace6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800acea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	8013      	strh	r3, [r2, #0]
 800acfe:	e01d      	b.n	800ad3c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	441a      	add	r2, r3
 800ad24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad4c:	4413      	add	r3, r2
 800ad4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	00da      	lsls	r2, r3, #3
 800ad56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	891b      	ldrh	r3, [r3, #8]
 800ad64:	085b      	lsrs	r3, r3, #1
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad6e:	801a      	strh	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	657b      	str	r3, [r7, #84]	; 0x54
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad80:	4413      	add	r3, r2
 800ad82:	657b      	str	r3, [r7, #84]	; 0x54
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	00da      	lsls	r2, r3, #3
 800ad8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad92:	653b      	str	r3, [r7, #80]	; 0x50
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	895b      	ldrh	r3, [r3, #10]
 800ad98:	085b      	lsrs	r3, r3, #1
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	785b      	ldrb	r3, [r3, #1]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f040 8093 	bne.w	800aed4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800adbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d01b      	beq.n	800ae02 <USB_ActivateEndpoint+0x52a>
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800addc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	441a      	add	r2, r3
 800adec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d01b      	beq.n	800ae52 <USB_ActivateEndpoint+0x57a>
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae30:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	441a      	add	r2, r3
 800ae3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae68:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae70:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae78:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	441a      	add	r2, r3
 800ae84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	441a      	add	r2, r3
 800aebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aece:	b29b      	uxth	r3, r3
 800aed0:	8013      	strh	r3, [r2, #0]
 800aed2:	e0bc      	b.n	800b04e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aee4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01d      	beq.n	800af2c <USB_ActivateEndpoint+0x654>
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	441a      	add	r2, r3
 800af14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af28:	b29b      	uxth	r3, r3
 800af2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01d      	beq.n	800af84 <USB_ActivateEndpoint+0x6ac>
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	441a      	add	r2, r3
 800af6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800af70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af80:	b29b      	uxth	r3, r3
 800af82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	78db      	ldrb	r3, [r3, #3]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d024      	beq.n	800afd6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afa6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800afaa:	f083 0320 	eor.w	r3, r3, #32
 800afae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	441a      	add	r2, r3
 800afbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800afc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	8013      	strh	r3, [r2, #0]
 800afd4:	e01d      	b.n	800b012 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	441a      	add	r2, r3
 800affa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800affe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b00e:	b29b      	uxth	r3, r3
 800b010:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b028:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	441a      	add	r2, r3
 800b036:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b04e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b052:	4618      	mov	r0, r3
 800b054:	3774      	adds	r7, #116	; 0x74
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop

0800b060 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b060:	b480      	push	{r7}
 800b062:	b08d      	sub	sp, #52	; 0x34
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	7b1b      	ldrb	r3, [r3, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f040 808e 	bne.w	800b190 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	785b      	ldrb	r3, [r3, #1]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d044      	beq.n	800b106 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	81bb      	strh	r3, [r7, #12]
 800b08a:	89bb      	ldrh	r3, [r7, #12]
 800b08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b090:	2b00      	cmp	r3, #0
 800b092:	d01b      	beq.n	800b0cc <USB_DeactivateEndpoint+0x6c>
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0aa:	817b      	strh	r3, [r7, #10]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	441a      	add	r2, r3
 800b0b6:	897b      	ldrh	r3, [r7, #10]
 800b0b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e2:	813b      	strh	r3, [r7, #8]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	441a      	add	r2, r3
 800b0ee:	893b      	ldrh	r3, [r7, #8]
 800b0f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b100:	b29b      	uxth	r3, r3
 800b102:	8013      	strh	r3, [r2, #0]
 800b104:	e192      	b.n	800b42c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	827b      	strh	r3, [r7, #18]
 800b114:	8a7b      	ldrh	r3, [r7, #18]
 800b116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d01b      	beq.n	800b156 <USB_DeactivateEndpoint+0xf6>
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b134:	823b      	strh	r3, [r7, #16]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	441a      	add	r2, r3
 800b140:	8a3b      	ldrh	r3, [r7, #16]
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16c:	81fb      	strh	r3, [r7, #14]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	441a      	add	r2, r3
 800b178:	89fb      	ldrh	r3, [r7, #14]
 800b17a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b17e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	8013      	strh	r3, [r2, #0]
 800b18e:	e14d      	b.n	800b42c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f040 80a5 	bne.w	800b2e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	843b      	strh	r3, [r7, #32]
 800b1a8:	8c3b      	ldrh	r3, [r7, #32]
 800b1aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01b      	beq.n	800b1ea <USB_DeactivateEndpoint+0x18a>
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c8:	83fb      	strh	r3, [r7, #30]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	441a      	add	r2, r3
 800b1d4:	8bfb      	ldrh	r3, [r7, #30]
 800b1d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	83bb      	strh	r3, [r7, #28]
 800b1f8:	8bbb      	ldrh	r3, [r7, #28]
 800b1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01b      	beq.n	800b23a <USB_DeactivateEndpoint+0x1da>
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b218:	837b      	strh	r3, [r7, #26]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	441a      	add	r2, r3
 800b224:	8b7b      	ldrh	r3, [r7, #26]
 800b226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b22a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b236:	b29b      	uxth	r3, r3
 800b238:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	b29b      	uxth	r3, r3
 800b248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b24c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b250:	833b      	strh	r3, [r7, #24]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	441a      	add	r2, r3
 800b25c:	8b3b      	ldrh	r3, [r7, #24]
 800b25e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b26a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b26e:	b29b      	uxth	r3, r3
 800b270:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b288:	82fb      	strh	r3, [r7, #22]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	441a      	add	r2, r3
 800b294:	8afb      	ldrh	r3, [r7, #22]
 800b296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b29a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2c0:	82bb      	strh	r3, [r7, #20]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	441a      	add	r2, r3
 800b2cc:	8abb      	ldrh	r3, [r7, #20]
 800b2ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	8013      	strh	r3, [r2, #0]
 800b2e2:	e0a3      	b.n	800b42c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b2f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01b      	beq.n	800b334 <USB_DeactivateEndpoint+0x2d4>
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b312:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	441a      	add	r2, r3
 800b31e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b330:	b29b      	uxth	r3, r3
 800b332:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b342:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01b      	beq.n	800b384 <USB_DeactivateEndpoint+0x324>
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	b29b      	uxth	r3, r3
 800b35a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b362:	853b      	strh	r3, [r7, #40]	; 0x28
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	441a      	add	r2, r3
 800b36e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b37c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b380:	b29b      	uxth	r3, r3
 800b382:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	b29b      	uxth	r3, r3
 800b392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	441a      	add	r2, r3
 800b3a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	441a      	add	r2, r3
 800b3de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	b29b      	uxth	r3, r3
 800b402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	441a      	add	r2, r3
 800b416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b41c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b428:	b29b      	uxth	r3, r3
 800b42a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3734      	adds	r7, #52	; 0x34
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b0c2      	sub	sp, #264	; 0x108
 800b43e:	af00      	add	r7, sp, #0
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b448:	6018      	str	r0, [r3, #0]
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	2b01      	cmp	r3, #1
 800b462:	f040 86b7 	bne.w	800c1d4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d908      	bls.n	800b494 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b492:	e007      	b.n	800b4a4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	7b1b      	ldrb	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d13a      	bne.n	800b52a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6959      	ldr	r1, [r3, #20]
 800b4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	88da      	ldrh	r2, [r3, #6]
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b4d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4da:	6800      	ldr	r0, [r0, #0]
 800b4dc:	f001 fc98 	bl	800ce10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	4413      	add	r3, r2
 800b502:	613b      	str	r3, [r7, #16]
 800b504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	00da      	lsls	r2, r3, #3
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	4413      	add	r3, r2
 800b516:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b520:	b29a      	uxth	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	801a      	strh	r2, [r3, #0]
 800b526:	f000 be1f 	b.w	800c168 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	78db      	ldrb	r3, [r3, #3]
 800b536:	2b02      	cmp	r3, #2
 800b538:	f040 8462 	bne.w	800be00 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6a1a      	ldr	r2, [r3, #32]
 800b548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	429a      	cmp	r2, r3
 800b556:	f240 83df 	bls.w	800bd18 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	b29b      	uxth	r3, r3
 800b578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b57c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b580:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	441a      	add	r2, r3
 800b59e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6a1a      	ldr	r2, [r3, #32]
 800b5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c6:	1ad2      	subs	r2, r2, r3
 800b5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 81c7 	beq.w	800b98a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	633b      	str	r3, [r7, #48]	; 0x30
 800b608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d177      	bne.n	800b708 <USB_EPStartXfer+0x2ce>
 800b618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	62bb      	str	r3, [r7, #40]	; 0x28
 800b624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b632:	b29b      	uxth	r3, r3
 800b634:	461a      	mov	r2, r3
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	4413      	add	r3, r2
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	00da      	lsls	r2, r3, #3
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	4413      	add	r3, r2
 800b64e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b65e:	b29a      	uxth	r2, r3
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	801a      	strh	r2, [r3, #0]
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	2b3e      	cmp	r3, #62	; 0x3e
 800b66a:	d921      	bls.n	800b6b0 <USB_EPStartXfer+0x276>
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	095b      	lsrs	r3, r3, #5
 800b672:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	f003 031f 	and.w	r3, r3, #31
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d104      	bne.n	800b68c <USB_EPStartXfer+0x252>
 800b682:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b686:	3b01      	subs	r3, #1
 800b688:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	b29a      	uxth	r2, r3
 800b692:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b696:	b29b      	uxth	r3, r3
 800b698:	029b      	lsls	r3, r3, #10
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	4313      	orrs	r3, r2
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	801a      	strh	r2, [r3, #0]
 800b6ae:	e050      	b.n	800b752 <USB_EPStartXfer+0x318>
 800b6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <USB_EPStartXfer+0x294>
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	e041      	b.n	800b752 <USB_EPStartXfer+0x318>
 800b6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d2:	085b      	lsrs	r3, r3, #1
 800b6d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <USB_EPStartXfer+0x2b4>
 800b6e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	029b      	lsls	r3, r3, #10
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	4313      	orrs	r3, r2
 800b700:	b29a      	uxth	r2, r3
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	801a      	strh	r2, [r3, #0]
 800b706:	e024      	b.n	800b752 <USB_EPStartXfer+0x318>
 800b708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	785b      	ldrb	r3, [r3, #1]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d11c      	bne.n	800b752 <USB_EPStartXfer+0x318>
 800b718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b726:	b29b      	uxth	r3, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	4413      	add	r3, r2
 800b72e:	633b      	str	r3, [r7, #48]	; 0x30
 800b730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	00da      	lsls	r2, r3, #3
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	4413      	add	r3, r2
 800b742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b750:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	895b      	ldrh	r3, [r3, #10]
 800b75e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6959      	ldr	r1, [r3, #20]
 800b76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b772:	b29b      	uxth	r3, r3
 800b774:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b778:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b77c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b780:	6800      	ldr	r0, [r0, #0]
 800b782:	f001 fb45 	bl	800ce10 <USB_WritePMA>
            ep->xfer_buff += len;
 800b786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	695a      	ldr	r2, [r3, #20]
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b796:	441a      	add	r2, r3
 800b798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	6a1a      	ldr	r2, [r3, #32]
 800b7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d90f      	bls.n	800b7e0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6a1a      	ldr	r2, [r3, #32]
 800b7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d0:	1ad2      	subs	r2, r2, r3
 800b7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	621a      	str	r2, [r3, #32]
 800b7de:	e00e      	b.n	800b7fe <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	785b      	ldrb	r3, [r3, #1]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d177      	bne.n	800b8fe <USB_EPStartXfer+0x4c4>
 800b80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	61bb      	str	r3, [r7, #24]
 800b81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b828:	b29b      	uxth	r3, r3
 800b82a:	461a      	mov	r2, r3
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	4413      	add	r3, r2
 800b830:	61bb      	str	r3, [r7, #24]
 800b832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	00da      	lsls	r2, r3, #3
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	4413      	add	r3, r2
 800b844:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b854:	b29a      	uxth	r2, r3
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	801a      	strh	r2, [r3, #0]
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85e:	2b3e      	cmp	r3, #62	; 0x3e
 800b860:	d921      	bls.n	800b8a6 <USB_EPStartXfer+0x46c>
 800b862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b866:	095b      	lsrs	r3, r3, #5
 800b868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b870:	f003 031f 	and.w	r3, r3, #31
 800b874:	2b00      	cmp	r3, #0
 800b876:	d104      	bne.n	800b882 <USB_EPStartXfer+0x448>
 800b878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b87c:	3b01      	subs	r3, #1
 800b87e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	b29a      	uxth	r2, r3
 800b888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	029b      	lsls	r3, r3, #10
 800b890:	b29b      	uxth	r3, r3
 800b892:	4313      	orrs	r3, r2
 800b894:	b29b      	uxth	r3, r3
 800b896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b89a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	801a      	strh	r2, [r3, #0]
 800b8a4:	e056      	b.n	800b954 <USB_EPStartXfer+0x51a>
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10a      	bne.n	800b8c4 <USB_EPStartXfer+0x48a>
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	801a      	strh	r2, [r3, #0]
 800b8c2:	e047      	b.n	800b954 <USB_EPStartXfer+0x51a>
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c8:	085b      	lsrs	r3, r3, #1
 800b8ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d004      	beq.n	800b8e4 <USB_EPStartXfer+0x4aa>
 800b8da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8de:	3301      	adds	r3, #1
 800b8e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	029b      	lsls	r3, r3, #10
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	801a      	strh	r2, [r3, #0]
 800b8fc:	e02a      	b.n	800b954 <USB_EPStartXfer+0x51a>
 800b8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	785b      	ldrb	r3, [r3, #1]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d122      	bne.n	800b954 <USB_EPStartXfer+0x51a>
 800b90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	623b      	str	r3, [r7, #32]
 800b91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b928:	b29b      	uxth	r3, r3
 800b92a:	461a      	mov	r2, r3
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	4413      	add	r3, r2
 800b930:	623b      	str	r3, [r7, #32]
 800b932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	00da      	lsls	r2, r3, #3
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	4413      	add	r3, r2
 800b944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b948:	61fb      	str	r3, [r7, #28]
 800b94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94e:	b29a      	uxth	r2, r3
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	891b      	ldrh	r3, [r3, #8]
 800b960:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	6959      	ldr	r1, [r3, #20]
 800b970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b974:	b29b      	uxth	r3, r3
 800b976:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b97a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b97e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b982:	6800      	ldr	r0, [r0, #0]
 800b984:	f001 fa44 	bl	800ce10 <USB_WritePMA>
 800b988:	e3ee      	b.n	800c168 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d177      	bne.n	800ba8a <USB_EPStartXfer+0x650>
 800b99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ba:	4413      	add	r3, r2
 800b9bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	00da      	lsls	r2, r3, #3
 800b9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e4:	801a      	strh	r2, [r3, #0]
 800b9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ea:	2b3e      	cmp	r3, #62	; 0x3e
 800b9ec:	d921      	bls.n	800ba32 <USB_EPStartXfer+0x5f8>
 800b9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f2:	095b      	lsrs	r3, r3, #5
 800b9f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9fc:	f003 031f 	and.w	r3, r3, #31
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <USB_EPStartXfer+0x5d4>
 800ba04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	029b      	lsls	r3, r3, #10
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba2e:	801a      	strh	r2, [r3, #0]
 800ba30:	e056      	b.n	800bae0 <USB_EPStartXfer+0x6a6>
 800ba32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <USB_EPStartXfer+0x616>
 800ba3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba4c:	801a      	strh	r2, [r3, #0]
 800ba4e:	e047      	b.n	800bae0 <USB_EPStartXfer+0x6a6>
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	085b      	lsrs	r3, r3, #1
 800ba56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d004      	beq.n	800ba70 <USB_EPStartXfer+0x636>
 800ba66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	029b      	lsls	r3, r3, #10
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	4313      	orrs	r3, r2
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba86:	801a      	strh	r2, [r3, #0]
 800ba88:	e02a      	b.n	800bae0 <USB_EPStartXfer+0x6a6>
 800ba8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	785b      	ldrb	r3, [r3, #1]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d122      	bne.n	800bae0 <USB_EPStartXfer+0x6a6>
 800ba9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	653b      	str	r3, [r7, #80]	; 0x50
 800baa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	461a      	mov	r2, r3
 800bab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baba:	4413      	add	r3, r2
 800babc:	653b      	str	r3, [r7, #80]	; 0x50
 800babe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	00da      	lsls	r2, r3, #3
 800bacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bace:	4413      	add	r3, r2
 800bad0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bada:	b29a      	uxth	r2, r3
 800badc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bade:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	891b      	ldrh	r3, [r3, #8]
 800baec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800baf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6959      	ldr	r1, [r3, #20]
 800bafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb0e:	6800      	ldr	r0, [r0, #0]
 800bb10:	f001 f97e 	bl	800ce10 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	695a      	ldr	r2, [r3, #20]
 800bb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb24:	441a      	add	r2, r3
 800bb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	6a1a      	ldr	r2, [r3, #32]
 800bb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d90f      	bls.n	800bb6e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6a1a      	ldr	r2, [r3, #32]
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5e:	1ad2      	subs	r2, r2, r3
 800bb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	621a      	str	r2, [r3, #32]
 800bb6c:	e00e      	b.n	800bb8c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bb6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bb7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	643b      	str	r3, [r7, #64]	; 0x40
 800bb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	785b      	ldrb	r3, [r3, #1]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d177      	bne.n	800bc98 <USB_EPStartXfer+0x85e>
 800bba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	4413      	add	r3, r2
 800bbca:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	00da      	lsls	r2, r3, #3
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	4413      	add	r3, r2
 800bbde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	801a      	strh	r2, [r3, #0]
 800bbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf8:	2b3e      	cmp	r3, #62	; 0x3e
 800bbfa:	d921      	bls.n	800bc40 <USB_EPStartXfer+0x806>
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc00:	095b      	lsrs	r3, r3, #5
 800bc02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc0a:	f003 031f 	and.w	r3, r3, #31
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d104      	bne.n	800bc1c <USB_EPStartXfer+0x7e2>
 800bc12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc16:	3b01      	subs	r3, #1
 800bc18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	029b      	lsls	r3, r3, #10
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3c:	801a      	strh	r2, [r3, #0]
 800bc3e:	e050      	b.n	800bce2 <USB_EPStartXfer+0x8a8>
 800bc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10a      	bne.n	800bc5e <USB_EPStartXfer+0x824>
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5a:	801a      	strh	r2, [r3, #0]
 800bc5c:	e041      	b.n	800bce2 <USB_EPStartXfer+0x8a8>
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc62:	085b      	lsrs	r3, r3, #1
 800bc64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d004      	beq.n	800bc7e <USB_EPStartXfer+0x844>
 800bc74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc78:	3301      	adds	r3, #1
 800bc7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	029b      	lsls	r3, r3, #10
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc94:	801a      	strh	r2, [r3, #0]
 800bc96:	e024      	b.n	800bce2 <USB_EPStartXfer+0x8a8>
 800bc98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d11c      	bne.n	800bce2 <USB_EPStartXfer+0x8a8>
 800bca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	461a      	mov	r2, r3
 800bcba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcbc:	4413      	add	r3, r2
 800bcbe:	643b      	str	r3, [r7, #64]	; 0x40
 800bcc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	00da      	lsls	r2, r3, #3
 800bcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	895b      	ldrh	r3, [r3, #10]
 800bcee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6959      	ldr	r1, [r3, #20]
 800bcfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd10:	6800      	ldr	r0, [r0, #0]
 800bd12:	f001 f87d 	bl	800ce10 <USB_WritePMA>
 800bd16:	e227      	b.n	800c168 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bd18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd4e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bd52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	441a      	add	r2, r3
 800bd6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bd70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda4:	4413      	add	r3, r2
 800bda6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	00da      	lsls	r2, r3, #3
 800bdb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdb8:	4413      	add	r3, r2
 800bdba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bdbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	891b      	ldrh	r3, [r3, #8]
 800bdd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6959      	ldr	r1, [r3, #20]
 800bde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bdf0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bdf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bdf8:	6800      	ldr	r0, [r0, #0]
 800bdfa:	f001 f809 	bl	800ce10 <USB_WritePMA>
 800bdfe:	e1b3      	b.n	800c168 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800be00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6a1a      	ldr	r2, [r3, #32]
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be10:	1ad2      	subs	r2, r2, r3
 800be12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80c6 	beq.w	800bfd2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	673b      	str	r3, [r7, #112]	; 0x70
 800be52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d177      	bne.n	800bf52 <USB_EPStartXfer+0xb18>
 800be62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800be6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	461a      	mov	r2, r3
 800be80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be82:	4413      	add	r3, r2
 800be84:	66bb      	str	r3, [r7, #104]	; 0x68
 800be86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	00da      	lsls	r2, r3, #3
 800be94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be96:	4413      	add	r3, r2
 800be98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be9c:	667b      	str	r3, [r7, #100]	; 0x64
 800be9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beac:	801a      	strh	r2, [r3, #0]
 800beae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb2:	2b3e      	cmp	r3, #62	; 0x3e
 800beb4:	d921      	bls.n	800befa <USB_EPStartXfer+0xac0>
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beba:	095b      	lsrs	r3, r3, #5
 800bebc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec4:	f003 031f 	and.w	r3, r3, #31
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d104      	bne.n	800bed6 <USB_EPStartXfer+0xa9c>
 800becc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bed0:	3b01      	subs	r3, #1
 800bed2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	b29a      	uxth	r2, r3
 800bedc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	029b      	lsls	r3, r3, #10
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4313      	orrs	r3, r2
 800bee8:	b29b      	uxth	r3, r3
 800beea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bef6:	801a      	strh	r2, [r3, #0]
 800bef8:	e050      	b.n	800bf9c <USB_EPStartXfer+0xb62>
 800befa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10a      	bne.n	800bf18 <USB_EPStartXfer+0xade>
 800bf02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf14:	801a      	strh	r2, [r3, #0]
 800bf16:	e041      	b.n	800bf9c <USB_EPStartXfer+0xb62>
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf1c:	085b      	lsrs	r3, r3, #1
 800bf1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d004      	beq.n	800bf38 <USB_EPStartXfer+0xafe>
 800bf2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf32:	3301      	adds	r3, #1
 800bf34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	029b      	lsls	r3, r3, #10
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf4e:	801a      	strh	r2, [r3, #0]
 800bf50:	e024      	b.n	800bf9c <USB_EPStartXfer+0xb62>
 800bf52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	785b      	ldrb	r3, [r3, #1]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d11c      	bne.n	800bf9c <USB_EPStartXfer+0xb62>
 800bf62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	461a      	mov	r2, r3
 800bf74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf76:	4413      	add	r3, r2
 800bf78:	673b      	str	r3, [r7, #112]	; 0x70
 800bf7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	00da      	lsls	r2, r3, #3
 800bf88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bf9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	895b      	ldrh	r3, [r3, #10]
 800bfa8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6959      	ldr	r1, [r3, #20]
 800bfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bfc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bfc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	f000 ff20 	bl	800ce10 <USB_WritePMA>
 800bfd0:	e0ca      	b.n	800c168 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bfd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	785b      	ldrb	r3, [r3, #1]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d177      	bne.n	800c0d2 <USB_EPStartXfer+0xc98>
 800bfe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c002:	4413      	add	r3, r2
 800c004:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	00da      	lsls	r2, r3, #3
 800c014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c016:	4413      	add	r3, r2
 800c018:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c01c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	b29b      	uxth	r3, r3
 800c024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c028:	b29a      	uxth	r2, r3
 800c02a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c02c:	801a      	strh	r2, [r3, #0]
 800c02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c032:	2b3e      	cmp	r3, #62	; 0x3e
 800c034:	d921      	bls.n	800c07a <USB_EPStartXfer+0xc40>
 800c036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c03a:	095b      	lsrs	r3, r3, #5
 800c03c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c044:	f003 031f 	and.w	r3, r3, #31
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d104      	bne.n	800c056 <USB_EPStartXfer+0xc1c>
 800c04c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c050:	3b01      	subs	r3, #1
 800c052:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c060:	b29b      	uxth	r3, r3
 800c062:	029b      	lsls	r3, r3, #10
 800c064:	b29b      	uxth	r3, r3
 800c066:	4313      	orrs	r3, r2
 800c068:	b29b      	uxth	r3, r3
 800c06a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c06e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c072:	b29a      	uxth	r2, r3
 800c074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c076:	801a      	strh	r2, [r3, #0]
 800c078:	e05c      	b.n	800c134 <USB_EPStartXfer+0xcfa>
 800c07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10a      	bne.n	800c098 <USB_EPStartXfer+0xc5e>
 800c082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	b29b      	uxth	r3, r3
 800c088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c08c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c090:	b29a      	uxth	r2, r3
 800c092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c094:	801a      	strh	r2, [r3, #0]
 800c096:	e04d      	b.n	800c134 <USB_EPStartXfer+0xcfa>
 800c098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c09c:	085b      	lsrs	r3, r3, #1
 800c09e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d004      	beq.n	800c0b8 <USB_EPStartXfer+0xc7e>
 800c0ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ba:	881b      	ldrh	r3, [r3, #0]
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	029b      	lsls	r3, r3, #10
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ce:	801a      	strh	r2, [r3, #0]
 800c0d0:	e030      	b.n	800c134 <USB_EPStartXfer+0xcfa>
 800c0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d128      	bne.n	800c134 <USB_EPStartXfer+0xcfa>
 800c0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	461a      	mov	r2, r3
 800c102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c106:	4413      	add	r3, r2
 800c108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	00da      	lsls	r2, r3, #3
 800c11a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c11e:	4413      	add	r3, r2
 800c120:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c132:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	891b      	ldrh	r3, [r3, #8]
 800c140:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6959      	ldr	r1, [r3, #20]
 800c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c154:	b29b      	uxth	r3, r3
 800c156:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c15a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c15e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c162:	6800      	ldr	r0, [r0, #0]
 800c164:	f000 fe54 	bl	800ce10 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c16c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	b29b      	uxth	r3, r3
 800c186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c18e:	817b      	strh	r3, [r7, #10]
 800c190:	897b      	ldrh	r3, [r7, #10]
 800c192:	f083 0310 	eor.w	r3, r3, #16
 800c196:	817b      	strh	r3, [r7, #10]
 800c198:	897b      	ldrh	r3, [r7, #10]
 800c19a:	f083 0320 	eor.w	r3, r3, #32
 800c19e:	817b      	strh	r3, [r7, #10]
 800c1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	441a      	add	r2, r3
 800c1ba:	897b      	ldrh	r3, [r7, #10]
 800c1bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	8013      	strh	r3, [r2, #0]
 800c1d0:	f000 bcde 	b.w	800cb90 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	7b1b      	ldrb	r3, [r3, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f040 80bb 	bne.w	800c35c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d917      	bls.n	800c232 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	699a      	ldr	r2, [r3, #24]
 800c21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c222:	1ad2      	subs	r2, r2, r3
 800c224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	619a      	str	r2, [r3, #24]
 800c230:	e00e      	b.n	800c250 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2200      	movs	r2, #0
 800c24e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	461a      	mov	r2, r3
 800c270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c274:	4413      	add	r3, r2
 800c276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	00da      	lsls	r2, r3, #3
 800c288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c28c:	4413      	add	r3, r2
 800c28e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2a8:	801a      	strh	r2, [r3, #0]
 800c2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ae:	2b3e      	cmp	r3, #62	; 0x3e
 800c2b0:	d924      	bls.n	800c2fc <USB_EPStartXfer+0xec2>
 800c2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c0:	f003 031f 	and.w	r3, r3, #31
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <USB_EPStartXfer+0xe98>
 800c2c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	029b      	lsls	r3, r3, #10
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2f6:	801a      	strh	r2, [r3, #0]
 800c2f8:	f000 bc10 	b.w	800cb1c <USB_EPStartXfer+0x16e2>
 800c2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10c      	bne.n	800c31e <USB_EPStartXfer+0xee4>
 800c304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c314:	b29a      	uxth	r2, r3
 800c316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c31a:	801a      	strh	r2, [r3, #0]
 800c31c:	e3fe      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c322:	085b      	lsrs	r3, r3, #1
 800c324:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c32c:	f003 0301 	and.w	r3, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d004      	beq.n	800c33e <USB_EPStartXfer+0xf04>
 800c334:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c338:	3301      	adds	r3, #1
 800c33a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c33e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	b29a      	uxth	r2, r3
 800c346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	029b      	lsls	r3, r3, #10
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c358:	801a      	strh	r2, [r3, #0]
 800c35a:	e3df      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	78db      	ldrb	r3, [r3, #3]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	f040 8218 	bne.w	800c79e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	785b      	ldrb	r3, [r3, #1]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f040 809d 	bne.w	800c4ba <USB_EPStartXfer+0x1080>
 800c380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	00da      	lsls	r2, r3, #3
 800c3b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3bc:	4413      	add	r3, r2
 800c3be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3d8:	801a      	strh	r2, [r3, #0]
 800c3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	2b3e      	cmp	r3, #62	; 0x3e
 800c3e8:	d92b      	bls.n	800c442 <USB_EPStartXfer+0x1008>
 800c3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	095b      	lsrs	r3, r3, #5
 800c3f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	f003 031f 	and.w	r3, r3, #31
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d104      	bne.n	800c41a <USB_EPStartXfer+0xfe0>
 800c410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c414:	3b01      	subs	r3, #1
 800c416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c41a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b29a      	uxth	r2, r3
 800c422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c426:	b29b      	uxth	r3, r3
 800c428:	029b      	lsls	r3, r3, #10
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4313      	orrs	r3, r2
 800c42e:	b29b      	uxth	r3, r3
 800c430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c438:	b29a      	uxth	r2, r3
 800c43a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c43e:	801a      	strh	r2, [r3, #0]
 800c440:	e070      	b.n	800c524 <USB_EPStartXfer+0x10ea>
 800c442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10c      	bne.n	800c46c <USB_EPStartXfer+0x1032>
 800c452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c45e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c462:	b29a      	uxth	r2, r3
 800c464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c468:	801a      	strh	r2, [r3, #0]
 800c46a:	e05b      	b.n	800c524 <USB_EPStartXfer+0x10ea>
 800c46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	085b      	lsrs	r3, r3, #1
 800c47a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d004      	beq.n	800c49c <USB_EPStartXfer+0x1062>
 800c492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c496:	3301      	adds	r3, #1
 800c498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c49c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	029b      	lsls	r3, r3, #10
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4b6:	801a      	strh	r2, [r3, #0]
 800c4b8:	e034      	b.n	800c524 <USB_EPStartXfer+0x10ea>
 800c4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	785b      	ldrb	r3, [r3, #1]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d12c      	bne.n	800c524 <USB_EPStartXfer+0x10ea>
 800c4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	00da      	lsls	r2, r3, #3
 800c502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c506:	4413      	add	r3, r2
 800c508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c50c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c522:	801a      	strh	r2, [r3, #0]
 800c524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	785b      	ldrb	r3, [r3, #1]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f040 809d 	bne.w	800c67e <USB_EPStartXfer+0x1244>
 800c544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c560:	b29b      	uxth	r3, r3
 800c562:	461a      	mov	r2, r3
 800c564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c568:	4413      	add	r3, r2
 800c56a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	00da      	lsls	r2, r3, #3
 800c57c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c580:	4413      	add	r3, r2
 800c582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c586:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c58a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	b29b      	uxth	r3, r3
 800c592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c596:	b29a      	uxth	r2, r3
 800c598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c59c:	801a      	strh	r2, [r3, #0]
 800c59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	2b3e      	cmp	r3, #62	; 0x3e
 800c5ac:	d92b      	bls.n	800c606 <USB_EPStartXfer+0x11cc>
 800c5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	095b      	lsrs	r3, r3, #5
 800c5bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	f003 031f 	and.w	r3, r3, #31
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d104      	bne.n	800c5de <USB_EPStartXfer+0x11a4>
 800c5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	029b      	lsls	r3, r3, #10
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c602:	801a      	strh	r2, [r3, #0]
 800c604:	e069      	b.n	800c6da <USB_EPStartXfer+0x12a0>
 800c606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10c      	bne.n	800c630 <USB_EPStartXfer+0x11f6>
 800c616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c61a:	881b      	ldrh	r3, [r3, #0]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c626:	b29a      	uxth	r2, r3
 800c628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c62c:	801a      	strh	r2, [r3, #0]
 800c62e:	e054      	b.n	800c6da <USB_EPStartXfer+0x12a0>
 800c630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	085b      	lsrs	r3, r3, #1
 800c63e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d004      	beq.n	800c660 <USB_EPStartXfer+0x1226>
 800c656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c65a:	3301      	adds	r3, #1
 800c65c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	b29a      	uxth	r2, r3
 800c668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	029b      	lsls	r3, r3, #10
 800c670:	b29b      	uxth	r3, r3
 800c672:	4313      	orrs	r3, r2
 800c674:	b29a      	uxth	r2, r3
 800c676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c67a:	801a      	strh	r2, [r3, #0]
 800c67c:	e02d      	b.n	800c6da <USB_EPStartXfer+0x12a0>
 800c67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	785b      	ldrb	r3, [r3, #1]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d125      	bne.n	800c6da <USB_EPStartXfer+0x12a0>
 800c68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	00da      	lsls	r2, r3, #3
 800c6b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6bc:	4413      	add	r3, r2
 800c6be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6d8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	69db      	ldr	r3, [r3, #28]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 8218 	beq.w	800cb1c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c70c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <USB_EPStartXfer+0x12ea>
 800c718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10d      	bne.n	800c740 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c724:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f040 81f5 	bne.w	800cb1c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c732:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f040 81ee 	bne.w	800cb1c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c744:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c766:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c76e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	441a      	add	r2, r3
 800c784:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c78c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c798:	b29b      	uxth	r3, r3
 800c79a:	8013      	strh	r3, [r2, #0]
 800c79c:	e1be      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	78db      	ldrb	r3, [r3, #3]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	f040 81b4 	bne.w	800cb18 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	699a      	ldr	r2, [r3, #24]
 800c7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d917      	bls.n	800c7fc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	699a      	ldr	r2, [r3, #24]
 800c7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ec:	1ad2      	subs	r2, r2, r3
 800c7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	619a      	str	r2, [r3, #24]
 800c7fa:	e00e      	b.n	800c81a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2200      	movs	r2, #0
 800c818:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	785b      	ldrb	r3, [r3, #1]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f040 8085 	bne.w	800c936 <USB_EPStartXfer+0x14fc>
 800c82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c848:	b29b      	uxth	r3, r3
 800c84a:	461a      	mov	r2, r3
 800c84c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c850:	4413      	add	r3, r2
 800c852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	00da      	lsls	r2, r3, #3
 800c864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c868:	4413      	add	r3, r2
 800c86a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c86e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c87e:	b29a      	uxth	r2, r3
 800c880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c884:	801a      	strh	r2, [r3, #0]
 800c886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88a:	2b3e      	cmp	r3, #62	; 0x3e
 800c88c:	d923      	bls.n	800c8d6 <USB_EPStartXfer+0x149c>
 800c88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c892:	095b      	lsrs	r3, r3, #5
 800c894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c89c:	f003 031f 	and.w	r3, r3, #31
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d104      	bne.n	800c8ae <USB_EPStartXfer+0x1474>
 800c8a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	029b      	lsls	r3, r3, #10
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8d2:	801a      	strh	r2, [r3, #0]
 800c8d4:	e060      	b.n	800c998 <USB_EPStartXfer+0x155e>
 800c8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10c      	bne.n	800c8f8 <USB_EPStartXfer+0x14be>
 800c8de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8f4:	801a      	strh	r2, [r3, #0]
 800c8f6:	e04f      	b.n	800c998 <USB_EPStartXfer+0x155e>
 800c8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8fc:	085b      	lsrs	r3, r3, #1
 800c8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d004      	beq.n	800c918 <USB_EPStartXfer+0x14de>
 800c90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c912:	3301      	adds	r3, #1
 800c914:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29a      	uxth	r2, r3
 800c920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c924:	b29b      	uxth	r3, r3
 800c926:	029b      	lsls	r3, r3, #10
 800c928:	b29b      	uxth	r3, r3
 800c92a:	4313      	orrs	r3, r2
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c932:	801a      	strh	r2, [r3, #0]
 800c934:	e030      	b.n	800c998 <USB_EPStartXfer+0x155e>
 800c936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c93a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d128      	bne.n	800c998 <USB_EPStartXfer+0x155e>
 800c946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c94a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c962:	b29b      	uxth	r3, r3
 800c964:	461a      	mov	r2, r3
 800c966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c96a:	4413      	add	r3, r2
 800c96c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	00da      	lsls	r2, r3, #3
 800c97e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c982:	4413      	add	r3, r2
 800c984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c990:	b29a      	uxth	r2, r3
 800c992:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c996:	801a      	strh	r2, [r3, #0]
 800c998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f040 8085 	bne.w	800cac2 <USB_EPStartXfer+0x1688>
 800c9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c9dc:	4413      	add	r3, r2
 800c9de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	00da      	lsls	r2, r3, #3
 800c9f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c9f4:	4413      	add	r3, r2
 800c9f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca02:	881b      	ldrh	r3, [r3, #0]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca10:	801a      	strh	r2, [r3, #0]
 800ca12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca16:	2b3e      	cmp	r3, #62	; 0x3e
 800ca18:	d923      	bls.n	800ca62 <USB_EPStartXfer+0x1628>
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1e:	095b      	lsrs	r3, r3, #5
 800ca20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca28:	f003 031f 	and.w	r3, r3, #31
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d104      	bne.n	800ca3a <USB_EPStartXfer+0x1600>
 800ca30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca34:	3b01      	subs	r3, #1
 800ca36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	029b      	lsls	r3, r3, #10
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca5e:	801a      	strh	r2, [r3, #0]
 800ca60:	e05c      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
 800ca62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10c      	bne.n	800ca84 <USB_EPStartXfer+0x164a>
 800ca6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca80:	801a      	strh	r2, [r3, #0]
 800ca82:	e04b      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
 800ca84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca88:	085b      	lsrs	r3, r3, #1
 800ca8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d004      	beq.n	800caa4 <USB_EPStartXfer+0x166a>
 800ca9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca9e:	3301      	adds	r3, #1
 800caa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800caa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	b29a      	uxth	r2, r3
 800caac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	029b      	lsls	r3, r3, #10
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4313      	orrs	r3, r2
 800cab8:	b29a      	uxth	r2, r3
 800caba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cabe:	801a      	strh	r2, [r3, #0]
 800cac0:	e02c      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
 800cac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	785b      	ldrb	r3, [r3, #1]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d124      	bne.n	800cb1c <USB_EPStartXfer+0x16e2>
 800cad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cae8:	4413      	add	r3, r2
 800caea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800caee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	00da      	lsls	r2, r3, #3
 800cafc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb00:	4413      	add	r3, r2
 800cb02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb14:	801a      	strh	r2, [r3, #0]
 800cb16:	e001      	b.n	800cb1c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e03a      	b.n	800cb92 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb42:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	441a      	add	r2, r3
 800cb78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	785b      	ldrb	r3, [r3, #1]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d020      	beq.n	800cbf0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbc4:	81bb      	strh	r3, [r7, #12]
 800cbc6:	89bb      	ldrh	r3, [r7, #12]
 800cbc8:	f083 0310 	eor.w	r3, r3, #16
 800cbcc:	81bb      	strh	r3, [r7, #12]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	441a      	add	r2, r3
 800cbd8:	89bb      	ldrh	r3, [r7, #12]
 800cbda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8013      	strh	r3, [r2, #0]
 800cbee:	e01f      	b.n	800cc30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc06:	81fb      	strh	r3, [r7, #14]
 800cc08:	89fb      	ldrh	r3, [r7, #14]
 800cc0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc0e:	81fb      	strh	r3, [r7, #14]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	441a      	add	r2, r3
 800cc1a:	89fb      	ldrh	r3, [r7, #14]
 800cc1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b087      	sub	sp, #28
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	7b1b      	ldrb	r3, [r3, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 809d 	bne.w	800cd8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	785b      	ldrb	r3, [r3, #1]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d04c      	beq.n	800ccf4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	823b      	strh	r3, [r7, #16]
 800cc68:	8a3b      	ldrh	r3, [r7, #16]
 800cc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d01b      	beq.n	800ccaa <USB_EPClearStall+0x6c>
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4413      	add	r3, r2
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc88:	81fb      	strh	r3, [r7, #14]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	441a      	add	r2, r3
 800cc94:	89fb      	ldrh	r3, [r7, #14]
 800cc96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	78db      	ldrb	r3, [r3, #3]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d06c      	beq.n	800cd8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccc8:	81bb      	strh	r3, [r7, #12]
 800ccca:	89bb      	ldrh	r3, [r7, #12]
 800cccc:	f083 0320 	eor.w	r3, r3, #32
 800ccd0:	81bb      	strh	r3, [r7, #12]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	441a      	add	r2, r3
 800ccdc:	89bb      	ldrh	r3, [r7, #12]
 800ccde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	8013      	strh	r3, [r2, #0]
 800ccf2:	e04b      	b.n	800cd8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	82fb      	strh	r3, [r7, #22]
 800cd02:	8afb      	ldrh	r3, [r7, #22]
 800cd04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01b      	beq.n	800cd44 <USB_EPClearStall+0x106>
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd22:	82bb      	strh	r3, [r7, #20]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	441a      	add	r2, r3
 800cd2e:	8abb      	ldrh	r3, [r7, #20]
 800cd30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd5a:	827b      	strh	r3, [r7, #18]
 800cd5c:	8a7b      	ldrh	r3, [r7, #18]
 800cd5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd62:	827b      	strh	r3, [r7, #18]
 800cd64:	8a7b      	ldrh	r3, [r7, #18]
 800cd66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cd6a:	827b      	strh	r3, [r7, #18]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	441a      	add	r2, r3
 800cd76:	8a7b      	ldrh	r3, [r7, #18]
 800cd78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	371c      	adds	r7, #28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b083      	sub	sp, #12
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cda6:	78fb      	ldrb	r3, [r7, #3]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d103      	bne.n	800cdb4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2280      	movs	r2, #128	; 0x80
 800cdb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce02:	68fb      	ldr	r3, [r7, #12]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b08b      	sub	sp, #44	; 0x2c
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	460b      	mov	r3, r1
 800ce20:	80fb      	strh	r3, [r7, #6]
 800ce22:	4613      	mov	r3, r2
 800ce24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce26:	88bb      	ldrh	r3, [r7, #4]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	085b      	lsrs	r3, r3, #1
 800ce2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce36:	88fa      	ldrh	r2, [r7, #6]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	627b      	str	r3, [r7, #36]	; 0x24
 800ce46:	e01b      	b.n	800ce80 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	3301      	adds	r3, #1
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	b21a      	sxth	r2, r3
 800ce58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	b21b      	sxth	r3, r3
 800ce60:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	8a7a      	ldrh	r2, [r7, #18]
 800ce66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	3301      	adds	r3, #1
 800ce72:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	3301      	adds	r3, #1
 800ce78:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1e0      	bne.n	800ce48 <USB_WritePMA+0x38>
  }
}
 800ce86:	bf00      	nop
 800ce88:	bf00      	nop
 800ce8a:	372c      	adds	r7, #44	; 0x2c
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b08b      	sub	sp, #44	; 0x2c
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4611      	mov	r1, r2
 800cea0:	461a      	mov	r2, r3
 800cea2:	460b      	mov	r3, r1
 800cea4:	80fb      	strh	r3, [r7, #6]
 800cea6:	4613      	mov	r3, r2
 800cea8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ceaa:	88bb      	ldrh	r3, [r7, #4]
 800ceac:	085b      	lsrs	r3, r3, #1
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ceba:	88fa      	ldrh	r2, [r7, #6]
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	4413      	add	r3, r2
 800cec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cec4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceca:	e018      	b.n	800cefe <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	3302      	adds	r3, #2
 800ced8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	3301      	adds	r3, #1
 800cee6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	0a1b      	lsrs	r3, r3, #8
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	3301      	adds	r3, #1
 800cef6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	3b01      	subs	r3, #1
 800cefc:	627b      	str	r3, [r7, #36]	; 0x24
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1e3      	bne.n	800cecc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cf04:	88bb      	ldrh	r3, [r7, #4]
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d007      	beq.n	800cf20 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	881b      	ldrh	r3, [r3, #0]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	701a      	strb	r2, [r3, #0]
  }
}
 800cf20:	bf00      	nop
 800cf22:	372c      	adds	r7, #44	; 0x2c
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf3c:	f002 f8fc 	bl	800f138 <USBD_static_malloc>
 800cf40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d105      	bne.n	800cf54 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf50:	2302      	movs	r3, #2
 800cf52:	e066      	b.n	800d022 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7c1b      	ldrb	r3, [r3, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d119      	bne.n	800cf98 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf68:	2202      	movs	r2, #2
 800cf6a:	2181      	movs	r1, #129	; 0x81
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 ff8a 	bl	800ee86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	2101      	movs	r1, #1
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f001 ff80 	bl	800ee86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2210      	movs	r2, #16
 800cf92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cf96:	e016      	b.n	800cfc6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf98:	2340      	movs	r3, #64	; 0x40
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	2181      	movs	r1, #129	; 0x81
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f001 ff71 	bl	800ee86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cfaa:	2340      	movs	r3, #64	; 0x40
 800cfac:	2202      	movs	r2, #2
 800cfae:	2101      	movs	r1, #1
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f001 ff68 	bl	800ee86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2210      	movs	r2, #16
 800cfc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfc6:	2308      	movs	r3, #8
 800cfc8:	2203      	movs	r2, #3
 800cfca:	2182      	movs	r1, #130	; 0x82
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f001 ff5a 	bl	800ee86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	7c1b      	ldrb	r3, [r3, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d109      	bne.n	800d010 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d002:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d006:	2101      	movs	r1, #1
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f002 f82b 	bl	800f064 <USBD_LL_PrepareReceive>
 800d00e:	e007      	b.n	800d020 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d016:	2340      	movs	r3, #64	; 0x40
 800d018:	2101      	movs	r1, #1
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f002 f822 	bl	800f064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	460b      	mov	r3, r1
 800d034:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d036:	2181      	movs	r1, #129	; 0x81
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 ff4a 	bl	800eed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d044:	2101      	movs	r1, #1
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f001 ff43 	bl	800eed2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d054:	2182      	movs	r1, #130	; 0x82
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f001 ff3b 	bl	800eed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00e      	beq.n	800d094 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d086:	4618      	mov	r0, r3
 800d088:	f002 f864 	bl	800f154 <USBD_static_free>
    pdev->pClassData = NULL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
	...

0800d0a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e0af      	b.n	800d228 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d03f      	beq.n	800d154 <USBD_CDC_Setup+0xb4>
 800d0d4:	2b20      	cmp	r3, #32
 800d0d6:	f040 809f 	bne.w	800d218 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	88db      	ldrh	r3, [r3, #6]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d02e      	beq.n	800d140 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b25b      	sxtb	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	da16      	bge.n	800d11a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d0f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	88d2      	ldrh	r2, [r2, #6]
 800d0fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	88db      	ldrh	r3, [r3, #6]
 800d104:	2b07      	cmp	r3, #7
 800d106:	bf28      	it	cs
 800d108:	2307      	movcs	r3, #7
 800d10a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	89fa      	ldrh	r2, [r7, #14]
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f001 facf 	bl	800e6b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d118:	e085      	b.n	800d226 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	785a      	ldrb	r2, [r3, #1]
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	88db      	ldrh	r3, [r3, #6]
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d130:	6939      	ldr	r1, [r7, #16]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	88db      	ldrh	r3, [r3, #6]
 800d136:	461a      	mov	r2, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 fae8 	bl	800e70e <USBD_CtlPrepareRx>
      break;
 800d13e:	e072      	b.n	800d226 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	7850      	ldrb	r0, [r2, #1]
 800d14c:	2200      	movs	r2, #0
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	4798      	blx	r3
      break;
 800d152:	e068      	b.n	800d226 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	785b      	ldrb	r3, [r3, #1]
 800d158:	2b0b      	cmp	r3, #11
 800d15a:	d852      	bhi.n	800d202 <USBD_CDC_Setup+0x162>
 800d15c:	a201      	add	r2, pc, #4	; (adr r2, 800d164 <USBD_CDC_Setup+0xc4>)
 800d15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d162:	bf00      	nop
 800d164:	0800d195 	.word	0x0800d195
 800d168:	0800d211 	.word	0x0800d211
 800d16c:	0800d203 	.word	0x0800d203
 800d170:	0800d203 	.word	0x0800d203
 800d174:	0800d203 	.word	0x0800d203
 800d178:	0800d203 	.word	0x0800d203
 800d17c:	0800d203 	.word	0x0800d203
 800d180:	0800d203 	.word	0x0800d203
 800d184:	0800d203 	.word	0x0800d203
 800d188:	0800d203 	.word	0x0800d203
 800d18c:	0800d1bf 	.word	0x0800d1bf
 800d190:	0800d1e9 	.word	0x0800d1e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d107      	bne.n	800d1b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d1a0:	f107 030a 	add.w	r3, r7, #10
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f001 fa84 	bl	800e6b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1ae:	e032      	b.n	800d216 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fa0e 	bl	800e5d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	75fb      	strb	r3, [r7, #23]
          break;
 800d1bc:	e02b      	b.n	800d216 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d107      	bne.n	800d1da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1ca:	f107 030d 	add.w	r3, r7, #13
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f001 fa6f 	bl	800e6b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1d8:	e01d      	b.n	800d216 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d1da:	6839      	ldr	r1, [r7, #0]
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f001 f9f9 	bl	800e5d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	75fb      	strb	r3, [r7, #23]
          break;
 800d1e6:	e016      	b.n	800d216 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d00f      	beq.n	800d214 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f001 f9ec 	bl	800e5d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d200:	e008      	b.n	800d214 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f001 f9e5 	bl	800e5d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	75fb      	strb	r3, [r7, #23]
          break;
 800d20e:	e002      	b.n	800d216 <USBD_CDC_Setup+0x176>
          break;
 800d210:	bf00      	nop
 800d212:	e008      	b.n	800d226 <USBD_CDC_Setup+0x186>
          break;
 800d214:	bf00      	nop
      }
      break;
 800d216:	e006      	b.n	800d226 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f001 f9da 	bl	800e5d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d220:	2303      	movs	r3, #3
 800d222:	75fb      	strb	r3, [r7, #23]
      break;
 800d224:	bf00      	nop
  }

  return (uint8_t)ret;
 800d226:	7dfb      	ldrb	r3, [r7, #23]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d242:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d24e:	2303      	movs	r3, #3
 800d250:	e04f      	b.n	800d2f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d258:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d25a:	78fa      	ldrb	r2, [r7, #3]
 800d25c:	6879      	ldr	r1, [r7, #4]
 800d25e:	4613      	mov	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	440b      	add	r3, r1
 800d268:	3318      	adds	r3, #24
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d029      	beq.n	800d2c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d270:	78fa      	ldrb	r2, [r7, #3]
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	3318      	adds	r3, #24
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	78f9      	ldrb	r1, [r7, #3]
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	460b      	mov	r3, r1
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	440b      	add	r3, r1
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	4403      	add	r3, r0
 800d290:	3320      	adds	r3, #32
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	fbb2 f1f3 	udiv	r1, r2, r3
 800d298:	fb01 f303 	mul.w	r3, r1, r3
 800d29c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d110      	bne.n	800d2c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	6879      	ldr	r1, [r7, #4]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	440b      	add	r3, r1
 800d2b0:	3318      	adds	r3, #24
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d2b6:	78f9      	ldrb	r1, [r7, #3]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f001 feb0 	bl	800f022 <USBD_LL_Transmit>
 800d2c2:	e015      	b.n	800d2f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00b      	beq.n	800d2f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2ec:	78fa      	ldrb	r2, [r7, #3]
 800d2ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	460b      	mov	r3, r1
 800d304:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d30c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d314:	2b00      	cmp	r3, #0
 800d316:	d101      	bne.n	800d31c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d318:	2303      	movs	r3, #3
 800d31a:	e015      	b.n	800d348 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f001 fec0 	bl	800f0a6 <USBD_LL_GetRxDataSize>
 800d326:	4602      	mov	r2, r0
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d342:	4611      	mov	r1, r2
 800d344:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d35e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d366:	2303      	movs	r3, #3
 800d368:	e01b      	b.n	800d3a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d015      	beq.n	800d3a0 <USBD_CDC_EP0_RxReady+0x50>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d37a:	2bff      	cmp	r3, #255	; 0xff
 800d37c:	d010      	beq.n	800d3a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d38c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d394:	b292      	uxth	r2, r2
 800d396:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	22ff      	movs	r2, #255	; 0xff
 800d39c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2243      	movs	r2, #67	; 0x43
 800d3b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	20000094 	.word	0x20000094

0800d3cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2243      	movs	r2, #67	; 0x43
 800d3d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	20000050 	.word	0x20000050

0800d3ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2243      	movs	r2, #67	; 0x43
 800d3f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d3fa:	4b03      	ldr	r3, [pc, #12]	; (800d408 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	200000d8 	.word	0x200000d8

0800d40c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	220a      	movs	r2, #10
 800d418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d41a:	4b03      	ldr	r3, [pc, #12]	; (800d428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr
 800d428:	2000000c 	.word	0x2000000c

0800d42c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d43c:	2303      	movs	r3, #3
 800d43e:	e004      	b.n	800d44a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	370c      	adds	r7, #12
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d456:	b480      	push	{r7}
 800d458:	b087      	sub	sp, #28
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d468:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d470:	2303      	movs	r3, #3
 800d472:	e008      	b.n	800d486 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d492:	b480      	push	{r7}
 800d494:	b085      	sub	sp, #20
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d101      	bne.n	800d4ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	e004      	b.n	800d4b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	e01a      	b.n	800d51c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d114      	bne.n	800d51a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d50e:	2181      	movs	r1, #129	; 0x81
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f001 fd86 	bl	800f022 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d53e:	2303      	movs	r3, #3
 800d540:	e016      	b.n	800d570 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	7c1b      	ldrb	r3, [r3, #16]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d109      	bne.n	800d55e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d550:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d554:	2101      	movs	r1, #1
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f001 fd84 	bl	800f064 <USBD_LL_PrepareReceive>
 800d55c:	e007      	b.n	800d56e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d564:	2340      	movs	r3, #64	; 0x40
 800d566:	2101      	movs	r1, #1
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f001 fd7b 	bl	800f064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	4613      	mov	r3, r2
 800d584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e01f      	b.n	800d5d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2200      	movs	r2, #0
 800d594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	79fa      	ldrb	r2, [r7, #7]
 800d5c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f001 fbe3 	bl	800ed90 <USBD_LL_Init>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3718      	adds	r7, #24
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d101      	bne.n	800d5f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e016      	b.n	800d61e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60c:	f107 020e 	add.w	r2, r7, #14
 800d610:	4610      	mov	r0, r2
 800d612:	4798      	blx	r3
 800d614:	4602      	mov	r2, r0
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b082      	sub	sp, #8
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f001 fc0e 	bl	800ee50 <USBD_LL_Start>
 800d634:	4603      	mov	r3, r0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d63e:	b480      	push	{r7}
 800d640:	b083      	sub	sp, #12
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d660:	2303      	movs	r3, #3
 800d662:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	4611      	mov	r1, r2
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	4798      	blx	r3
 800d67e:	4603      	mov	r3, r0
 800d680:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d682:	7bfb      	ldrb	r3, [r7, #15]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	460b      	mov	r3, r1
 800d696:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d007      	beq.n	800d6b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	78fa      	ldrb	r2, [r7, #3]
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	4798      	blx	r3
  }

  return USBD_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 ff46 	bl	800e560 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6f0:	f003 031f 	and.w	r3, r3, #31
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d01a      	beq.n	800d72e <USBD_LL_SetupStage+0x72>
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d822      	bhi.n	800d742 <USBD_LL_SetupStage+0x86>
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <USBD_LL_SetupStage+0x4a>
 800d700:	2b01      	cmp	r3, #1
 800d702:	d00a      	beq.n	800d71a <USBD_LL_SetupStage+0x5e>
 800d704:	e01d      	b.n	800d742 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f9ee 	bl	800daf0 <USBD_StdDevReq>
 800d714:	4603      	mov	r3, r0
 800d716:	73fb      	strb	r3, [r7, #15]
      break;
 800d718:	e020      	b.n	800d75c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 fa52 	bl	800dbcc <USBD_StdItfReq>
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
      break;
 800d72c:	e016      	b.n	800d75c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa91 	bl	800dc5e <USBD_StdEPReq>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]
      break;
 800d740:	e00c      	b.n	800d75c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d748:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f001 fbdd 	bl	800ef10 <USBD_LL_StallEP>
 800d756:	4603      	mov	r3, r0
 800d758:	73fb      	strb	r3, [r7, #15]
      break;
 800d75a:	bf00      	nop
  }

  return ret;
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b086      	sub	sp, #24
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	460b      	mov	r3, r1
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d774:	7afb      	ldrb	r3, [r7, #11]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d138      	bne.n	800d7ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d780:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d14a      	bne.n	800d822 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	689a      	ldr	r2, [r3, #8]
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	429a      	cmp	r2, r3
 800d796:	d913      	bls.n	800d7c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	689a      	ldr	r2, [r3, #8]
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	1ad2      	subs	r2, r2, r3
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	68da      	ldr	r2, [r3, #12]
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	bf28      	it	cs
 800d7b2:	4613      	movcs	r3, r2
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 ffc5 	bl	800e748 <USBD_CtlContinueRx>
 800d7be:	e030      	b.n	800d822 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d10b      	bne.n	800d7e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d005      	beq.n	800d7e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 ffc0 	bl	800e76a <USBD_CtlSendStatus>
 800d7ea:	e01a      	b.n	800d822 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b03      	cmp	r3, #3
 800d7f6:	d114      	bne.n	800d822 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00e      	beq.n	800d822 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d80a:	699b      	ldr	r3, [r3, #24]
 800d80c:	7afa      	ldrb	r2, [r7, #11]
 800d80e:	4611      	mov	r1, r2
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	4798      	blx	r3
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	e000      	b.n	800d824 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3718      	adds	r7, #24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	460b      	mov	r3, r1
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d83a:	7afb      	ldrb	r3, [r7, #11]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d16b      	bne.n	800d918 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3314      	adds	r3, #20
 800d844:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d156      	bne.n	800d8fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	689a      	ldr	r2, [r3, #8]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d914      	bls.n	800d886 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	1ad2      	subs	r2, r2, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	461a      	mov	r2, r3
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f000 ff3a 	bl	800e6ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d878:	2300      	movs	r3, #0
 800d87a:	2200      	movs	r2, #0
 800d87c:	2100      	movs	r1, #0
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f001 fbf0 	bl	800f064 <USBD_LL_PrepareReceive>
 800d884:	e03b      	b.n	800d8fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d11c      	bne.n	800d8cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d316      	bcc.n	800d8cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	685a      	ldr	r2, [r3, #4]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d20f      	bcs.n	800d8cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 ff1b 	bl	800e6ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f001 fbcd 	bl	800f064 <USBD_LL_PrepareReceive>
 800d8ca:	e018      	b.n	800d8fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d10b      	bne.n	800d8f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d005      	beq.n	800d8f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8f0:	2180      	movs	r1, #128	; 0x80
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f001 fb0c 	bl	800ef10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 ff49 	bl	800e790 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d904:	2b01      	cmp	r3, #1
 800d906:	d122      	bne.n	800d94e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f7ff fe98 	bl	800d63e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d916:	e01a      	b.n	800d94e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b03      	cmp	r3, #3
 800d922:	d114      	bne.n	800d94e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00e      	beq.n	800d94e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	7afa      	ldrb	r2, [r7, #11]
 800d93a:	4611      	mov	r1, r2
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	4798      	blx	r3
 800d940:	4603      	mov	r3, r0
 800d942:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d94a:	7dfb      	ldrb	r3, [r7, #23]
 800d94c:	e000      	b.n	800d950 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d988:	2303      	movs	r3, #3
 800d98a:	e02f      	b.n	800d9ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00f      	beq.n	800d9b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	6852      	ldr	r2, [r2, #4]
 800d9ae:	b2d2      	uxtb	r2, r2
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9b6:	2340      	movs	r3, #64	; 0x40
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f001 fa62 	bl	800ee86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2240      	movs	r2, #64	; 0x40
 800d9ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9d2:	2340      	movs	r3, #64	; 0x40
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2180      	movs	r1, #128	; 0x80
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f001 fa54 	bl	800ee86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2240      	movs	r2, #64	; 0x40
 800d9e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	78fa      	ldrb	r2, [r7, #3]
 800da04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da22:	b2da      	uxtb	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2204      	movs	r2, #4
 800da2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b04      	cmp	r3, #4
 800da52:	d106      	bne.n	800da62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800da82:	2303      	movs	r3, #3
 800da84:	e012      	b.n	800daac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d10b      	bne.n	800daaa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da98:	69db      	ldr	r3, [r3, #28]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d005      	beq.n	800daaa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa4:	69db      	ldr	r3, [r3, #28]
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b087      	sub	sp, #28
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	3301      	adds	r3, #1
 800daca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dad2:	8a3b      	ldrh	r3, [r7, #16]
 800dad4:	021b      	lsls	r3, r3, #8
 800dad6:	b21a      	sxth	r2, r3
 800dad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dadc:	4313      	orrs	r3, r2
 800dade:	b21b      	sxth	r3, r3
 800dae0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dae2:	89fb      	ldrh	r3, [r7, #14]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	371c      	adds	r7, #28
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db06:	2b40      	cmp	r3, #64	; 0x40
 800db08:	d005      	beq.n	800db16 <USBD_StdDevReq+0x26>
 800db0a:	2b40      	cmp	r3, #64	; 0x40
 800db0c:	d853      	bhi.n	800dbb6 <USBD_StdDevReq+0xc6>
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00b      	beq.n	800db2a <USBD_StdDevReq+0x3a>
 800db12:	2b20      	cmp	r3, #32
 800db14:	d14f      	bne.n	800dbb6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	4798      	blx	r3
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]
      break;
 800db28:	e04a      	b.n	800dbc0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	785b      	ldrb	r3, [r3, #1]
 800db2e:	2b09      	cmp	r3, #9
 800db30:	d83b      	bhi.n	800dbaa <USBD_StdDevReq+0xba>
 800db32:	a201      	add	r2, pc, #4	; (adr r2, 800db38 <USBD_StdDevReq+0x48>)
 800db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db38:	0800db8d 	.word	0x0800db8d
 800db3c:	0800dba1 	.word	0x0800dba1
 800db40:	0800dbab 	.word	0x0800dbab
 800db44:	0800db97 	.word	0x0800db97
 800db48:	0800dbab 	.word	0x0800dbab
 800db4c:	0800db6b 	.word	0x0800db6b
 800db50:	0800db61 	.word	0x0800db61
 800db54:	0800dbab 	.word	0x0800dbab
 800db58:	0800db83 	.word	0x0800db83
 800db5c:	0800db75 	.word	0x0800db75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db60:	6839      	ldr	r1, [r7, #0]
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f9de 	bl	800df24 <USBD_GetDescriptor>
          break;
 800db68:	e024      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 fb6d 	bl	800e24c <USBD_SetAddress>
          break;
 800db72:	e01f      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fbac 	bl	800e2d4 <USBD_SetConfig>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73fb      	strb	r3, [r7, #15]
          break;
 800db80:	e018      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fc4b 	bl	800e420 <USBD_GetConfig>
          break;
 800db8a:	e013      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 fc7c 	bl	800e48c <USBD_GetStatus>
          break;
 800db94:	e00e      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db96:	6839      	ldr	r1, [r7, #0]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 fcab 	bl	800e4f4 <USBD_SetFeature>
          break;
 800db9e:	e009      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 fcba 	bl	800e51c <USBD_ClrFeature>
          break;
 800dba8:	e004      	b.n	800dbb4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dbaa:	6839      	ldr	r1, [r7, #0]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fd11 	bl	800e5d4 <USBD_CtlError>
          break;
 800dbb2:	bf00      	nop
      }
      break;
 800dbb4:	e004      	b.n	800dbc0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fd0b 	bl	800e5d4 <USBD_CtlError>
      break;
 800dbbe:	bf00      	nop
  }

  return ret;
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop

0800dbcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbe2:	2b40      	cmp	r3, #64	; 0x40
 800dbe4:	d005      	beq.n	800dbf2 <USBD_StdItfReq+0x26>
 800dbe6:	2b40      	cmp	r3, #64	; 0x40
 800dbe8:	d82f      	bhi.n	800dc4a <USBD_StdItfReq+0x7e>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <USBD_StdItfReq+0x26>
 800dbee:	2b20      	cmp	r3, #32
 800dbf0:	d12b      	bne.n	800dc4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d81d      	bhi.n	800dc3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	889b      	ldrh	r3, [r3, #4]
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d813      	bhi.n	800dc32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	4798      	blx	r3
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	88db      	ldrh	r3, [r3, #6]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d110      	bne.n	800dc46 <USBD_StdItfReq+0x7a>
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10d      	bne.n	800dc46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fd9d 	bl	800e76a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc30:	e009      	b.n	800dc46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fccd 	bl	800e5d4 <USBD_CtlError>
          break;
 800dc3a:	e004      	b.n	800dc46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fcc8 	bl	800e5d4 <USBD_CtlError>
          break;
 800dc44:	e000      	b.n	800dc48 <USBD_StdItfReq+0x7c>
          break;
 800dc46:	bf00      	nop
      }
      break;
 800dc48:	e004      	b.n	800dc54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fcc1 	bl	800e5d4 <USBD_CtlError>
      break;
 800dc52:	bf00      	nop
  }

  return ret;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	889b      	ldrh	r3, [r3, #4]
 800dc70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc7a:	2b40      	cmp	r3, #64	; 0x40
 800dc7c:	d007      	beq.n	800dc8e <USBD_StdEPReq+0x30>
 800dc7e:	2b40      	cmp	r3, #64	; 0x40
 800dc80:	f200 8145 	bhi.w	800df0e <USBD_StdEPReq+0x2b0>
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00c      	beq.n	800dca2 <USBD_StdEPReq+0x44>
 800dc88:	2b20      	cmp	r3, #32
 800dc8a:	f040 8140 	bne.w	800df0e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	4798      	blx	r3
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dca0:	e13a      	b.n	800df18 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	2b03      	cmp	r3, #3
 800dca8:	d007      	beq.n	800dcba <USBD_StdEPReq+0x5c>
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	f300 8129 	bgt.w	800df02 <USBD_StdEPReq+0x2a4>
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d07f      	beq.n	800ddb4 <USBD_StdEPReq+0x156>
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d03c      	beq.n	800dd32 <USBD_StdEPReq+0xd4>
 800dcb8:	e123      	b.n	800df02 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d002      	beq.n	800dccc <USBD_StdEPReq+0x6e>
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d016      	beq.n	800dcf8 <USBD_StdEPReq+0x9a>
 800dcca:	e02c      	b.n	800dd26 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dccc:	7bbb      	ldrb	r3, [r7, #14]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00d      	beq.n	800dcee <USBD_StdEPReq+0x90>
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	2b80      	cmp	r3, #128	; 0x80
 800dcd6:	d00a      	beq.n	800dcee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dcd8:	7bbb      	ldrb	r3, [r7, #14]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f001 f917 	bl	800ef10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dce2:	2180      	movs	r1, #128	; 0x80
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f001 f913 	bl	800ef10 <USBD_LL_StallEP>
 800dcea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcec:	e020      	b.n	800dd30 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fc6f 	bl	800e5d4 <USBD_CtlError>
              break;
 800dcf6:	e01b      	b.n	800dd30 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	885b      	ldrh	r3, [r3, #2]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10e      	bne.n	800dd1e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00b      	beq.n	800dd1e <USBD_StdEPReq+0xc0>
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b80      	cmp	r3, #128	; 0x80
 800dd0a:	d008      	beq.n	800dd1e <USBD_StdEPReq+0xc0>
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	88db      	ldrh	r3, [r3, #6]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d104      	bne.n	800dd1e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd14:	7bbb      	ldrb	r3, [r7, #14]
 800dd16:	4619      	mov	r1, r3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f001 f8f9 	bl	800ef10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fd23 	bl	800e76a <USBD_CtlSendStatus>

              break;
 800dd24:	e004      	b.n	800dd30 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 fc53 	bl	800e5d4 <USBD_CtlError>
              break;
 800dd2e:	bf00      	nop
          }
          break;
 800dd30:	e0ec      	b.n	800df0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d002      	beq.n	800dd44 <USBD_StdEPReq+0xe6>
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d016      	beq.n	800dd70 <USBD_StdEPReq+0x112>
 800dd42:	e030      	b.n	800dda6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00d      	beq.n	800dd66 <USBD_StdEPReq+0x108>
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	2b80      	cmp	r3, #128	; 0x80
 800dd4e:	d00a      	beq.n	800dd66 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd50:	7bbb      	ldrb	r3, [r7, #14]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f001 f8db 	bl	800ef10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd5a:	2180      	movs	r1, #128	; 0x80
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f001 f8d7 	bl	800ef10 <USBD_LL_StallEP>
 800dd62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd64:	e025      	b.n	800ddb2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fc33 	bl	800e5d4 <USBD_CtlError>
              break;
 800dd6e:	e020      	b.n	800ddb2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	885b      	ldrh	r3, [r3, #2]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d11b      	bne.n	800ddb0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd78:	7bbb      	ldrb	r3, [r7, #14]
 800dd7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d004      	beq.n	800dd8c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd82:	7bbb      	ldrb	r3, [r7, #14]
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f001 f8e1 	bl	800ef4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 fcec 	bl	800e76a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	4798      	blx	r3
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dda4:	e004      	b.n	800ddb0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800dda6:	6839      	ldr	r1, [r7, #0]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 fc13 	bl	800e5d4 <USBD_CtlError>
              break;
 800ddae:	e000      	b.n	800ddb2 <USBD_StdEPReq+0x154>
              break;
 800ddb0:	bf00      	nop
          }
          break;
 800ddb2:	e0ab      	b.n	800df0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d002      	beq.n	800ddc6 <USBD_StdEPReq+0x168>
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d032      	beq.n	800de2a <USBD_StdEPReq+0x1cc>
 800ddc4:	e097      	b.n	800def6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d007      	beq.n	800dddc <USBD_StdEPReq+0x17e>
 800ddcc:	7bbb      	ldrb	r3, [r7, #14]
 800ddce:	2b80      	cmp	r3, #128	; 0x80
 800ddd0:	d004      	beq.n	800dddc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fbfd 	bl	800e5d4 <USBD_CtlError>
                break;
 800ddda:	e091      	b.n	800df00 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	da0b      	bge.n	800ddfc <USBD_StdEPReq+0x19e>
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddea:	4613      	mov	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	3310      	adds	r3, #16
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	e00b      	b.n	800de14 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddfc:	7bbb      	ldrb	r3, [r7, #14]
 800ddfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de02:	4613      	mov	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	4413      	add	r3, r2
 800de12:	3304      	adds	r3, #4
 800de14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2202      	movs	r2, #2
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fc47 	bl	800e6b6 <USBD_CtlSendData>
              break;
 800de28:	e06a      	b.n	800df00 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800de2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	da11      	bge.n	800de56 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	f003 020f 	and.w	r2, r3, #15
 800de38:	6879      	ldr	r1, [r7, #4]
 800de3a:	4613      	mov	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	440b      	add	r3, r1
 800de44:	3324      	adds	r3, #36	; 0x24
 800de46:	881b      	ldrh	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d117      	bne.n	800de7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800de4c:	6839      	ldr	r1, [r7, #0]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 fbc0 	bl	800e5d4 <USBD_CtlError>
                  break;
 800de54:	e054      	b.n	800df00 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de56:	7bbb      	ldrb	r3, [r7, #14]
 800de58:	f003 020f 	and.w	r2, r3, #15
 800de5c:	6879      	ldr	r1, [r7, #4]
 800de5e:	4613      	mov	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	440b      	add	r3, r1
 800de68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d104      	bne.n	800de7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fbad 	bl	800e5d4 <USBD_CtlError>
                  break;
 800de7a:	e041      	b.n	800df00 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	da0b      	bge.n	800de9c <USBD_StdEPReq+0x23e>
 800de84:	7bbb      	ldrb	r3, [r7, #14]
 800de86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de8a:	4613      	mov	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	3310      	adds	r3, #16
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	4413      	add	r3, r2
 800de98:	3304      	adds	r3, #4
 800de9a:	e00b      	b.n	800deb4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dea2:	4613      	mov	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4413      	add	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	4413      	add	r3, r2
 800deb2:	3304      	adds	r3, #4
 800deb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800deb6:	7bbb      	ldrb	r3, [r7, #14]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <USBD_StdEPReq+0x264>
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	2b80      	cmp	r3, #128	; 0x80
 800dec0:	d103      	bne.n	800deca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2200      	movs	r2, #0
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	e00e      	b.n	800dee8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	4619      	mov	r1, r3
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f001 f85c 	bl	800ef8c <USBD_LL_IsStallEP>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d003      	beq.n	800dee2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2201      	movs	r2, #1
 800dede:	601a      	str	r2, [r3, #0]
 800dee0:	e002      	b.n	800dee8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2202      	movs	r2, #2
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fbe1 	bl	800e6b6 <USBD_CtlSendData>
              break;
 800def4:	e004      	b.n	800df00 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fb6b 	bl	800e5d4 <USBD_CtlError>
              break;
 800defe:	bf00      	nop
          }
          break;
 800df00:	e004      	b.n	800df0c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800df02:	6839      	ldr	r1, [r7, #0]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 fb65 	bl	800e5d4 <USBD_CtlError>
          break;
 800df0a:	bf00      	nop
      }
      break;
 800df0c:	e004      	b.n	800df18 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fb5f 	bl	800e5d4 <USBD_CtlError>
      break;
 800df16:	bf00      	nop
  }

  return ret;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df36:	2300      	movs	r3, #0
 800df38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	885b      	ldrh	r3, [r3, #2]
 800df3e:	0a1b      	lsrs	r3, r3, #8
 800df40:	b29b      	uxth	r3, r3
 800df42:	3b01      	subs	r3, #1
 800df44:	2b0e      	cmp	r3, #14
 800df46:	f200 8152 	bhi.w	800e1ee <USBD_GetDescriptor+0x2ca>
 800df4a:	a201      	add	r2, pc, #4	; (adr r2, 800df50 <USBD_GetDescriptor+0x2c>)
 800df4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df50:	0800dfc1 	.word	0x0800dfc1
 800df54:	0800dfd9 	.word	0x0800dfd9
 800df58:	0800e019 	.word	0x0800e019
 800df5c:	0800e1ef 	.word	0x0800e1ef
 800df60:	0800e1ef 	.word	0x0800e1ef
 800df64:	0800e18f 	.word	0x0800e18f
 800df68:	0800e1bb 	.word	0x0800e1bb
 800df6c:	0800e1ef 	.word	0x0800e1ef
 800df70:	0800e1ef 	.word	0x0800e1ef
 800df74:	0800e1ef 	.word	0x0800e1ef
 800df78:	0800e1ef 	.word	0x0800e1ef
 800df7c:	0800e1ef 	.word	0x0800e1ef
 800df80:	0800e1ef 	.word	0x0800e1ef
 800df84:	0800e1ef 	.word	0x0800e1ef
 800df88:	0800df8d 	.word	0x0800df8d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df92:	69db      	ldr	r3, [r3, #28]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00b      	beq.n	800dfb0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df9e:	69db      	ldr	r3, [r3, #28]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	7c12      	ldrb	r2, [r2, #16]
 800dfa4:	f107 0108 	add.w	r1, r7, #8
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	4798      	blx	r3
 800dfac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfae:	e126      	b.n	800e1fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 fb0e 	bl	800e5d4 <USBD_CtlError>
        err++;
 800dfb8:	7afb      	ldrb	r3, [r7, #11]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	72fb      	strb	r3, [r7, #11]
      break;
 800dfbe:	e11e      	b.n	800e1fe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	7c12      	ldrb	r2, [r2, #16]
 800dfcc:	f107 0108 	add.w	r1, r7, #8
 800dfd0:	4610      	mov	r0, r2
 800dfd2:	4798      	blx	r3
 800dfd4:	60f8      	str	r0, [r7, #12]
      break;
 800dfd6:	e112      	b.n	800e1fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	7c1b      	ldrb	r3, [r3, #16]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10d      	bne.n	800dffc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe8:	f107 0208 	add.w	r2, r7, #8
 800dfec:	4610      	mov	r0, r2
 800dfee:	4798      	blx	r3
 800dff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3301      	adds	r3, #1
 800dff6:	2202      	movs	r2, #2
 800dff8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dffa:	e100      	b.n	800e1fe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	f107 0208 	add.w	r2, r7, #8
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
 800e00c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3301      	adds	r3, #1
 800e012:	2202      	movs	r2, #2
 800e014:	701a      	strb	r2, [r3, #0]
      break;
 800e016:	e0f2      	b.n	800e1fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	885b      	ldrh	r3, [r3, #2]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b05      	cmp	r3, #5
 800e020:	f200 80ac 	bhi.w	800e17c <USBD_GetDescriptor+0x258>
 800e024:	a201      	add	r2, pc, #4	; (adr r2, 800e02c <USBD_GetDescriptor+0x108>)
 800e026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02a:	bf00      	nop
 800e02c:	0800e045 	.word	0x0800e045
 800e030:	0800e079 	.word	0x0800e079
 800e034:	0800e0ad 	.word	0x0800e0ad
 800e038:	0800e0e1 	.word	0x0800e0e1
 800e03c:	0800e115 	.word	0x0800e115
 800e040:	0800e149 	.word	0x0800e149
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00b      	beq.n	800e068 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	7c12      	ldrb	r2, [r2, #16]
 800e05c:	f107 0108 	add.w	r1, r7, #8
 800e060:	4610      	mov	r0, r2
 800e062:	4798      	blx	r3
 800e064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e066:	e091      	b.n	800e18c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fab2 	bl	800e5d4 <USBD_CtlError>
            err++;
 800e070:	7afb      	ldrb	r3, [r7, #11]
 800e072:	3301      	adds	r3, #1
 800e074:	72fb      	strb	r3, [r7, #11]
          break;
 800e076:	e089      	b.n	800e18c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00b      	beq.n	800e09c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	7c12      	ldrb	r2, [r2, #16]
 800e090:	f107 0108 	add.w	r1, r7, #8
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e09a:	e077      	b.n	800e18c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fa98 	bl	800e5d4 <USBD_CtlError>
            err++;
 800e0a4:	7afb      	ldrb	r3, [r7, #11]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0aa:	e06f      	b.n	800e18c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	7c12      	ldrb	r2, [r2, #16]
 800e0c4:	f107 0108 	add.w	r1, r7, #8
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	4798      	blx	r3
 800e0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ce:	e05d      	b.n	800e18c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fa7e 	bl	800e5d4 <USBD_CtlError>
            err++;
 800e0d8:	7afb      	ldrb	r3, [r7, #11]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e0de:	e055      	b.n	800e18c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	7c12      	ldrb	r2, [r2, #16]
 800e0f8:	f107 0108 	add.w	r1, r7, #8
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
 800e100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e102:	e043      	b.n	800e18c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fa64 	bl	800e5d4 <USBD_CtlError>
            err++;
 800e10c:	7afb      	ldrb	r3, [r7, #11]
 800e10e:	3301      	adds	r3, #1
 800e110:	72fb      	strb	r3, [r7, #11]
          break;
 800e112:	e03b      	b.n	800e18c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	7c12      	ldrb	r2, [r2, #16]
 800e12c:	f107 0108 	add.w	r1, r7, #8
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
 800e134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e136:	e029      	b.n	800e18c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fa4a 	bl	800e5d4 <USBD_CtlError>
            err++;
 800e140:	7afb      	ldrb	r3, [r7, #11]
 800e142:	3301      	adds	r3, #1
 800e144:	72fb      	strb	r3, [r7, #11]
          break;
 800e146:	e021      	b.n	800e18c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00b      	beq.n	800e16c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	7c12      	ldrb	r2, [r2, #16]
 800e160:	f107 0108 	add.w	r1, r7, #8
 800e164:	4610      	mov	r0, r2
 800e166:	4798      	blx	r3
 800e168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16a:	e00f      	b.n	800e18c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fa30 	bl	800e5d4 <USBD_CtlError>
            err++;
 800e174:	7afb      	ldrb	r3, [r7, #11]
 800e176:	3301      	adds	r3, #1
 800e178:	72fb      	strb	r3, [r7, #11]
          break;
 800e17a:	e007      	b.n	800e18c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e17c:	6839      	ldr	r1, [r7, #0]
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 fa28 	bl	800e5d4 <USBD_CtlError>
          err++;
 800e184:	7afb      	ldrb	r3, [r7, #11]
 800e186:	3301      	adds	r3, #1
 800e188:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e18a:	bf00      	nop
      }
      break;
 800e18c:	e037      	b.n	800e1fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	7c1b      	ldrb	r3, [r3, #16]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19e:	f107 0208 	add.w	r2, r7, #8
 800e1a2:	4610      	mov	r0, r2
 800e1a4:	4798      	blx	r3
 800e1a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1a8:	e029      	b.n	800e1fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1aa:	6839      	ldr	r1, [r7, #0]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fa11 	bl	800e5d4 <USBD_CtlError>
        err++;
 800e1b2:	7afb      	ldrb	r3, [r7, #11]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1b8:	e021      	b.n	800e1fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7c1b      	ldrb	r3, [r3, #16]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d10d      	bne.n	800e1de <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ca:	f107 0208 	add.w	r2, r7, #8
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	4798      	blx	r3
 800e1d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	2207      	movs	r2, #7
 800e1da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1dc:	e00f      	b.n	800e1fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1de:	6839      	ldr	r1, [r7, #0]
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f9f7 	bl	800e5d4 <USBD_CtlError>
        err++;
 800e1e6:	7afb      	ldrb	r3, [r7, #11]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ec:	e007      	b.n	800e1fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f9ef 	bl	800e5d4 <USBD_CtlError>
      err++;
 800e1f6:	7afb      	ldrb	r3, [r7, #11]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	72fb      	strb	r3, [r7, #11]
      break;
 800e1fc:	bf00      	nop
  }

  if (err != 0U)
 800e1fe:	7afb      	ldrb	r3, [r7, #11]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d11e      	bne.n	800e242 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d016      	beq.n	800e23a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e20c:	893b      	ldrh	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00e      	beq.n	800e230 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	88da      	ldrh	r2, [r3, #6]
 800e216:	893b      	ldrh	r3, [r7, #8]
 800e218:	4293      	cmp	r3, r2
 800e21a:	bf28      	it	cs
 800e21c:	4613      	movcs	r3, r2
 800e21e:	b29b      	uxth	r3, r3
 800e220:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e222:	893b      	ldrh	r3, [r7, #8]
 800e224:	461a      	mov	r2, r3
 800e226:	68f9      	ldr	r1, [r7, #12]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fa44 	bl	800e6b6 <USBD_CtlSendData>
 800e22e:	e009      	b.n	800e244 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f9ce 	bl	800e5d4 <USBD_CtlError>
 800e238:	e004      	b.n	800e244 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fa95 	bl	800e76a <USBD_CtlSendStatus>
 800e240:	e000      	b.n	800e244 <USBD_GetDescriptor+0x320>
    return;
 800e242:	bf00      	nop
  }
}
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop

0800e24c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	889b      	ldrh	r3, [r3, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d131      	bne.n	800e2c2 <USBD_SetAddress+0x76>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	88db      	ldrh	r3, [r3, #6]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d12d      	bne.n	800e2c2 <USBD_SetAddress+0x76>
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	885b      	ldrh	r3, [r3, #2]
 800e26a:	2b7f      	cmp	r3, #127	; 0x7f
 800e26c:	d829      	bhi.n	800e2c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	885b      	ldrh	r3, [r3, #2]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b03      	cmp	r3, #3
 800e284:	d104      	bne.n	800e290 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f9a3 	bl	800e5d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28e:	e01d      	b.n	800e2cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	7bfa      	ldrb	r2, [r7, #15]
 800e294:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e298:	7bfb      	ldrb	r3, [r7, #15]
 800e29a:	4619      	mov	r1, r3
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fea1 	bl	800efe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 fa61 	bl	800e76a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d004      	beq.n	800e2b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2202      	movs	r2, #2
 800e2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b6:	e009      	b.n	800e2cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c0:	e004      	b.n	800e2cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2c2:	6839      	ldr	r1, [r7, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f985 	bl	800e5d4 <USBD_CtlError>
  }
}
 800e2ca:	bf00      	nop
 800e2cc:	bf00      	nop
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	4b4c      	ldr	r3, [pc, #304]	; (800e41c <USBD_SetConfig+0x148>)
 800e2ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2ec:	4b4b      	ldr	r3, [pc, #300]	; (800e41c <USBD_SetConfig+0x148>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d905      	bls.n	800e300 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f96c 	bl	800e5d4 <USBD_CtlError>
    return USBD_FAIL;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	e088      	b.n	800e412 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e306:	b2db      	uxtb	r3, r3
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d002      	beq.n	800e312 <USBD_SetConfig+0x3e>
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	d025      	beq.n	800e35c <USBD_SetConfig+0x88>
 800e310:	e071      	b.n	800e3f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e312:	4b42      	ldr	r3, [pc, #264]	; (800e41c <USBD_SetConfig+0x148>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d01c      	beq.n	800e354 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e31a:	4b40      	ldr	r3, [pc, #256]	; (800e41c <USBD_SetConfig+0x148>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	461a      	mov	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e324:	4b3d      	ldr	r3, [pc, #244]	; (800e41c <USBD_SetConfig+0x148>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff f992 	bl	800d654 <USBD_SetClassConfig>
 800e330:	4603      	mov	r3, r0
 800e332:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d004      	beq.n	800e344 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e33a:	6839      	ldr	r1, [r7, #0]
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f949 	bl	800e5d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e342:	e065      	b.n	800e410 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fa10 	bl	800e76a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2203      	movs	r2, #3
 800e34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e352:	e05d      	b.n	800e410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fa08 	bl	800e76a <USBD_CtlSendStatus>
      break;
 800e35a:	e059      	b.n	800e410 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e35c:	4b2f      	ldr	r3, [pc, #188]	; (800e41c <USBD_SetConfig+0x148>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d112      	bne.n	800e38a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2202      	movs	r2, #2
 800e368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e36c:	4b2b      	ldr	r3, [pc, #172]	; (800e41c <USBD_SetConfig+0x148>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	461a      	mov	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e376:	4b29      	ldr	r3, [pc, #164]	; (800e41c <USBD_SetConfig+0x148>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	4619      	mov	r1, r3
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7ff f985 	bl	800d68c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 f9f1 	bl	800e76a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e388:	e042      	b.n	800e410 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e38a:	4b24      	ldr	r3, [pc, #144]	; (800e41c <USBD_SetConfig+0x148>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	461a      	mov	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	429a      	cmp	r2, r3
 800e396:	d02a      	beq.n	800e3ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff f973 	bl	800d68c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e3a6:	4b1d      	ldr	r3, [pc, #116]	; (800e41c <USBD_SetConfig+0x148>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3b0:	4b1a      	ldr	r3, [pc, #104]	; (800e41c <USBD_SetConfig+0x148>)
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff f94c 	bl	800d654 <USBD_SetClassConfig>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00f      	beq.n	800e3e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e3c6:	6839      	ldr	r1, [r7, #0]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 f903 	bl	800e5d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff f958 	bl	800d68c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2202      	movs	r2, #2
 800e3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3e4:	e014      	b.n	800e410 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 f9bf 	bl	800e76a <USBD_CtlSendStatus>
      break;
 800e3ec:	e010      	b.n	800e410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f9bb 	bl	800e76a <USBD_CtlSendStatus>
      break;
 800e3f4:	e00c      	b.n	800e410 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e3f6:	6839      	ldr	r1, [r7, #0]
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 f8eb 	bl	800e5d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3fe:	4b07      	ldr	r3, [pc, #28]	; (800e41c <USBD_SetConfig+0x148>)
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	4619      	mov	r1, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff f941 	bl	800d68c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e40a:	2303      	movs	r3, #3
 800e40c:	73fb      	strb	r3, [r7, #15]
      break;
 800e40e:	bf00      	nop
  }

  return ret;
 800e410:	7bfb      	ldrb	r3, [r7, #15]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	200006d8 	.word	0x200006d8

0800e420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	88db      	ldrh	r3, [r3, #6]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d004      	beq.n	800e43c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f8cd 	bl	800e5d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e43a:	e023      	b.n	800e484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b02      	cmp	r3, #2
 800e446:	dc02      	bgt.n	800e44e <USBD_GetConfig+0x2e>
 800e448:	2b00      	cmp	r3, #0
 800e44a:	dc03      	bgt.n	800e454 <USBD_GetConfig+0x34>
 800e44c:	e015      	b.n	800e47a <USBD_GetConfig+0x5a>
 800e44e:	2b03      	cmp	r3, #3
 800e450:	d00b      	beq.n	800e46a <USBD_GetConfig+0x4a>
 800e452:	e012      	b.n	800e47a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3308      	adds	r3, #8
 800e45e:	2201      	movs	r2, #1
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f927 	bl	800e6b6 <USBD_CtlSendData>
        break;
 800e468:	e00c      	b.n	800e484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	3304      	adds	r3, #4
 800e46e:	2201      	movs	r2, #1
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 f91f 	bl	800e6b6 <USBD_CtlSendData>
        break;
 800e478:	e004      	b.n	800e484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e47a:	6839      	ldr	r1, [r7, #0]
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f8a9 	bl	800e5d4 <USBD_CtlError>
        break;
 800e482:	bf00      	nop
}
 800e484:	bf00      	nop
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d81e      	bhi.n	800e4e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	88db      	ldrh	r3, [r3, #6]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d004      	beq.n	800e4b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e4ac:	6839      	ldr	r1, [r7, #0]
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f890 	bl	800e5d4 <USBD_CtlError>
        break;
 800e4b4:	e01a      	b.n	800e4ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	f043 0202 	orr.w	r2, r3, #2
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	330c      	adds	r3, #12
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	4619      	mov	r1, r3
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f8eb 	bl	800e6b6 <USBD_CtlSendData>
      break;
 800e4e0:	e004      	b.n	800e4ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 f875 	bl	800e5d4 <USBD_CtlError>
      break;
 800e4ea:	bf00      	nop
  }
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	885b      	ldrh	r3, [r3, #2]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d106      	bne.n	800e514 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2201      	movs	r2, #1
 800e50a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f92b 	bl	800e76a <USBD_CtlSendStatus>
  }
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	3b01      	subs	r3, #1
 800e530:	2b02      	cmp	r3, #2
 800e532:	d80b      	bhi.n	800e54c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	885b      	ldrh	r3, [r3, #2]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d10c      	bne.n	800e556 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f910 	bl	800e76a <USBD_CtlSendStatus>
      }
      break;
 800e54a:	e004      	b.n	800e556 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f840 	bl	800e5d4 <USBD_CtlError>
      break;
 800e554:	e000      	b.n	800e558 <USBD_ClrFeature+0x3c>
      break;
 800e556:	bf00      	nop
  }
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	781a      	ldrb	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	3301      	adds	r3, #1
 800e57a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	781a      	ldrb	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	3301      	adds	r3, #1
 800e588:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f7ff fa92 	bl	800dab4 <SWAPBYTE>
 800e590:	4603      	mov	r3, r0
 800e592:	461a      	mov	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	3301      	adds	r3, #1
 800e59c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f7ff fa85 	bl	800dab4 <SWAPBYTE>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f7ff fa78 	bl	800dab4 <SWAPBYTE>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	80da      	strh	r2, [r3, #6]
}
 800e5cc:	bf00      	nop
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5de:	2180      	movs	r1, #128	; 0x80
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fc95 	bl	800ef10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fc91 	bl	800ef10 <USBD_LL_StallEP>
}
 800e5ee:	bf00      	nop
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	60f8      	str	r0, [r7, #12]
 800e5fe:	60b9      	str	r1, [r7, #8]
 800e600:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e602:	2300      	movs	r3, #0
 800e604:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d036      	beq.n	800e67a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e610:	6938      	ldr	r0, [r7, #16]
 800e612:	f000 f836 	bl	800e682 <USBD_GetLen>
 800e616:	4603      	mov	r3, r0
 800e618:	3301      	adds	r3, #1
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	b29a      	uxth	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e624:	7dfb      	ldrb	r3, [r7, #23]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	4413      	add	r3, r2
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	7812      	ldrb	r2, [r2, #0]
 800e62e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e630:	7dfb      	ldrb	r3, [r7, #23]
 800e632:	3301      	adds	r3, #1
 800e634:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	4413      	add	r3, r2
 800e63c:	2203      	movs	r2, #3
 800e63e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	3301      	adds	r3, #1
 800e644:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e646:	e013      	b.n	800e670 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	4413      	add	r3, r2
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	7812      	ldrb	r2, [r2, #0]
 800e652:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	3301      	adds	r3, #1
 800e658:	613b      	str	r3, [r7, #16]
    idx++;
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	3301      	adds	r3, #1
 800e65e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	4413      	add	r3, r2
 800e666:	2200      	movs	r2, #0
 800e668:	701a      	strb	r2, [r3, #0]
    idx++;
 800e66a:	7dfb      	ldrb	r3, [r7, #23]
 800e66c:	3301      	adds	r3, #1
 800e66e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1e7      	bne.n	800e648 <USBD_GetString+0x52>
 800e678:	e000      	b.n	800e67c <USBD_GetString+0x86>
    return;
 800e67a:	bf00      	nop
  }
}
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}

0800e682 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e682:	b480      	push	{r7}
 800e684:	b085      	sub	sp, #20
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e68a:	2300      	movs	r3, #0
 800e68c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e692:	e005      	b.n	800e6a0 <USBD_GetLen+0x1e>
  {
    len++;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
 800e696:	3301      	adds	r3, #1
 800e698:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	3301      	adds	r3, #1
 800e69e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1f5      	bne.n	800e694 <USBD_GetLen+0x12>
  }

  return len;
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3714      	adds	r7, #20
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b084      	sub	sp, #16
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	2100      	movs	r1, #0
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 fca0 	bl	800f022 <USBD_LL_Transmit>

  return USBD_OK;
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f000 fc8f 	bl	800f022 <USBD_LL_Transmit>

  return USBD_OK;
 800e704:	2300      	movs	r3, #0
}
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b084      	sub	sp, #16
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	60b9      	str	r1, [r7, #8]
 800e718:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2203      	movs	r2, #3
 800e71e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	2100      	movs	r1, #0
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f000 fc93 	bl	800f064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	2100      	movs	r1, #0
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f000 fc82 	bl	800f064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2204      	movs	r2, #4
 800e776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e77a:	2300      	movs	r3, #0
 800e77c:	2200      	movs	r2, #0
 800e77e:	2100      	movs	r1, #0
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fc4e 	bl	800f022 <USBD_LL_Transmit>

  return USBD_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2205      	movs	r2, #5
 800e79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 fc5c 	bl	800f064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
	...

0800e7b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e7bc:	2200      	movs	r2, #0
 800e7be:	4912      	ldr	r1, [pc, #72]	; (800e808 <MX_USB_Device_Init+0x50>)
 800e7c0:	4812      	ldr	r0, [pc, #72]	; (800e80c <MX_USB_Device_Init+0x54>)
 800e7c2:	f7fe fed9 	bl	800d578 <USBD_Init>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e7cc:	f7f3 fa4d 	bl	8001c6a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e7d0:	490f      	ldr	r1, [pc, #60]	; (800e810 <MX_USB_Device_Init+0x58>)
 800e7d2:	480e      	ldr	r0, [pc, #56]	; (800e80c <MX_USB_Device_Init+0x54>)
 800e7d4:	f7fe ff00 	bl	800d5d8 <USBD_RegisterClass>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e7de:	f7f3 fa44 	bl	8001c6a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e7e2:	490c      	ldr	r1, [pc, #48]	; (800e814 <MX_USB_Device_Init+0x5c>)
 800e7e4:	4809      	ldr	r0, [pc, #36]	; (800e80c <MX_USB_Device_Init+0x54>)
 800e7e6:	f7fe fe21 	bl	800d42c <USBD_CDC_RegisterInterface>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d001      	beq.n	800e7f4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e7f0:	f7f3 fa3b 	bl	8001c6a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e7f4:	4805      	ldr	r0, [pc, #20]	; (800e80c <MX_USB_Device_Init+0x54>)
 800e7f6:	f7fe ff16 	bl	800d626 <USBD_Start>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e800:	f7f3 fa33 	bl	8001c6a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e804:	bf00      	nop
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20000130 	.word	0x20000130
 800e80c:	200006dc 	.word	0x200006dc
 800e810:	20000018 	.word	0x20000018
 800e814:	2000011c 	.word	0x2000011c

0800e818 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e81c:	2200      	movs	r2, #0
 800e81e:	4905      	ldr	r1, [pc, #20]	; (800e834 <CDC_Init_FS+0x1c>)
 800e820:	4805      	ldr	r0, [pc, #20]	; (800e838 <CDC_Init_FS+0x20>)
 800e822:	f7fe fe18 	bl	800d456 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e826:	4905      	ldr	r1, [pc, #20]	; (800e83c <CDC_Init_FS+0x24>)
 800e828:	4803      	ldr	r0, [pc, #12]	; (800e838 <CDC_Init_FS+0x20>)
 800e82a:	f7fe fe32 	bl	800d492 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e82e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e830:	4618      	mov	r0, r3
 800e832:	bd80      	pop	{r7, pc}
 800e834:	20000dac 	.word	0x20000dac
 800e838:	200006dc 	.word	0x200006dc
 800e83c:	200009ac 	.word	0x200009ac

0800e840 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e840:	b480      	push	{r7}
 800e842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e844:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e846:	4618      	mov	r0, r3
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	4603      	mov	r3, r0
 800e858:	6039      	str	r1, [r7, #0]
 800e85a:	71fb      	strb	r3, [r7, #7]
 800e85c:	4613      	mov	r3, r2
 800e85e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e860:	79fb      	ldrb	r3, [r7, #7]
 800e862:	2b23      	cmp	r3, #35	; 0x23
 800e864:	d84a      	bhi.n	800e8fc <CDC_Control_FS+0xac>
 800e866:	a201      	add	r2, pc, #4	; (adr r2, 800e86c <CDC_Control_FS+0x1c>)
 800e868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e86c:	0800e8fd 	.word	0x0800e8fd
 800e870:	0800e8fd 	.word	0x0800e8fd
 800e874:	0800e8fd 	.word	0x0800e8fd
 800e878:	0800e8fd 	.word	0x0800e8fd
 800e87c:	0800e8fd 	.word	0x0800e8fd
 800e880:	0800e8fd 	.word	0x0800e8fd
 800e884:	0800e8fd 	.word	0x0800e8fd
 800e888:	0800e8fd 	.word	0x0800e8fd
 800e88c:	0800e8fd 	.word	0x0800e8fd
 800e890:	0800e8fd 	.word	0x0800e8fd
 800e894:	0800e8fd 	.word	0x0800e8fd
 800e898:	0800e8fd 	.word	0x0800e8fd
 800e89c:	0800e8fd 	.word	0x0800e8fd
 800e8a0:	0800e8fd 	.word	0x0800e8fd
 800e8a4:	0800e8fd 	.word	0x0800e8fd
 800e8a8:	0800e8fd 	.word	0x0800e8fd
 800e8ac:	0800e8fd 	.word	0x0800e8fd
 800e8b0:	0800e8fd 	.word	0x0800e8fd
 800e8b4:	0800e8fd 	.word	0x0800e8fd
 800e8b8:	0800e8fd 	.word	0x0800e8fd
 800e8bc:	0800e8fd 	.word	0x0800e8fd
 800e8c0:	0800e8fd 	.word	0x0800e8fd
 800e8c4:	0800e8fd 	.word	0x0800e8fd
 800e8c8:	0800e8fd 	.word	0x0800e8fd
 800e8cc:	0800e8fd 	.word	0x0800e8fd
 800e8d0:	0800e8fd 	.word	0x0800e8fd
 800e8d4:	0800e8fd 	.word	0x0800e8fd
 800e8d8:	0800e8fd 	.word	0x0800e8fd
 800e8dc:	0800e8fd 	.word	0x0800e8fd
 800e8e0:	0800e8fd 	.word	0x0800e8fd
 800e8e4:	0800e8fd 	.word	0x0800e8fd
 800e8e8:	0800e8fd 	.word	0x0800e8fd
 800e8ec:	0800e8fd 	.word	0x0800e8fd
 800e8f0:	0800e8fd 	.word	0x0800e8fd
 800e8f4:	0800e8fd 	.word	0x0800e8fd
 800e8f8:	0800e8fd 	.word	0x0800e8fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e8fc:	bf00      	nop
  }

  return (USBD_OK);
 800e8fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e916:	6879      	ldr	r1, [r7, #4]
 800e918:	4805      	ldr	r0, [pc, #20]	; (800e930 <CDC_Receive_FS+0x24>)
 800e91a:	f7fe fdba 	bl	800d492 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e91e:	4804      	ldr	r0, [pc, #16]	; (800e930 <CDC_Receive_FS+0x24>)
 800e920:	f7fe fe00 	bl	800d524 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e924:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	200006dc 	.word	0x200006dc

0800e934 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	460b      	mov	r3, r1
 800e93e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e944:	4b0d      	ldr	r3, [pc, #52]	; (800e97c <CDC_Transmit_FS+0x48>)
 800e946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e94a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e956:	2301      	movs	r3, #1
 800e958:	e00b      	b.n	800e972 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e95a:	887b      	ldrh	r3, [r7, #2]
 800e95c:	461a      	mov	r2, r3
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	4806      	ldr	r0, [pc, #24]	; (800e97c <CDC_Transmit_FS+0x48>)
 800e962:	f7fe fd78 	bl	800d456 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e966:	4805      	ldr	r0, [pc, #20]	; (800e97c <CDC_Transmit_FS+0x48>)
 800e968:	f7fe fdac 	bl	800d4c4 <USBD_CDC_TransmitPacket>
 800e96c:	4603      	mov	r3, r0
 800e96e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e970:	7bfb      	ldrb	r3, [r7, #15]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	200006dc 	.word	0x200006dc

0800e980 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e980:	b480      	push	{r7}
 800e982:	b087      	sub	sp, #28
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	4613      	mov	r3, r2
 800e98c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e996:	4618      	mov	r0, r3
 800e998:	371c      	adds	r7, #28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
	...

0800e9a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	6039      	str	r1, [r7, #0]
 800e9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2212      	movs	r2, #18
 800e9b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e9b6:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr
 800e9c4:	20000150 	.word	0x20000150

0800e9c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	6039      	str	r1, [r7, #0]
 800e9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2204      	movs	r2, #4
 800e9d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e9da:	4b03      	ldr	r3, [pc, #12]	; (800e9e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr
 800e9e8:	20000164 	.word	0x20000164

0800e9ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	6039      	str	r1, [r7, #0]
 800e9f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d105      	bne.n	800ea0a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	4907      	ldr	r1, [pc, #28]	; (800ea20 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ea02:	4808      	ldr	r0, [pc, #32]	; (800ea24 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ea04:	f7ff fdf7 	bl	800e5f6 <USBD_GetString>
 800ea08:	e004      	b.n	800ea14 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	4904      	ldr	r1, [pc, #16]	; (800ea20 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ea0e:	4805      	ldr	r0, [pc, #20]	; (800ea24 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ea10:	f7ff fdf1 	bl	800e5f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea14:	4b02      	ldr	r3, [pc, #8]	; (800ea20 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3708      	adds	r7, #8
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	200011ac 	.word	0x200011ac
 800ea24:	08012494 	.word	0x08012494

0800ea28 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	4603      	mov	r3, r0
 800ea30:	6039      	str	r1, [r7, #0]
 800ea32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	4904      	ldr	r1, [pc, #16]	; (800ea48 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ea38:	4804      	ldr	r0, [pc, #16]	; (800ea4c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ea3a:	f7ff fddc 	bl	800e5f6 <USBD_GetString>
  return USBD_StrDesc;
 800ea3e:	4b02      	ldr	r3, [pc, #8]	; (800ea48 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	200011ac 	.word	0x200011ac
 800ea4c:	080124ac 	.word	0x080124ac

0800ea50 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	221a      	movs	r2, #26
 800ea60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea62:	f000 f843 	bl	800eaec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ea66:	4b02      	ldr	r3, [pc, #8]	; (800ea70 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	20000168 	.word	0x20000168

0800ea74 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	6039      	str	r1, [r7, #0]
 800ea7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ea80:	79fb      	ldrb	r3, [r7, #7]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d105      	bne.n	800ea92 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ea86:	683a      	ldr	r2, [r7, #0]
 800ea88:	4907      	ldr	r1, [pc, #28]	; (800eaa8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ea8a:	4808      	ldr	r0, [pc, #32]	; (800eaac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ea8c:	f7ff fdb3 	bl	800e5f6 <USBD_GetString>
 800ea90:	e004      	b.n	800ea9c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	4904      	ldr	r1, [pc, #16]	; (800eaa8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ea96:	4805      	ldr	r0, [pc, #20]	; (800eaac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ea98:	f7ff fdad 	bl	800e5f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea9c:	4b02      	ldr	r3, [pc, #8]	; (800eaa8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	200011ac 	.word	0x200011ac
 800eaac:	080124c0 	.word	0x080124c0

0800eab0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	4603      	mov	r3, r0
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d105      	bne.n	800eace <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	4907      	ldr	r1, [pc, #28]	; (800eae4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800eac6:	4808      	ldr	r0, [pc, #32]	; (800eae8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800eac8:	f7ff fd95 	bl	800e5f6 <USBD_GetString>
 800eacc:	e004      	b.n	800ead8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4904      	ldr	r1, [pc, #16]	; (800eae4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ead2:	4805      	ldr	r0, [pc, #20]	; (800eae8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ead4:	f7ff fd8f 	bl	800e5f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	200011ac 	.word	0x200011ac
 800eae8:	080124cc 	.word	0x080124cc

0800eaec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eaf2:	4b0f      	ldr	r3, [pc, #60]	; (800eb30 <Get_SerialNum+0x44>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eaf8:	4b0e      	ldr	r3, [pc, #56]	; (800eb34 <Get_SerialNum+0x48>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eafe:	4b0e      	ldr	r3, [pc, #56]	; (800eb38 <Get_SerialNum+0x4c>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4413      	add	r3, r2
 800eb0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d009      	beq.n	800eb26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb12:	2208      	movs	r2, #8
 800eb14:	4909      	ldr	r1, [pc, #36]	; (800eb3c <Get_SerialNum+0x50>)
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f000 f814 	bl	800eb44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb1c:	2204      	movs	r2, #4
 800eb1e:	4908      	ldr	r1, [pc, #32]	; (800eb40 <Get_SerialNum+0x54>)
 800eb20:	68b8      	ldr	r0, [r7, #8]
 800eb22:	f000 f80f 	bl	800eb44 <IntToUnicode>
  }
}
 800eb26:	bf00      	nop
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	1fff7590 	.word	0x1fff7590
 800eb34:	1fff7594 	.word	0x1fff7594
 800eb38:	1fff7598 	.word	0x1fff7598
 800eb3c:	2000016a 	.word	0x2000016a
 800eb40:	2000017a 	.word	0x2000017a

0800eb44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb56:	2300      	movs	r3, #0
 800eb58:	75fb      	strb	r3, [r7, #23]
 800eb5a:	e027      	b.n	800ebac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	0f1b      	lsrs	r3, r3, #28
 800eb60:	2b09      	cmp	r3, #9
 800eb62:	d80b      	bhi.n	800eb7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	0f1b      	lsrs	r3, r3, #28
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	7dfb      	ldrb	r3, [r7, #23]
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	4619      	mov	r1, r3
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	440b      	add	r3, r1
 800eb74:	3230      	adds	r2, #48	; 0x30
 800eb76:	b2d2      	uxtb	r2, r2
 800eb78:	701a      	strb	r2, [r3, #0]
 800eb7a:	e00a      	b.n	800eb92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	0f1b      	lsrs	r3, r3, #28
 800eb80:	b2da      	uxtb	r2, r3
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	4619      	mov	r1, r3
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	440b      	add	r3, r1
 800eb8c:	3237      	adds	r2, #55	; 0x37
 800eb8e:	b2d2      	uxtb	r2, r2
 800eb90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eb98:	7dfb      	ldrb	r3, [r7, #23]
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	4413      	add	r3, r2
 800eba2:	2200      	movs	r2, #0
 800eba4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	75fb      	strb	r3, [r7, #23]
 800ebac:	7dfa      	ldrb	r2, [r7, #23]
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d3d3      	bcc.n	800eb5c <IntToUnicode+0x18>
  }
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	371c      	adds	r7, #28
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
	...

0800ebc4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b094      	sub	sp, #80	; 0x50
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ebcc:	f107 030c 	add.w	r3, r7, #12
 800ebd0:	2244      	movs	r2, #68	; 0x44
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f001 f884 	bl	800fce2 <memset>
  if(pcdHandle->Instance==USB)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a15      	ldr	r2, [pc, #84]	; (800ec34 <HAL_PCD_MspInit+0x70>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d122      	bne.n	800ec2a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ebe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ebe8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ebea:	2300      	movs	r3, #0
 800ebec:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ebee:	f107 030c 	add.w	r3, r7, #12
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f7 fd08 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ebfe:	f7f3 f834 	bl	8001c6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ec02:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <HAL_PCD_MspInit+0x74>)
 800ec04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec06:	4a0c      	ldr	r2, [pc, #48]	; (800ec38 <HAL_PCD_MspInit+0x74>)
 800ec08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ec0c:	6593      	str	r3, [r2, #88]	; 0x58
 800ec0e:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <HAL_PCD_MspInit+0x74>)
 800ec10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec16:	60bb      	str	r3, [r7, #8]
 800ec18:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	2014      	movs	r0, #20
 800ec20:	f7f3 fe55 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ec24:	2014      	movs	r0, #20
 800ec26:	f7f3 fe6c 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ec2a:	bf00      	nop
 800ec2c:	3750      	adds	r7, #80	; 0x50
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	40005c00 	.word	0x40005c00
 800ec38:	40021000 	.word	0x40021000

0800ec3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800ec50:	4619      	mov	r1, r3
 800ec52:	4610      	mov	r0, r2
 800ec54:	f7fe fd32 	bl	800d6bc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ec72:	78fa      	ldrb	r2, [r7, #3]
 800ec74:	6879      	ldr	r1, [r7, #4]
 800ec76:	4613      	mov	r3, r2
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	4413      	add	r3, r2
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	440b      	add	r3, r1
 800ec80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	78fb      	ldrb	r3, [r7, #3]
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f7fe fd6c 	bl	800d766 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ec8e:	bf00      	nop
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b082      	sub	sp, #8
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	460b      	mov	r3, r1
 800eca0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800eca8:	78fa      	ldrb	r2, [r7, #3]
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	4613      	mov	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4413      	add	r3, r2
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	440b      	add	r3, r1
 800ecb6:	3324      	adds	r3, #36	; 0x24
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	78fb      	ldrb	r3, [r7, #3]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	f7fe fdb5 	bl	800d82c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ecc2:	bf00      	nop
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b082      	sub	sp, #8
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fe fec9 	bl	800da70 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ecde:	bf00      	nop
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b084      	sub	sp, #16
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	795b      	ldrb	r3, [r3, #5]
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	d001      	beq.n	800ecfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ecfa:	f7f2 ffb6 	bl	8001c6a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ed04:	7bfa      	ldrb	r2, [r7, #15]
 800ed06:	4611      	mov	r1, r2
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fe fe73 	bl	800d9f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fe fe1f 	bl	800d958 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fe fe6e 	bl	800da14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	7a5b      	ldrb	r3, [r3, #9]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d005      	beq.n	800ed4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed40:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <HAL_PCD_SuspendCallback+0x30>)
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	4a03      	ldr	r2, [pc, #12]	; (800ed54 <HAL_PCD_SuspendCallback+0x30>)
 800ed46:	f043 0306 	orr.w	r3, r3, #6
 800ed4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ed4c:	bf00      	nop
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	e000ed00 	.word	0xe000ed00

0800ed58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	7a5b      	ldrb	r3, [r3, #9]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d007      	beq.n	800ed78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed68:	4b08      	ldr	r3, [pc, #32]	; (800ed8c <HAL_PCD_ResumeCallback+0x34>)
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	4a07      	ldr	r2, [pc, #28]	; (800ed8c <HAL_PCD_ResumeCallback+0x34>)
 800ed6e:	f023 0306 	bic.w	r3, r3, #6
 800ed72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ed74:	f000 f9f8 	bl	800f168 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fe fe5e 	bl	800da40 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ed84:	bf00      	nop
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	e000ed00 	.word	0xe000ed00

0800ed90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ed98:	4a2b      	ldr	r2, [pc, #172]	; (800ee48 <USBD_LL_Init+0xb8>)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a29      	ldr	r2, [pc, #164]	; (800ee48 <USBD_LL_Init+0xb8>)
 800eda4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eda8:	4b27      	ldr	r3, [pc, #156]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edaa:	4a28      	ldr	r2, [pc, #160]	; (800ee4c <USBD_LL_Init+0xbc>)
 800edac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800edae:	4b26      	ldr	r3, [pc, #152]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edb0:	2208      	movs	r2, #8
 800edb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800edb4:	4b24      	ldr	r3, [pc, #144]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edb6:	2202      	movs	r2, #2
 800edb8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800edba:	4b23      	ldr	r3, [pc, #140]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edbc:	2202      	movs	r2, #2
 800edbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800edc0:	4b21      	ldr	r3, [pc, #132]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edc2:	2200      	movs	r2, #0
 800edc4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800edc6:	4b20      	ldr	r3, [pc, #128]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edc8:	2200      	movs	r2, #0
 800edca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800edcc:	4b1e      	ldr	r3, [pc, #120]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edce:	2200      	movs	r2, #0
 800edd0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800edd2:	4b1d      	ldr	r3, [pc, #116]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800edd8:	481b      	ldr	r0, [pc, #108]	; (800ee48 <USBD_LL_Init+0xb8>)
 800edda:	f7f5 f8ff 	bl	8003fdc <HAL_PCD_Init>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d001      	beq.n	800ede8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ede4:	f7f2 ff41 	bl	8001c6a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edee:	2318      	movs	r3, #24
 800edf0:	2200      	movs	r2, #0
 800edf2:	2100      	movs	r1, #0
 800edf4:	f7f6 fdb9 	bl	800596a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edfe:	2358      	movs	r3, #88	; 0x58
 800ee00:	2200      	movs	r2, #0
 800ee02:	2180      	movs	r1, #128	; 0x80
 800ee04:	f7f6 fdb1 	bl	800596a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee0e:	23c0      	movs	r3, #192	; 0xc0
 800ee10:	2200      	movs	r2, #0
 800ee12:	2181      	movs	r1, #129	; 0x81
 800ee14:	f7f6 fda9 	bl	800596a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ee22:	2200      	movs	r2, #0
 800ee24:	2101      	movs	r1, #1
 800ee26:	f7f6 fda0 	bl	800596a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee34:	2200      	movs	r2, #0
 800ee36:	2182      	movs	r1, #130	; 0x82
 800ee38:	f7f6 fd97 	bl	800596a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	200013ac 	.word	0x200013ac
 800ee4c:	40005c00 	.word	0x40005c00

0800ee50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f5 f986 	bl	8004178 <HAL_PCD_Start>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 f97e 	bl	800f174 <USBD_Get_USB_Status>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b084      	sub	sp, #16
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	4608      	mov	r0, r1
 800ee90:	4611      	mov	r1, r2
 800ee92:	461a      	mov	r2, r3
 800ee94:	4603      	mov	r3, r0
 800ee96:	70fb      	strb	r3, [r7, #3]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	70bb      	strb	r3, [r7, #2]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea0:	2300      	movs	r3, #0
 800eea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eeae:	78bb      	ldrb	r3, [r7, #2]
 800eeb0:	883a      	ldrh	r2, [r7, #0]
 800eeb2:	78f9      	ldrb	r1, [r7, #3]
 800eeb4:	f7f5 facd 	bl	8004452 <HAL_PCD_EP_Open>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f000 f958 	bl	800f174 <USBD_Get_USB_Status>
 800eec4:	4603      	mov	r3, r0
 800eec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b084      	sub	sp, #16
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	460b      	mov	r3, r1
 800eedc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eeec:	78fa      	ldrb	r2, [r7, #3]
 800eeee:	4611      	mov	r1, r2
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7f5 fb0b 	bl	800450c <HAL_PCD_EP_Close>
 800eef6:	4603      	mov	r3, r0
 800eef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 f939 	bl	800f174 <USBD_Get_USB_Status>
 800ef02:	4603      	mov	r3, r0
 800ef04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef2a:	78fa      	ldrb	r2, [r7, #3]
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f5 fbb4 	bl	800469c <HAL_PCD_EP_SetStall>
 800ef34:	4603      	mov	r3, r0
 800ef36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 f91a 	bl	800f174 <USBD_Get_USB_Status>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b084      	sub	sp, #16
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	460b      	mov	r3, r1
 800ef58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef68:	78fa      	ldrb	r2, [r7, #3]
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7f5 fbe7 	bl	8004740 <HAL_PCD_EP_ClrStall>
 800ef72:	4603      	mov	r3, r0
 800ef74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 f8fb 	bl	800f174 <USBD_Get_USB_Status>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	460b      	mov	r3, r1
 800ef96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	da0b      	bge.n	800efc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800efa8:	78fb      	ldrb	r3, [r7, #3]
 800efaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efae:	68f9      	ldr	r1, [r7, #12]
 800efb0:	4613      	mov	r3, r2
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	4413      	add	r3, r2
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	440b      	add	r3, r1
 800efba:	3312      	adds	r3, #18
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	e00b      	b.n	800efd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800efc0:	78fb      	ldrb	r3, [r7, #3]
 800efc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efc6:	68f9      	ldr	r1, [r7, #12]
 800efc8:	4613      	mov	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	440b      	add	r3, r1
 800efd2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800efd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3714      	adds	r7, #20
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800effe:	78fa      	ldrb	r2, [r7, #3]
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f7f5 fa01 	bl	800440a <HAL_PCD_SetAddress>
 800f008:	4603      	mov	r3, r0
 800f00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f8b0 	bl	800f174 <USBD_Get_USB_Status>
 800f014:	4603      	mov	r3, r0
 800f016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f018:	7bbb      	ldrb	r3, [r7, #14]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b086      	sub	sp, #24
 800f026:	af00      	add	r7, sp, #0
 800f028:	60f8      	str	r0, [r7, #12]
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	603b      	str	r3, [r7, #0]
 800f02e:	460b      	mov	r3, r1
 800f030:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f036:	2300      	movs	r3, #0
 800f038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f040:	7af9      	ldrb	r1, [r7, #11]
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	f7f5 faf2 	bl	800462e <HAL_PCD_EP_Transmit>
 800f04a:	4603      	mov	r3, r0
 800f04c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f04e:	7dfb      	ldrb	r3, [r7, #23]
 800f050:	4618      	mov	r0, r3
 800f052:	f000 f88f 	bl	800f174 <USBD_Get_USB_Status>
 800f056:	4603      	mov	r3, r0
 800f058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f05a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3718      	adds	r7, #24
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	607a      	str	r2, [r7, #4]
 800f06e:	603b      	str	r3, [r7, #0]
 800f070:	460b      	mov	r3, r1
 800f072:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f082:	7af9      	ldrb	r1, [r7, #11]
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	f7f5 fa88 	bl	800459c <HAL_PCD_EP_Receive>
 800f08c:	4603      	mov	r3, r0
 800f08e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f090:	7dfb      	ldrb	r3, [r7, #23]
 800f092:	4618      	mov	r0, r3
 800f094:	f000 f86e 	bl	800f174 <USBD_Get_USB_Status>
 800f098:	4603      	mov	r3, r0
 800f09a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f09c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0b8:	78fa      	ldrb	r2, [r7, #3]
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f5 fa9e 	bl	80045fe <HAL_PCD_EP_GetRxCount>
 800f0c2:	4603      	mov	r3, r0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <HAL_PCDEx_LPM_Callback+0x18>
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d013      	beq.n	800f10a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f0e2:	e023      	b.n	800f12c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7a5b      	ldrb	r3, [r3, #9]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d007      	beq.n	800f0fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f0ec:	f000 f83c 	bl	800f168 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f0f0:	4b10      	ldr	r3, [pc, #64]	; (800f134 <HAL_PCDEx_LPM_Callback+0x68>)
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	4a0f      	ldr	r2, [pc, #60]	; (800f134 <HAL_PCDEx_LPM_Callback+0x68>)
 800f0f6:	f023 0306 	bic.w	r3, r3, #6
 800f0fa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f102:	4618      	mov	r0, r3
 800f104:	f7fe fc9c 	bl	800da40 <USBD_LL_Resume>
    break;
 800f108:	e010      	b.n	800f12c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f110:	4618      	mov	r0, r3
 800f112:	f7fe fc7f 	bl	800da14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	7a5b      	ldrb	r3, [r3, #9]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d005      	beq.n	800f12a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f11e:	4b05      	ldr	r3, [pc, #20]	; (800f134 <HAL_PCDEx_LPM_Callback+0x68>)
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	4a04      	ldr	r2, [pc, #16]	; (800f134 <HAL_PCDEx_LPM_Callback+0x68>)
 800f124:	f043 0306 	orr.w	r3, r3, #6
 800f128:	6113      	str	r3, [r2, #16]
    break;
 800f12a:	bf00      	nop
}
 800f12c:	bf00      	nop
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	e000ed00 	.word	0xe000ed00

0800f138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f140:	4b03      	ldr	r3, [pc, #12]	; (800f150 <USBD_static_malloc+0x18>)
}
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	20001688 	.word	0x20001688

0800f154 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]

}
 800f15c:	bf00      	nop
 800f15e:	370c      	adds	r7, #12
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f16c:	f7f2 fd30 	bl	8001bd0 <SystemClock_Config>
}
 800f170:	bf00      	nop
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	2b03      	cmp	r3, #3
 800f186:	d817      	bhi.n	800f1b8 <USBD_Get_USB_Status+0x44>
 800f188:	a201      	add	r2, pc, #4	; (adr r2, 800f190 <USBD_Get_USB_Status+0x1c>)
 800f18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18e:	bf00      	nop
 800f190:	0800f1a1 	.word	0x0800f1a1
 800f194:	0800f1a7 	.word	0x0800f1a7
 800f198:	0800f1ad 	.word	0x0800f1ad
 800f19c:	0800f1b3 	.word	0x0800f1b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1a4:	e00b      	b.n	800f1be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1a6:	2303      	movs	r3, #3
 800f1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1aa:	e008      	b.n	800f1be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b0:	e005      	b.n	800f1be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b6:	e002      	b.n	800f1be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f1b8:	2303      	movs	r3, #3
 800f1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f1bc:	bf00      	nop
  }
  return usb_status;
 800f1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3714      	adds	r7, #20
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <__cvt>:
 800f1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d0:	ec55 4b10 	vmov	r4, r5, d0
 800f1d4:	2d00      	cmp	r5, #0
 800f1d6:	460e      	mov	r6, r1
 800f1d8:	4619      	mov	r1, r3
 800f1da:	462b      	mov	r3, r5
 800f1dc:	bfbb      	ittet	lt
 800f1de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f1e2:	461d      	movlt	r5, r3
 800f1e4:	2300      	movge	r3, #0
 800f1e6:	232d      	movlt	r3, #45	; 0x2d
 800f1e8:	700b      	strb	r3, [r1, #0]
 800f1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f1f0:	4691      	mov	r9, r2
 800f1f2:	f023 0820 	bic.w	r8, r3, #32
 800f1f6:	bfbc      	itt	lt
 800f1f8:	4622      	movlt	r2, r4
 800f1fa:	4614      	movlt	r4, r2
 800f1fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f200:	d005      	beq.n	800f20e <__cvt+0x42>
 800f202:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f206:	d100      	bne.n	800f20a <__cvt+0x3e>
 800f208:	3601      	adds	r6, #1
 800f20a:	2102      	movs	r1, #2
 800f20c:	e000      	b.n	800f210 <__cvt+0x44>
 800f20e:	2103      	movs	r1, #3
 800f210:	ab03      	add	r3, sp, #12
 800f212:	9301      	str	r3, [sp, #4]
 800f214:	ab02      	add	r3, sp, #8
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	ec45 4b10 	vmov	d0, r4, r5
 800f21c:	4653      	mov	r3, sl
 800f21e:	4632      	mov	r2, r6
 800f220:	f000 fe6a 	bl	800fef8 <_dtoa_r>
 800f224:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f228:	4607      	mov	r7, r0
 800f22a:	d102      	bne.n	800f232 <__cvt+0x66>
 800f22c:	f019 0f01 	tst.w	r9, #1
 800f230:	d022      	beq.n	800f278 <__cvt+0xac>
 800f232:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f236:	eb07 0906 	add.w	r9, r7, r6
 800f23a:	d110      	bne.n	800f25e <__cvt+0x92>
 800f23c:	783b      	ldrb	r3, [r7, #0]
 800f23e:	2b30      	cmp	r3, #48	; 0x30
 800f240:	d10a      	bne.n	800f258 <__cvt+0x8c>
 800f242:	2200      	movs	r2, #0
 800f244:	2300      	movs	r3, #0
 800f246:	4620      	mov	r0, r4
 800f248:	4629      	mov	r1, r5
 800f24a:	f7f1 fc65 	bl	8000b18 <__aeabi_dcmpeq>
 800f24e:	b918      	cbnz	r0, 800f258 <__cvt+0x8c>
 800f250:	f1c6 0601 	rsb	r6, r6, #1
 800f254:	f8ca 6000 	str.w	r6, [sl]
 800f258:	f8da 3000 	ldr.w	r3, [sl]
 800f25c:	4499      	add	r9, r3
 800f25e:	2200      	movs	r2, #0
 800f260:	2300      	movs	r3, #0
 800f262:	4620      	mov	r0, r4
 800f264:	4629      	mov	r1, r5
 800f266:	f7f1 fc57 	bl	8000b18 <__aeabi_dcmpeq>
 800f26a:	b108      	cbz	r0, 800f270 <__cvt+0xa4>
 800f26c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f270:	2230      	movs	r2, #48	; 0x30
 800f272:	9b03      	ldr	r3, [sp, #12]
 800f274:	454b      	cmp	r3, r9
 800f276:	d307      	bcc.n	800f288 <__cvt+0xbc>
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f27c:	1bdb      	subs	r3, r3, r7
 800f27e:	4638      	mov	r0, r7
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	b004      	add	sp, #16
 800f284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f288:	1c59      	adds	r1, r3, #1
 800f28a:	9103      	str	r1, [sp, #12]
 800f28c:	701a      	strb	r2, [r3, #0]
 800f28e:	e7f0      	b.n	800f272 <__cvt+0xa6>

0800f290 <__exponent>:
 800f290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f292:	4603      	mov	r3, r0
 800f294:	2900      	cmp	r1, #0
 800f296:	bfb8      	it	lt
 800f298:	4249      	neglt	r1, r1
 800f29a:	f803 2b02 	strb.w	r2, [r3], #2
 800f29e:	bfb4      	ite	lt
 800f2a0:	222d      	movlt	r2, #45	; 0x2d
 800f2a2:	222b      	movge	r2, #43	; 0x2b
 800f2a4:	2909      	cmp	r1, #9
 800f2a6:	7042      	strb	r2, [r0, #1]
 800f2a8:	dd2a      	ble.n	800f300 <__exponent+0x70>
 800f2aa:	f10d 0207 	add.w	r2, sp, #7
 800f2ae:	4617      	mov	r7, r2
 800f2b0:	260a      	movs	r6, #10
 800f2b2:	4694      	mov	ip, r2
 800f2b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800f2b8:	fb06 1415 	mls	r4, r6, r5, r1
 800f2bc:	3430      	adds	r4, #48	; 0x30
 800f2be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	2c63      	cmp	r4, #99	; 0x63
 800f2c6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	dcf1      	bgt.n	800f2b2 <__exponent+0x22>
 800f2ce:	3130      	adds	r1, #48	; 0x30
 800f2d0:	f1ac 0402 	sub.w	r4, ip, #2
 800f2d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f2d8:	1c41      	adds	r1, r0, #1
 800f2da:	4622      	mov	r2, r4
 800f2dc:	42ba      	cmp	r2, r7
 800f2de:	d30a      	bcc.n	800f2f6 <__exponent+0x66>
 800f2e0:	f10d 0209 	add.w	r2, sp, #9
 800f2e4:	eba2 020c 	sub.w	r2, r2, ip
 800f2e8:	42bc      	cmp	r4, r7
 800f2ea:	bf88      	it	hi
 800f2ec:	2200      	movhi	r2, #0
 800f2ee:	4413      	add	r3, r2
 800f2f0:	1a18      	subs	r0, r3, r0
 800f2f2:	b003      	add	sp, #12
 800f2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f2fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f2fe:	e7ed      	b.n	800f2dc <__exponent+0x4c>
 800f300:	2330      	movs	r3, #48	; 0x30
 800f302:	3130      	adds	r1, #48	; 0x30
 800f304:	7083      	strb	r3, [r0, #2]
 800f306:	70c1      	strb	r1, [r0, #3]
 800f308:	1d03      	adds	r3, r0, #4
 800f30a:	e7f1      	b.n	800f2f0 <__exponent+0x60>

0800f30c <_printf_float>:
 800f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f310:	ed2d 8b02 	vpush	{d8}
 800f314:	b08d      	sub	sp, #52	; 0x34
 800f316:	460c      	mov	r4, r1
 800f318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f31c:	4616      	mov	r6, r2
 800f31e:	461f      	mov	r7, r3
 800f320:	4605      	mov	r5, r0
 800f322:	f000 fce7 	bl	800fcf4 <_localeconv_r>
 800f326:	f8d0 a000 	ldr.w	sl, [r0]
 800f32a:	4650      	mov	r0, sl
 800f32c:	f7f0 ffc8 	bl	80002c0 <strlen>
 800f330:	2300      	movs	r3, #0
 800f332:	930a      	str	r3, [sp, #40]	; 0x28
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	9305      	str	r3, [sp, #20]
 800f338:	f8d8 3000 	ldr.w	r3, [r8]
 800f33c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f340:	3307      	adds	r3, #7
 800f342:	f023 0307 	bic.w	r3, r3, #7
 800f346:	f103 0208 	add.w	r2, r3, #8
 800f34a:	f8c8 2000 	str.w	r2, [r8]
 800f34e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f356:	9307      	str	r3, [sp, #28]
 800f358:	f8cd 8018 	str.w	r8, [sp, #24]
 800f35c:	ee08 0a10 	vmov	s16, r0
 800f360:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f368:	4b9e      	ldr	r3, [pc, #632]	; (800f5e4 <_printf_float+0x2d8>)
 800f36a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f36e:	f7f1 fc05 	bl	8000b7c <__aeabi_dcmpun>
 800f372:	bb88      	cbnz	r0, 800f3d8 <_printf_float+0xcc>
 800f374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f378:	4b9a      	ldr	r3, [pc, #616]	; (800f5e4 <_printf_float+0x2d8>)
 800f37a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f37e:	f7f1 fbdf 	bl	8000b40 <__aeabi_dcmple>
 800f382:	bb48      	cbnz	r0, 800f3d8 <_printf_float+0xcc>
 800f384:	2200      	movs	r2, #0
 800f386:	2300      	movs	r3, #0
 800f388:	4640      	mov	r0, r8
 800f38a:	4649      	mov	r1, r9
 800f38c:	f7f1 fbce 	bl	8000b2c <__aeabi_dcmplt>
 800f390:	b110      	cbz	r0, 800f398 <_printf_float+0x8c>
 800f392:	232d      	movs	r3, #45	; 0x2d
 800f394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f398:	4a93      	ldr	r2, [pc, #588]	; (800f5e8 <_printf_float+0x2dc>)
 800f39a:	4b94      	ldr	r3, [pc, #592]	; (800f5ec <_printf_float+0x2e0>)
 800f39c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f3a0:	bf94      	ite	ls
 800f3a2:	4690      	movls	r8, r2
 800f3a4:	4698      	movhi	r8, r3
 800f3a6:	2303      	movs	r3, #3
 800f3a8:	6123      	str	r3, [r4, #16]
 800f3aa:	9b05      	ldr	r3, [sp, #20]
 800f3ac:	f023 0304 	bic.w	r3, r3, #4
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	f04f 0900 	mov.w	r9, #0
 800f3b6:	9700      	str	r7, [sp, #0]
 800f3b8:	4633      	mov	r3, r6
 800f3ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800f3bc:	4621      	mov	r1, r4
 800f3be:	4628      	mov	r0, r5
 800f3c0:	f000 f9da 	bl	800f778 <_printf_common>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	f040 8090 	bne.w	800f4ea <_printf_float+0x1de>
 800f3ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3ce:	b00d      	add	sp, #52	; 0x34
 800f3d0:	ecbd 8b02 	vpop	{d8}
 800f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d8:	4642      	mov	r2, r8
 800f3da:	464b      	mov	r3, r9
 800f3dc:	4640      	mov	r0, r8
 800f3de:	4649      	mov	r1, r9
 800f3e0:	f7f1 fbcc 	bl	8000b7c <__aeabi_dcmpun>
 800f3e4:	b140      	cbz	r0, 800f3f8 <_printf_float+0xec>
 800f3e6:	464b      	mov	r3, r9
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	bfbc      	itt	lt
 800f3ec:	232d      	movlt	r3, #45	; 0x2d
 800f3ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f3f2:	4a7f      	ldr	r2, [pc, #508]	; (800f5f0 <_printf_float+0x2e4>)
 800f3f4:	4b7f      	ldr	r3, [pc, #508]	; (800f5f4 <_printf_float+0x2e8>)
 800f3f6:	e7d1      	b.n	800f39c <_printf_float+0x90>
 800f3f8:	6863      	ldr	r3, [r4, #4]
 800f3fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f3fe:	9206      	str	r2, [sp, #24]
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	d13f      	bne.n	800f484 <_printf_float+0x178>
 800f404:	2306      	movs	r3, #6
 800f406:	6063      	str	r3, [r4, #4]
 800f408:	9b05      	ldr	r3, [sp, #20]
 800f40a:	6861      	ldr	r1, [r4, #4]
 800f40c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f410:	2300      	movs	r3, #0
 800f412:	9303      	str	r3, [sp, #12]
 800f414:	ab0a      	add	r3, sp, #40	; 0x28
 800f416:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f41a:	ab09      	add	r3, sp, #36	; 0x24
 800f41c:	ec49 8b10 	vmov	d0, r8, r9
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	6022      	str	r2, [r4, #0]
 800f424:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f428:	4628      	mov	r0, r5
 800f42a:	f7ff fecf 	bl	800f1cc <__cvt>
 800f42e:	9b06      	ldr	r3, [sp, #24]
 800f430:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f432:	2b47      	cmp	r3, #71	; 0x47
 800f434:	4680      	mov	r8, r0
 800f436:	d108      	bne.n	800f44a <_printf_float+0x13e>
 800f438:	1cc8      	adds	r0, r1, #3
 800f43a:	db02      	blt.n	800f442 <_printf_float+0x136>
 800f43c:	6863      	ldr	r3, [r4, #4]
 800f43e:	4299      	cmp	r1, r3
 800f440:	dd41      	ble.n	800f4c6 <_printf_float+0x1ba>
 800f442:	f1ab 0302 	sub.w	r3, fp, #2
 800f446:	fa5f fb83 	uxtb.w	fp, r3
 800f44a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f44e:	d820      	bhi.n	800f492 <_printf_float+0x186>
 800f450:	3901      	subs	r1, #1
 800f452:	465a      	mov	r2, fp
 800f454:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f458:	9109      	str	r1, [sp, #36]	; 0x24
 800f45a:	f7ff ff19 	bl	800f290 <__exponent>
 800f45e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f460:	1813      	adds	r3, r2, r0
 800f462:	2a01      	cmp	r2, #1
 800f464:	4681      	mov	r9, r0
 800f466:	6123      	str	r3, [r4, #16]
 800f468:	dc02      	bgt.n	800f470 <_printf_float+0x164>
 800f46a:	6822      	ldr	r2, [r4, #0]
 800f46c:	07d2      	lsls	r2, r2, #31
 800f46e:	d501      	bpl.n	800f474 <_printf_float+0x168>
 800f470:	3301      	adds	r3, #1
 800f472:	6123      	str	r3, [r4, #16]
 800f474:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d09c      	beq.n	800f3b6 <_printf_float+0xaa>
 800f47c:	232d      	movs	r3, #45	; 0x2d
 800f47e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f482:	e798      	b.n	800f3b6 <_printf_float+0xaa>
 800f484:	9a06      	ldr	r2, [sp, #24]
 800f486:	2a47      	cmp	r2, #71	; 0x47
 800f488:	d1be      	bne.n	800f408 <_printf_float+0xfc>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1bc      	bne.n	800f408 <_printf_float+0xfc>
 800f48e:	2301      	movs	r3, #1
 800f490:	e7b9      	b.n	800f406 <_printf_float+0xfa>
 800f492:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f496:	d118      	bne.n	800f4ca <_printf_float+0x1be>
 800f498:	2900      	cmp	r1, #0
 800f49a:	6863      	ldr	r3, [r4, #4]
 800f49c:	dd0b      	ble.n	800f4b6 <_printf_float+0x1aa>
 800f49e:	6121      	str	r1, [r4, #16]
 800f4a0:	b913      	cbnz	r3, 800f4a8 <_printf_float+0x19c>
 800f4a2:	6822      	ldr	r2, [r4, #0]
 800f4a4:	07d0      	lsls	r0, r2, #31
 800f4a6:	d502      	bpl.n	800f4ae <_printf_float+0x1a2>
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	440b      	add	r3, r1
 800f4ac:	6123      	str	r3, [r4, #16]
 800f4ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800f4b0:	f04f 0900 	mov.w	r9, #0
 800f4b4:	e7de      	b.n	800f474 <_printf_float+0x168>
 800f4b6:	b913      	cbnz	r3, 800f4be <_printf_float+0x1b2>
 800f4b8:	6822      	ldr	r2, [r4, #0]
 800f4ba:	07d2      	lsls	r2, r2, #31
 800f4bc:	d501      	bpl.n	800f4c2 <_printf_float+0x1b6>
 800f4be:	3302      	adds	r3, #2
 800f4c0:	e7f4      	b.n	800f4ac <_printf_float+0x1a0>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	e7f2      	b.n	800f4ac <_printf_float+0x1a0>
 800f4c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f4ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4cc:	4299      	cmp	r1, r3
 800f4ce:	db05      	blt.n	800f4dc <_printf_float+0x1d0>
 800f4d0:	6823      	ldr	r3, [r4, #0]
 800f4d2:	6121      	str	r1, [r4, #16]
 800f4d4:	07d8      	lsls	r0, r3, #31
 800f4d6:	d5ea      	bpl.n	800f4ae <_printf_float+0x1a2>
 800f4d8:	1c4b      	adds	r3, r1, #1
 800f4da:	e7e7      	b.n	800f4ac <_printf_float+0x1a0>
 800f4dc:	2900      	cmp	r1, #0
 800f4de:	bfd4      	ite	le
 800f4e0:	f1c1 0202 	rsble	r2, r1, #2
 800f4e4:	2201      	movgt	r2, #1
 800f4e6:	4413      	add	r3, r2
 800f4e8:	e7e0      	b.n	800f4ac <_printf_float+0x1a0>
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	055a      	lsls	r2, r3, #21
 800f4ee:	d407      	bmi.n	800f500 <_printf_float+0x1f4>
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	4642      	mov	r2, r8
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b8      	blx	r7
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	d12c      	bne.n	800f558 <_printf_float+0x24c>
 800f4fe:	e764      	b.n	800f3ca <_printf_float+0xbe>
 800f500:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f504:	f240 80e0 	bls.w	800f6c8 <_printf_float+0x3bc>
 800f508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f50c:	2200      	movs	r2, #0
 800f50e:	2300      	movs	r3, #0
 800f510:	f7f1 fb02 	bl	8000b18 <__aeabi_dcmpeq>
 800f514:	2800      	cmp	r0, #0
 800f516:	d034      	beq.n	800f582 <_printf_float+0x276>
 800f518:	4a37      	ldr	r2, [pc, #220]	; (800f5f8 <_printf_float+0x2ec>)
 800f51a:	2301      	movs	r3, #1
 800f51c:	4631      	mov	r1, r6
 800f51e:	4628      	mov	r0, r5
 800f520:	47b8      	blx	r7
 800f522:	3001      	adds	r0, #1
 800f524:	f43f af51 	beq.w	800f3ca <_printf_float+0xbe>
 800f528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f52c:	429a      	cmp	r2, r3
 800f52e:	db02      	blt.n	800f536 <_printf_float+0x22a>
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	07d8      	lsls	r0, r3, #31
 800f534:	d510      	bpl.n	800f558 <_printf_float+0x24c>
 800f536:	ee18 3a10 	vmov	r3, s16
 800f53a:	4652      	mov	r2, sl
 800f53c:	4631      	mov	r1, r6
 800f53e:	4628      	mov	r0, r5
 800f540:	47b8      	blx	r7
 800f542:	3001      	adds	r0, #1
 800f544:	f43f af41 	beq.w	800f3ca <_printf_float+0xbe>
 800f548:	f04f 0800 	mov.w	r8, #0
 800f54c:	f104 091a 	add.w	r9, r4, #26
 800f550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f552:	3b01      	subs	r3, #1
 800f554:	4543      	cmp	r3, r8
 800f556:	dc09      	bgt.n	800f56c <_printf_float+0x260>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	079b      	lsls	r3, r3, #30
 800f55c:	f100 8107 	bmi.w	800f76e <_printf_float+0x462>
 800f560:	68e0      	ldr	r0, [r4, #12]
 800f562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f564:	4298      	cmp	r0, r3
 800f566:	bfb8      	it	lt
 800f568:	4618      	movlt	r0, r3
 800f56a:	e730      	b.n	800f3ce <_printf_float+0xc2>
 800f56c:	2301      	movs	r3, #1
 800f56e:	464a      	mov	r2, r9
 800f570:	4631      	mov	r1, r6
 800f572:	4628      	mov	r0, r5
 800f574:	47b8      	blx	r7
 800f576:	3001      	adds	r0, #1
 800f578:	f43f af27 	beq.w	800f3ca <_printf_float+0xbe>
 800f57c:	f108 0801 	add.w	r8, r8, #1
 800f580:	e7e6      	b.n	800f550 <_printf_float+0x244>
 800f582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f584:	2b00      	cmp	r3, #0
 800f586:	dc39      	bgt.n	800f5fc <_printf_float+0x2f0>
 800f588:	4a1b      	ldr	r2, [pc, #108]	; (800f5f8 <_printf_float+0x2ec>)
 800f58a:	2301      	movs	r3, #1
 800f58c:	4631      	mov	r1, r6
 800f58e:	4628      	mov	r0, r5
 800f590:	47b8      	blx	r7
 800f592:	3001      	adds	r0, #1
 800f594:	f43f af19 	beq.w	800f3ca <_printf_float+0xbe>
 800f598:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f59c:	4313      	orrs	r3, r2
 800f59e:	d102      	bne.n	800f5a6 <_printf_float+0x29a>
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	07d9      	lsls	r1, r3, #31
 800f5a4:	d5d8      	bpl.n	800f558 <_printf_float+0x24c>
 800f5a6:	ee18 3a10 	vmov	r3, s16
 800f5aa:	4652      	mov	r2, sl
 800f5ac:	4631      	mov	r1, r6
 800f5ae:	4628      	mov	r0, r5
 800f5b0:	47b8      	blx	r7
 800f5b2:	3001      	adds	r0, #1
 800f5b4:	f43f af09 	beq.w	800f3ca <_printf_float+0xbe>
 800f5b8:	f04f 0900 	mov.w	r9, #0
 800f5bc:	f104 0a1a 	add.w	sl, r4, #26
 800f5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5c2:	425b      	negs	r3, r3
 800f5c4:	454b      	cmp	r3, r9
 800f5c6:	dc01      	bgt.n	800f5cc <_printf_float+0x2c0>
 800f5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5ca:	e792      	b.n	800f4f2 <_printf_float+0x1e6>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	4652      	mov	r2, sl
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	47b8      	blx	r7
 800f5d6:	3001      	adds	r0, #1
 800f5d8:	f43f aef7 	beq.w	800f3ca <_printf_float+0xbe>
 800f5dc:	f109 0901 	add.w	r9, r9, #1
 800f5e0:	e7ee      	b.n	800f5c0 <_printf_float+0x2b4>
 800f5e2:	bf00      	nop
 800f5e4:	7fefffff 	.word	0x7fefffff
 800f5e8:	0801251c 	.word	0x0801251c
 800f5ec:	08012520 	.word	0x08012520
 800f5f0:	08012524 	.word	0x08012524
 800f5f4:	08012528 	.word	0x08012528
 800f5f8:	0801252c 	.word	0x0801252c
 800f5fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f600:	429a      	cmp	r2, r3
 800f602:	bfa8      	it	ge
 800f604:	461a      	movge	r2, r3
 800f606:	2a00      	cmp	r2, #0
 800f608:	4691      	mov	r9, r2
 800f60a:	dc37      	bgt.n	800f67c <_printf_float+0x370>
 800f60c:	f04f 0b00 	mov.w	fp, #0
 800f610:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f614:	f104 021a 	add.w	r2, r4, #26
 800f618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f61a:	9305      	str	r3, [sp, #20]
 800f61c:	eba3 0309 	sub.w	r3, r3, r9
 800f620:	455b      	cmp	r3, fp
 800f622:	dc33      	bgt.n	800f68c <_printf_float+0x380>
 800f624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f628:	429a      	cmp	r2, r3
 800f62a:	db3b      	blt.n	800f6a4 <_printf_float+0x398>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	07da      	lsls	r2, r3, #31
 800f630:	d438      	bmi.n	800f6a4 <_printf_float+0x398>
 800f632:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f636:	eba2 0903 	sub.w	r9, r2, r3
 800f63a:	9b05      	ldr	r3, [sp, #20]
 800f63c:	1ad2      	subs	r2, r2, r3
 800f63e:	4591      	cmp	r9, r2
 800f640:	bfa8      	it	ge
 800f642:	4691      	movge	r9, r2
 800f644:	f1b9 0f00 	cmp.w	r9, #0
 800f648:	dc35      	bgt.n	800f6b6 <_printf_float+0x3aa>
 800f64a:	f04f 0800 	mov.w	r8, #0
 800f64e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f652:	f104 0a1a 	add.w	sl, r4, #26
 800f656:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f65a:	1a9b      	subs	r3, r3, r2
 800f65c:	eba3 0309 	sub.w	r3, r3, r9
 800f660:	4543      	cmp	r3, r8
 800f662:	f77f af79 	ble.w	800f558 <_printf_float+0x24c>
 800f666:	2301      	movs	r3, #1
 800f668:	4652      	mov	r2, sl
 800f66a:	4631      	mov	r1, r6
 800f66c:	4628      	mov	r0, r5
 800f66e:	47b8      	blx	r7
 800f670:	3001      	adds	r0, #1
 800f672:	f43f aeaa 	beq.w	800f3ca <_printf_float+0xbe>
 800f676:	f108 0801 	add.w	r8, r8, #1
 800f67a:	e7ec      	b.n	800f656 <_printf_float+0x34a>
 800f67c:	4613      	mov	r3, r2
 800f67e:	4631      	mov	r1, r6
 800f680:	4642      	mov	r2, r8
 800f682:	4628      	mov	r0, r5
 800f684:	47b8      	blx	r7
 800f686:	3001      	adds	r0, #1
 800f688:	d1c0      	bne.n	800f60c <_printf_float+0x300>
 800f68a:	e69e      	b.n	800f3ca <_printf_float+0xbe>
 800f68c:	2301      	movs	r3, #1
 800f68e:	4631      	mov	r1, r6
 800f690:	4628      	mov	r0, r5
 800f692:	9205      	str	r2, [sp, #20]
 800f694:	47b8      	blx	r7
 800f696:	3001      	adds	r0, #1
 800f698:	f43f ae97 	beq.w	800f3ca <_printf_float+0xbe>
 800f69c:	9a05      	ldr	r2, [sp, #20]
 800f69e:	f10b 0b01 	add.w	fp, fp, #1
 800f6a2:	e7b9      	b.n	800f618 <_printf_float+0x30c>
 800f6a4:	ee18 3a10 	vmov	r3, s16
 800f6a8:	4652      	mov	r2, sl
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	47b8      	blx	r7
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d1be      	bne.n	800f632 <_printf_float+0x326>
 800f6b4:	e689      	b.n	800f3ca <_printf_float+0xbe>
 800f6b6:	9a05      	ldr	r2, [sp, #20]
 800f6b8:	464b      	mov	r3, r9
 800f6ba:	4442      	add	r2, r8
 800f6bc:	4631      	mov	r1, r6
 800f6be:	4628      	mov	r0, r5
 800f6c0:	47b8      	blx	r7
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	d1c1      	bne.n	800f64a <_printf_float+0x33e>
 800f6c6:	e680      	b.n	800f3ca <_printf_float+0xbe>
 800f6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6ca:	2a01      	cmp	r2, #1
 800f6cc:	dc01      	bgt.n	800f6d2 <_printf_float+0x3c6>
 800f6ce:	07db      	lsls	r3, r3, #31
 800f6d0:	d53a      	bpl.n	800f748 <_printf_float+0x43c>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4642      	mov	r2, r8
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	4628      	mov	r0, r5
 800f6da:	47b8      	blx	r7
 800f6dc:	3001      	adds	r0, #1
 800f6de:	f43f ae74 	beq.w	800f3ca <_printf_float+0xbe>
 800f6e2:	ee18 3a10 	vmov	r3, s16
 800f6e6:	4652      	mov	r2, sl
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	47b8      	blx	r7
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	f43f ae6b 	beq.w	800f3ca <_printf_float+0xbe>
 800f6f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f700:	f7f1 fa0a 	bl	8000b18 <__aeabi_dcmpeq>
 800f704:	b9d8      	cbnz	r0, 800f73e <_printf_float+0x432>
 800f706:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f70a:	f108 0201 	add.w	r2, r8, #1
 800f70e:	4631      	mov	r1, r6
 800f710:	4628      	mov	r0, r5
 800f712:	47b8      	blx	r7
 800f714:	3001      	adds	r0, #1
 800f716:	d10e      	bne.n	800f736 <_printf_float+0x42a>
 800f718:	e657      	b.n	800f3ca <_printf_float+0xbe>
 800f71a:	2301      	movs	r3, #1
 800f71c:	4652      	mov	r2, sl
 800f71e:	4631      	mov	r1, r6
 800f720:	4628      	mov	r0, r5
 800f722:	47b8      	blx	r7
 800f724:	3001      	adds	r0, #1
 800f726:	f43f ae50 	beq.w	800f3ca <_printf_float+0xbe>
 800f72a:	f108 0801 	add.w	r8, r8, #1
 800f72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f730:	3b01      	subs	r3, #1
 800f732:	4543      	cmp	r3, r8
 800f734:	dcf1      	bgt.n	800f71a <_printf_float+0x40e>
 800f736:	464b      	mov	r3, r9
 800f738:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f73c:	e6da      	b.n	800f4f4 <_printf_float+0x1e8>
 800f73e:	f04f 0800 	mov.w	r8, #0
 800f742:	f104 0a1a 	add.w	sl, r4, #26
 800f746:	e7f2      	b.n	800f72e <_printf_float+0x422>
 800f748:	2301      	movs	r3, #1
 800f74a:	4642      	mov	r2, r8
 800f74c:	e7df      	b.n	800f70e <_printf_float+0x402>
 800f74e:	2301      	movs	r3, #1
 800f750:	464a      	mov	r2, r9
 800f752:	4631      	mov	r1, r6
 800f754:	4628      	mov	r0, r5
 800f756:	47b8      	blx	r7
 800f758:	3001      	adds	r0, #1
 800f75a:	f43f ae36 	beq.w	800f3ca <_printf_float+0xbe>
 800f75e:	f108 0801 	add.w	r8, r8, #1
 800f762:	68e3      	ldr	r3, [r4, #12]
 800f764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f766:	1a5b      	subs	r3, r3, r1
 800f768:	4543      	cmp	r3, r8
 800f76a:	dcf0      	bgt.n	800f74e <_printf_float+0x442>
 800f76c:	e6f8      	b.n	800f560 <_printf_float+0x254>
 800f76e:	f04f 0800 	mov.w	r8, #0
 800f772:	f104 0919 	add.w	r9, r4, #25
 800f776:	e7f4      	b.n	800f762 <_printf_float+0x456>

0800f778 <_printf_common>:
 800f778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f77c:	4616      	mov	r6, r2
 800f77e:	4699      	mov	r9, r3
 800f780:	688a      	ldr	r2, [r1, #8]
 800f782:	690b      	ldr	r3, [r1, #16]
 800f784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f788:	4293      	cmp	r3, r2
 800f78a:	bfb8      	it	lt
 800f78c:	4613      	movlt	r3, r2
 800f78e:	6033      	str	r3, [r6, #0]
 800f790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f794:	4607      	mov	r7, r0
 800f796:	460c      	mov	r4, r1
 800f798:	b10a      	cbz	r2, 800f79e <_printf_common+0x26>
 800f79a:	3301      	adds	r3, #1
 800f79c:	6033      	str	r3, [r6, #0]
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	0699      	lsls	r1, r3, #26
 800f7a2:	bf42      	ittt	mi
 800f7a4:	6833      	ldrmi	r3, [r6, #0]
 800f7a6:	3302      	addmi	r3, #2
 800f7a8:	6033      	strmi	r3, [r6, #0]
 800f7aa:	6825      	ldr	r5, [r4, #0]
 800f7ac:	f015 0506 	ands.w	r5, r5, #6
 800f7b0:	d106      	bne.n	800f7c0 <_printf_common+0x48>
 800f7b2:	f104 0a19 	add.w	sl, r4, #25
 800f7b6:	68e3      	ldr	r3, [r4, #12]
 800f7b8:	6832      	ldr	r2, [r6, #0]
 800f7ba:	1a9b      	subs	r3, r3, r2
 800f7bc:	42ab      	cmp	r3, r5
 800f7be:	dc26      	bgt.n	800f80e <_printf_common+0x96>
 800f7c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7c4:	1e13      	subs	r3, r2, #0
 800f7c6:	6822      	ldr	r2, [r4, #0]
 800f7c8:	bf18      	it	ne
 800f7ca:	2301      	movne	r3, #1
 800f7cc:	0692      	lsls	r2, r2, #26
 800f7ce:	d42b      	bmi.n	800f828 <_printf_common+0xb0>
 800f7d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7d4:	4649      	mov	r1, r9
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	47c0      	blx	r8
 800f7da:	3001      	adds	r0, #1
 800f7dc:	d01e      	beq.n	800f81c <_printf_common+0xa4>
 800f7de:	6823      	ldr	r3, [r4, #0]
 800f7e0:	6922      	ldr	r2, [r4, #16]
 800f7e2:	f003 0306 	and.w	r3, r3, #6
 800f7e6:	2b04      	cmp	r3, #4
 800f7e8:	bf02      	ittt	eq
 800f7ea:	68e5      	ldreq	r5, [r4, #12]
 800f7ec:	6833      	ldreq	r3, [r6, #0]
 800f7ee:	1aed      	subeq	r5, r5, r3
 800f7f0:	68a3      	ldr	r3, [r4, #8]
 800f7f2:	bf0c      	ite	eq
 800f7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7f8:	2500      	movne	r5, #0
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	bfc4      	itt	gt
 800f7fe:	1a9b      	subgt	r3, r3, r2
 800f800:	18ed      	addgt	r5, r5, r3
 800f802:	2600      	movs	r6, #0
 800f804:	341a      	adds	r4, #26
 800f806:	42b5      	cmp	r5, r6
 800f808:	d11a      	bne.n	800f840 <_printf_common+0xc8>
 800f80a:	2000      	movs	r0, #0
 800f80c:	e008      	b.n	800f820 <_printf_common+0xa8>
 800f80e:	2301      	movs	r3, #1
 800f810:	4652      	mov	r2, sl
 800f812:	4649      	mov	r1, r9
 800f814:	4638      	mov	r0, r7
 800f816:	47c0      	blx	r8
 800f818:	3001      	adds	r0, #1
 800f81a:	d103      	bne.n	800f824 <_printf_common+0xac>
 800f81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f824:	3501      	adds	r5, #1
 800f826:	e7c6      	b.n	800f7b6 <_printf_common+0x3e>
 800f828:	18e1      	adds	r1, r4, r3
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	2030      	movs	r0, #48	; 0x30
 800f82e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f832:	4422      	add	r2, r4
 800f834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f83c:	3302      	adds	r3, #2
 800f83e:	e7c7      	b.n	800f7d0 <_printf_common+0x58>
 800f840:	2301      	movs	r3, #1
 800f842:	4622      	mov	r2, r4
 800f844:	4649      	mov	r1, r9
 800f846:	4638      	mov	r0, r7
 800f848:	47c0      	blx	r8
 800f84a:	3001      	adds	r0, #1
 800f84c:	d0e6      	beq.n	800f81c <_printf_common+0xa4>
 800f84e:	3601      	adds	r6, #1
 800f850:	e7d9      	b.n	800f806 <_printf_common+0x8e>
	...

0800f854 <_printf_i>:
 800f854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f858:	7e0f      	ldrb	r7, [r1, #24]
 800f85a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f85c:	2f78      	cmp	r7, #120	; 0x78
 800f85e:	4691      	mov	r9, r2
 800f860:	4680      	mov	r8, r0
 800f862:	460c      	mov	r4, r1
 800f864:	469a      	mov	sl, r3
 800f866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f86a:	d807      	bhi.n	800f87c <_printf_i+0x28>
 800f86c:	2f62      	cmp	r7, #98	; 0x62
 800f86e:	d80a      	bhi.n	800f886 <_printf_i+0x32>
 800f870:	2f00      	cmp	r7, #0
 800f872:	f000 80d4 	beq.w	800fa1e <_printf_i+0x1ca>
 800f876:	2f58      	cmp	r7, #88	; 0x58
 800f878:	f000 80c0 	beq.w	800f9fc <_printf_i+0x1a8>
 800f87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f884:	e03a      	b.n	800f8fc <_printf_i+0xa8>
 800f886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f88a:	2b15      	cmp	r3, #21
 800f88c:	d8f6      	bhi.n	800f87c <_printf_i+0x28>
 800f88e:	a101      	add	r1, pc, #4	; (adr r1, 800f894 <_printf_i+0x40>)
 800f890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f894:	0800f8ed 	.word	0x0800f8ed
 800f898:	0800f901 	.word	0x0800f901
 800f89c:	0800f87d 	.word	0x0800f87d
 800f8a0:	0800f87d 	.word	0x0800f87d
 800f8a4:	0800f87d 	.word	0x0800f87d
 800f8a8:	0800f87d 	.word	0x0800f87d
 800f8ac:	0800f901 	.word	0x0800f901
 800f8b0:	0800f87d 	.word	0x0800f87d
 800f8b4:	0800f87d 	.word	0x0800f87d
 800f8b8:	0800f87d 	.word	0x0800f87d
 800f8bc:	0800f87d 	.word	0x0800f87d
 800f8c0:	0800fa05 	.word	0x0800fa05
 800f8c4:	0800f92d 	.word	0x0800f92d
 800f8c8:	0800f9bf 	.word	0x0800f9bf
 800f8cc:	0800f87d 	.word	0x0800f87d
 800f8d0:	0800f87d 	.word	0x0800f87d
 800f8d4:	0800fa27 	.word	0x0800fa27
 800f8d8:	0800f87d 	.word	0x0800f87d
 800f8dc:	0800f92d 	.word	0x0800f92d
 800f8e0:	0800f87d 	.word	0x0800f87d
 800f8e4:	0800f87d 	.word	0x0800f87d
 800f8e8:	0800f9c7 	.word	0x0800f9c7
 800f8ec:	682b      	ldr	r3, [r5, #0]
 800f8ee:	1d1a      	adds	r2, r3, #4
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	602a      	str	r2, [r5, #0]
 800f8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e09f      	b.n	800fa40 <_printf_i+0x1ec>
 800f900:	6820      	ldr	r0, [r4, #0]
 800f902:	682b      	ldr	r3, [r5, #0]
 800f904:	0607      	lsls	r7, r0, #24
 800f906:	f103 0104 	add.w	r1, r3, #4
 800f90a:	6029      	str	r1, [r5, #0]
 800f90c:	d501      	bpl.n	800f912 <_printf_i+0xbe>
 800f90e:	681e      	ldr	r6, [r3, #0]
 800f910:	e003      	b.n	800f91a <_printf_i+0xc6>
 800f912:	0646      	lsls	r6, r0, #25
 800f914:	d5fb      	bpl.n	800f90e <_printf_i+0xba>
 800f916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f91a:	2e00      	cmp	r6, #0
 800f91c:	da03      	bge.n	800f926 <_printf_i+0xd2>
 800f91e:	232d      	movs	r3, #45	; 0x2d
 800f920:	4276      	negs	r6, r6
 800f922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f926:	485a      	ldr	r0, [pc, #360]	; (800fa90 <_printf_i+0x23c>)
 800f928:	230a      	movs	r3, #10
 800f92a:	e012      	b.n	800f952 <_printf_i+0xfe>
 800f92c:	682b      	ldr	r3, [r5, #0]
 800f92e:	6820      	ldr	r0, [r4, #0]
 800f930:	1d19      	adds	r1, r3, #4
 800f932:	6029      	str	r1, [r5, #0]
 800f934:	0605      	lsls	r5, r0, #24
 800f936:	d501      	bpl.n	800f93c <_printf_i+0xe8>
 800f938:	681e      	ldr	r6, [r3, #0]
 800f93a:	e002      	b.n	800f942 <_printf_i+0xee>
 800f93c:	0641      	lsls	r1, r0, #25
 800f93e:	d5fb      	bpl.n	800f938 <_printf_i+0xe4>
 800f940:	881e      	ldrh	r6, [r3, #0]
 800f942:	4853      	ldr	r0, [pc, #332]	; (800fa90 <_printf_i+0x23c>)
 800f944:	2f6f      	cmp	r7, #111	; 0x6f
 800f946:	bf0c      	ite	eq
 800f948:	2308      	moveq	r3, #8
 800f94a:	230a      	movne	r3, #10
 800f94c:	2100      	movs	r1, #0
 800f94e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f952:	6865      	ldr	r5, [r4, #4]
 800f954:	60a5      	str	r5, [r4, #8]
 800f956:	2d00      	cmp	r5, #0
 800f958:	bfa2      	ittt	ge
 800f95a:	6821      	ldrge	r1, [r4, #0]
 800f95c:	f021 0104 	bicge.w	r1, r1, #4
 800f960:	6021      	strge	r1, [r4, #0]
 800f962:	b90e      	cbnz	r6, 800f968 <_printf_i+0x114>
 800f964:	2d00      	cmp	r5, #0
 800f966:	d04b      	beq.n	800fa00 <_printf_i+0x1ac>
 800f968:	4615      	mov	r5, r2
 800f96a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f96e:	fb03 6711 	mls	r7, r3, r1, r6
 800f972:	5dc7      	ldrb	r7, [r0, r7]
 800f974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f978:	4637      	mov	r7, r6
 800f97a:	42bb      	cmp	r3, r7
 800f97c:	460e      	mov	r6, r1
 800f97e:	d9f4      	bls.n	800f96a <_printf_i+0x116>
 800f980:	2b08      	cmp	r3, #8
 800f982:	d10b      	bne.n	800f99c <_printf_i+0x148>
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	07de      	lsls	r6, r3, #31
 800f988:	d508      	bpl.n	800f99c <_printf_i+0x148>
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	6861      	ldr	r1, [r4, #4]
 800f98e:	4299      	cmp	r1, r3
 800f990:	bfde      	ittt	le
 800f992:	2330      	movle	r3, #48	; 0x30
 800f994:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f998:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f99c:	1b52      	subs	r2, r2, r5
 800f99e:	6122      	str	r2, [r4, #16]
 800f9a0:	f8cd a000 	str.w	sl, [sp]
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	aa03      	add	r2, sp, #12
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4640      	mov	r0, r8
 800f9ac:	f7ff fee4 	bl	800f778 <_printf_common>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d14a      	bne.n	800fa4a <_printf_i+0x1f6>
 800f9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9b8:	b004      	add	sp, #16
 800f9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	f043 0320 	orr.w	r3, r3, #32
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	4833      	ldr	r0, [pc, #204]	; (800fa94 <_printf_i+0x240>)
 800f9c8:	2778      	movs	r7, #120	; 0x78
 800f9ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	6829      	ldr	r1, [r5, #0]
 800f9d2:	061f      	lsls	r7, r3, #24
 800f9d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f9d8:	d402      	bmi.n	800f9e0 <_printf_i+0x18c>
 800f9da:	065f      	lsls	r7, r3, #25
 800f9dc:	bf48      	it	mi
 800f9de:	b2b6      	uxthmi	r6, r6
 800f9e0:	07df      	lsls	r7, r3, #31
 800f9e2:	bf48      	it	mi
 800f9e4:	f043 0320 	orrmi.w	r3, r3, #32
 800f9e8:	6029      	str	r1, [r5, #0]
 800f9ea:	bf48      	it	mi
 800f9ec:	6023      	strmi	r3, [r4, #0]
 800f9ee:	b91e      	cbnz	r6, 800f9f8 <_printf_i+0x1a4>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	f023 0320 	bic.w	r3, r3, #32
 800f9f6:	6023      	str	r3, [r4, #0]
 800f9f8:	2310      	movs	r3, #16
 800f9fa:	e7a7      	b.n	800f94c <_printf_i+0xf8>
 800f9fc:	4824      	ldr	r0, [pc, #144]	; (800fa90 <_printf_i+0x23c>)
 800f9fe:	e7e4      	b.n	800f9ca <_printf_i+0x176>
 800fa00:	4615      	mov	r5, r2
 800fa02:	e7bd      	b.n	800f980 <_printf_i+0x12c>
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	6826      	ldr	r6, [r4, #0]
 800fa08:	6961      	ldr	r1, [r4, #20]
 800fa0a:	1d18      	adds	r0, r3, #4
 800fa0c:	6028      	str	r0, [r5, #0]
 800fa0e:	0635      	lsls	r5, r6, #24
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	d501      	bpl.n	800fa18 <_printf_i+0x1c4>
 800fa14:	6019      	str	r1, [r3, #0]
 800fa16:	e002      	b.n	800fa1e <_printf_i+0x1ca>
 800fa18:	0670      	lsls	r0, r6, #25
 800fa1a:	d5fb      	bpl.n	800fa14 <_printf_i+0x1c0>
 800fa1c:	8019      	strh	r1, [r3, #0]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	4615      	mov	r5, r2
 800fa24:	e7bc      	b.n	800f9a0 <_printf_i+0x14c>
 800fa26:	682b      	ldr	r3, [r5, #0]
 800fa28:	1d1a      	adds	r2, r3, #4
 800fa2a:	602a      	str	r2, [r5, #0]
 800fa2c:	681d      	ldr	r5, [r3, #0]
 800fa2e:	6862      	ldr	r2, [r4, #4]
 800fa30:	2100      	movs	r1, #0
 800fa32:	4628      	mov	r0, r5
 800fa34:	f7f0 fbf4 	bl	8000220 <memchr>
 800fa38:	b108      	cbz	r0, 800fa3e <_printf_i+0x1ea>
 800fa3a:	1b40      	subs	r0, r0, r5
 800fa3c:	6060      	str	r0, [r4, #4]
 800fa3e:	6863      	ldr	r3, [r4, #4]
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	2300      	movs	r3, #0
 800fa44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa48:	e7aa      	b.n	800f9a0 <_printf_i+0x14c>
 800fa4a:	6923      	ldr	r3, [r4, #16]
 800fa4c:	462a      	mov	r2, r5
 800fa4e:	4649      	mov	r1, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	47d0      	blx	sl
 800fa54:	3001      	adds	r0, #1
 800fa56:	d0ad      	beq.n	800f9b4 <_printf_i+0x160>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	079b      	lsls	r3, r3, #30
 800fa5c:	d413      	bmi.n	800fa86 <_printf_i+0x232>
 800fa5e:	68e0      	ldr	r0, [r4, #12]
 800fa60:	9b03      	ldr	r3, [sp, #12]
 800fa62:	4298      	cmp	r0, r3
 800fa64:	bfb8      	it	lt
 800fa66:	4618      	movlt	r0, r3
 800fa68:	e7a6      	b.n	800f9b8 <_printf_i+0x164>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	47d0      	blx	sl
 800fa74:	3001      	adds	r0, #1
 800fa76:	d09d      	beq.n	800f9b4 <_printf_i+0x160>
 800fa78:	3501      	adds	r5, #1
 800fa7a:	68e3      	ldr	r3, [r4, #12]
 800fa7c:	9903      	ldr	r1, [sp, #12]
 800fa7e:	1a5b      	subs	r3, r3, r1
 800fa80:	42ab      	cmp	r3, r5
 800fa82:	dcf2      	bgt.n	800fa6a <_printf_i+0x216>
 800fa84:	e7eb      	b.n	800fa5e <_printf_i+0x20a>
 800fa86:	2500      	movs	r5, #0
 800fa88:	f104 0619 	add.w	r6, r4, #25
 800fa8c:	e7f5      	b.n	800fa7a <_printf_i+0x226>
 800fa8e:	bf00      	nop
 800fa90:	0801252e 	.word	0x0801252e
 800fa94:	0801253f 	.word	0x0801253f

0800fa98 <std>:
 800fa98:	2300      	movs	r3, #0
 800fa9a:	b510      	push	{r4, lr}
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	e9c0 3300 	strd	r3, r3, [r0]
 800faa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800faa6:	6083      	str	r3, [r0, #8]
 800faa8:	8181      	strh	r1, [r0, #12]
 800faaa:	6643      	str	r3, [r0, #100]	; 0x64
 800faac:	81c2      	strh	r2, [r0, #14]
 800faae:	6183      	str	r3, [r0, #24]
 800fab0:	4619      	mov	r1, r3
 800fab2:	2208      	movs	r2, #8
 800fab4:	305c      	adds	r0, #92	; 0x5c
 800fab6:	f000 f914 	bl	800fce2 <memset>
 800faba:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <std+0x58>)
 800fabc:	6263      	str	r3, [r4, #36]	; 0x24
 800fabe:	4b0d      	ldr	r3, [pc, #52]	; (800faf4 <std+0x5c>)
 800fac0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fac2:	4b0d      	ldr	r3, [pc, #52]	; (800faf8 <std+0x60>)
 800fac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fac6:	4b0d      	ldr	r3, [pc, #52]	; (800fafc <std+0x64>)
 800fac8:	6323      	str	r3, [r4, #48]	; 0x30
 800faca:	4b0d      	ldr	r3, [pc, #52]	; (800fb00 <std+0x68>)
 800facc:	6224      	str	r4, [r4, #32]
 800face:	429c      	cmp	r4, r3
 800fad0:	d006      	beq.n	800fae0 <std+0x48>
 800fad2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fad6:	4294      	cmp	r4, r2
 800fad8:	d002      	beq.n	800fae0 <std+0x48>
 800fada:	33d0      	adds	r3, #208	; 0xd0
 800fadc:	429c      	cmp	r4, r3
 800fade:	d105      	bne.n	800faec <std+0x54>
 800fae0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fae8:	f000 b978 	b.w	800fddc <__retarget_lock_init_recursive>
 800faec:	bd10      	pop	{r4, pc}
 800faee:	bf00      	nop
 800faf0:	0800fc5d 	.word	0x0800fc5d
 800faf4:	0800fc7f 	.word	0x0800fc7f
 800faf8:	0800fcb7 	.word	0x0800fcb7
 800fafc:	0800fcdb 	.word	0x0800fcdb
 800fb00:	200018a8 	.word	0x200018a8

0800fb04 <stdio_exit_handler>:
 800fb04:	4a02      	ldr	r2, [pc, #8]	; (800fb10 <stdio_exit_handler+0xc>)
 800fb06:	4903      	ldr	r1, [pc, #12]	; (800fb14 <stdio_exit_handler+0x10>)
 800fb08:	4803      	ldr	r0, [pc, #12]	; (800fb18 <stdio_exit_handler+0x14>)
 800fb0a:	f000 b869 	b.w	800fbe0 <_fwalk_sglue>
 800fb0e:	bf00      	nop
 800fb10:	20000184 	.word	0x20000184
 800fb14:	08011791 	.word	0x08011791
 800fb18:	20000190 	.word	0x20000190

0800fb1c <cleanup_stdio>:
 800fb1c:	6841      	ldr	r1, [r0, #4]
 800fb1e:	4b0c      	ldr	r3, [pc, #48]	; (800fb50 <cleanup_stdio+0x34>)
 800fb20:	4299      	cmp	r1, r3
 800fb22:	b510      	push	{r4, lr}
 800fb24:	4604      	mov	r4, r0
 800fb26:	d001      	beq.n	800fb2c <cleanup_stdio+0x10>
 800fb28:	f001 fe32 	bl	8011790 <_fflush_r>
 800fb2c:	68a1      	ldr	r1, [r4, #8]
 800fb2e:	4b09      	ldr	r3, [pc, #36]	; (800fb54 <cleanup_stdio+0x38>)
 800fb30:	4299      	cmp	r1, r3
 800fb32:	d002      	beq.n	800fb3a <cleanup_stdio+0x1e>
 800fb34:	4620      	mov	r0, r4
 800fb36:	f001 fe2b 	bl	8011790 <_fflush_r>
 800fb3a:	68e1      	ldr	r1, [r4, #12]
 800fb3c:	4b06      	ldr	r3, [pc, #24]	; (800fb58 <cleanup_stdio+0x3c>)
 800fb3e:	4299      	cmp	r1, r3
 800fb40:	d004      	beq.n	800fb4c <cleanup_stdio+0x30>
 800fb42:	4620      	mov	r0, r4
 800fb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb48:	f001 be22 	b.w	8011790 <_fflush_r>
 800fb4c:	bd10      	pop	{r4, pc}
 800fb4e:	bf00      	nop
 800fb50:	200018a8 	.word	0x200018a8
 800fb54:	20001910 	.word	0x20001910
 800fb58:	20001978 	.word	0x20001978

0800fb5c <global_stdio_init.part.0>:
 800fb5c:	b510      	push	{r4, lr}
 800fb5e:	4b0b      	ldr	r3, [pc, #44]	; (800fb8c <global_stdio_init.part.0+0x30>)
 800fb60:	4c0b      	ldr	r4, [pc, #44]	; (800fb90 <global_stdio_init.part.0+0x34>)
 800fb62:	4a0c      	ldr	r2, [pc, #48]	; (800fb94 <global_stdio_init.part.0+0x38>)
 800fb64:	601a      	str	r2, [r3, #0]
 800fb66:	4620      	mov	r0, r4
 800fb68:	2200      	movs	r2, #0
 800fb6a:	2104      	movs	r1, #4
 800fb6c:	f7ff ff94 	bl	800fa98 <std>
 800fb70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fb74:	2201      	movs	r2, #1
 800fb76:	2109      	movs	r1, #9
 800fb78:	f7ff ff8e 	bl	800fa98 <std>
 800fb7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fb80:	2202      	movs	r2, #2
 800fb82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb86:	2112      	movs	r1, #18
 800fb88:	f7ff bf86 	b.w	800fa98 <std>
 800fb8c:	200019e0 	.word	0x200019e0
 800fb90:	200018a8 	.word	0x200018a8
 800fb94:	0800fb05 	.word	0x0800fb05

0800fb98 <__sfp_lock_acquire>:
 800fb98:	4801      	ldr	r0, [pc, #4]	; (800fba0 <__sfp_lock_acquire+0x8>)
 800fb9a:	f000 b920 	b.w	800fdde <__retarget_lock_acquire_recursive>
 800fb9e:	bf00      	nop
 800fba0:	200019e9 	.word	0x200019e9

0800fba4 <__sfp_lock_release>:
 800fba4:	4801      	ldr	r0, [pc, #4]	; (800fbac <__sfp_lock_release+0x8>)
 800fba6:	f000 b91b 	b.w	800fde0 <__retarget_lock_release_recursive>
 800fbaa:	bf00      	nop
 800fbac:	200019e9 	.word	0x200019e9

0800fbb0 <__sinit>:
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	f7ff fff0 	bl	800fb98 <__sfp_lock_acquire>
 800fbb8:	6a23      	ldr	r3, [r4, #32]
 800fbba:	b11b      	cbz	r3, 800fbc4 <__sinit+0x14>
 800fbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbc0:	f7ff bff0 	b.w	800fba4 <__sfp_lock_release>
 800fbc4:	4b04      	ldr	r3, [pc, #16]	; (800fbd8 <__sinit+0x28>)
 800fbc6:	6223      	str	r3, [r4, #32]
 800fbc8:	4b04      	ldr	r3, [pc, #16]	; (800fbdc <__sinit+0x2c>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1f5      	bne.n	800fbbc <__sinit+0xc>
 800fbd0:	f7ff ffc4 	bl	800fb5c <global_stdio_init.part.0>
 800fbd4:	e7f2      	b.n	800fbbc <__sinit+0xc>
 800fbd6:	bf00      	nop
 800fbd8:	0800fb1d 	.word	0x0800fb1d
 800fbdc:	200019e0 	.word	0x200019e0

0800fbe0 <_fwalk_sglue>:
 800fbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe4:	4607      	mov	r7, r0
 800fbe6:	4688      	mov	r8, r1
 800fbe8:	4614      	mov	r4, r2
 800fbea:	2600      	movs	r6, #0
 800fbec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbf0:	f1b9 0901 	subs.w	r9, r9, #1
 800fbf4:	d505      	bpl.n	800fc02 <_fwalk_sglue+0x22>
 800fbf6:	6824      	ldr	r4, [r4, #0]
 800fbf8:	2c00      	cmp	r4, #0
 800fbfa:	d1f7      	bne.n	800fbec <_fwalk_sglue+0xc>
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc02:	89ab      	ldrh	r3, [r5, #12]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d907      	bls.n	800fc18 <_fwalk_sglue+0x38>
 800fc08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	d003      	beq.n	800fc18 <_fwalk_sglue+0x38>
 800fc10:	4629      	mov	r1, r5
 800fc12:	4638      	mov	r0, r7
 800fc14:	47c0      	blx	r8
 800fc16:	4306      	orrs	r6, r0
 800fc18:	3568      	adds	r5, #104	; 0x68
 800fc1a:	e7e9      	b.n	800fbf0 <_fwalk_sglue+0x10>

0800fc1c <siprintf>:
 800fc1c:	b40e      	push	{r1, r2, r3}
 800fc1e:	b500      	push	{lr}
 800fc20:	b09c      	sub	sp, #112	; 0x70
 800fc22:	ab1d      	add	r3, sp, #116	; 0x74
 800fc24:	9002      	str	r0, [sp, #8]
 800fc26:	9006      	str	r0, [sp, #24]
 800fc28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc2c:	4809      	ldr	r0, [pc, #36]	; (800fc54 <siprintf+0x38>)
 800fc2e:	9107      	str	r1, [sp, #28]
 800fc30:	9104      	str	r1, [sp, #16]
 800fc32:	4909      	ldr	r1, [pc, #36]	; (800fc58 <siprintf+0x3c>)
 800fc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc38:	9105      	str	r1, [sp, #20]
 800fc3a:	6800      	ldr	r0, [r0, #0]
 800fc3c:	9301      	str	r3, [sp, #4]
 800fc3e:	a902      	add	r1, sp, #8
 800fc40:	f001 fc22 	bl	8011488 <_svfiprintf_r>
 800fc44:	9b02      	ldr	r3, [sp, #8]
 800fc46:	2200      	movs	r2, #0
 800fc48:	701a      	strb	r2, [r3, #0]
 800fc4a:	b01c      	add	sp, #112	; 0x70
 800fc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc50:	b003      	add	sp, #12
 800fc52:	4770      	bx	lr
 800fc54:	200001dc 	.word	0x200001dc
 800fc58:	ffff0208 	.word	0xffff0208

0800fc5c <__sread>:
 800fc5c:	b510      	push	{r4, lr}
 800fc5e:	460c      	mov	r4, r1
 800fc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc64:	f000 f86c 	bl	800fd40 <_read_r>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	bfab      	itete	ge
 800fc6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc6e:	89a3      	ldrhlt	r3, [r4, #12]
 800fc70:	181b      	addge	r3, r3, r0
 800fc72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc76:	bfac      	ite	ge
 800fc78:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc7a:	81a3      	strhlt	r3, [r4, #12]
 800fc7c:	bd10      	pop	{r4, pc}

0800fc7e <__swrite>:
 800fc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc82:	461f      	mov	r7, r3
 800fc84:	898b      	ldrh	r3, [r1, #12]
 800fc86:	05db      	lsls	r3, r3, #23
 800fc88:	4605      	mov	r5, r0
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	4616      	mov	r6, r2
 800fc8e:	d505      	bpl.n	800fc9c <__swrite+0x1e>
 800fc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc94:	2302      	movs	r3, #2
 800fc96:	2200      	movs	r2, #0
 800fc98:	f000 f840 	bl	800fd1c <_lseek_r>
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	4632      	mov	r2, r6
 800fcaa:	463b      	mov	r3, r7
 800fcac:	4628      	mov	r0, r5
 800fcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb2:	f000 b857 	b.w	800fd64 <_write_r>

0800fcb6 <__sseek>:
 800fcb6:	b510      	push	{r4, lr}
 800fcb8:	460c      	mov	r4, r1
 800fcba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcbe:	f000 f82d 	bl	800fd1c <_lseek_r>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	bf15      	itete	ne
 800fcc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcd2:	81a3      	strheq	r3, [r4, #12]
 800fcd4:	bf18      	it	ne
 800fcd6:	81a3      	strhne	r3, [r4, #12]
 800fcd8:	bd10      	pop	{r4, pc}

0800fcda <__sclose>:
 800fcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcde:	f000 b80d 	b.w	800fcfc <_close_r>

0800fce2 <memset>:
 800fce2:	4402      	add	r2, r0
 800fce4:	4603      	mov	r3, r0
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d100      	bne.n	800fcec <memset+0xa>
 800fcea:	4770      	bx	lr
 800fcec:	f803 1b01 	strb.w	r1, [r3], #1
 800fcf0:	e7f9      	b.n	800fce6 <memset+0x4>
	...

0800fcf4 <_localeconv_r>:
 800fcf4:	4800      	ldr	r0, [pc, #0]	; (800fcf8 <_localeconv_r+0x4>)
 800fcf6:	4770      	bx	lr
 800fcf8:	200002d0 	.word	0x200002d0

0800fcfc <_close_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d06      	ldr	r5, [pc, #24]	; (800fd18 <_close_r+0x1c>)
 800fd00:	2300      	movs	r3, #0
 800fd02:	4604      	mov	r4, r0
 800fd04:	4608      	mov	r0, r1
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	f7f2 f935 	bl	8001f76 <_close>
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	d102      	bne.n	800fd16 <_close_r+0x1a>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	b103      	cbz	r3, 800fd16 <_close_r+0x1a>
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	200019e4 	.word	0x200019e4

0800fd1c <_lseek_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4d07      	ldr	r5, [pc, #28]	; (800fd3c <_lseek_r+0x20>)
 800fd20:	4604      	mov	r4, r0
 800fd22:	4608      	mov	r0, r1
 800fd24:	4611      	mov	r1, r2
 800fd26:	2200      	movs	r2, #0
 800fd28:	602a      	str	r2, [r5, #0]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	f7f2 f94a 	bl	8001fc4 <_lseek>
 800fd30:	1c43      	adds	r3, r0, #1
 800fd32:	d102      	bne.n	800fd3a <_lseek_r+0x1e>
 800fd34:	682b      	ldr	r3, [r5, #0]
 800fd36:	b103      	cbz	r3, 800fd3a <_lseek_r+0x1e>
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	bd38      	pop	{r3, r4, r5, pc}
 800fd3c:	200019e4 	.word	0x200019e4

0800fd40 <_read_r>:
 800fd40:	b538      	push	{r3, r4, r5, lr}
 800fd42:	4d07      	ldr	r5, [pc, #28]	; (800fd60 <_read_r+0x20>)
 800fd44:	4604      	mov	r4, r0
 800fd46:	4608      	mov	r0, r1
 800fd48:	4611      	mov	r1, r2
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	602a      	str	r2, [r5, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	f7f2 f8d8 	bl	8001f04 <_read>
 800fd54:	1c43      	adds	r3, r0, #1
 800fd56:	d102      	bne.n	800fd5e <_read_r+0x1e>
 800fd58:	682b      	ldr	r3, [r5, #0]
 800fd5a:	b103      	cbz	r3, 800fd5e <_read_r+0x1e>
 800fd5c:	6023      	str	r3, [r4, #0]
 800fd5e:	bd38      	pop	{r3, r4, r5, pc}
 800fd60:	200019e4 	.word	0x200019e4

0800fd64 <_write_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4d07      	ldr	r5, [pc, #28]	; (800fd84 <_write_r+0x20>)
 800fd68:	4604      	mov	r4, r0
 800fd6a:	4608      	mov	r0, r1
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	2200      	movs	r2, #0
 800fd70:	602a      	str	r2, [r5, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	f7f2 f8e3 	bl	8001f3e <_write>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	d102      	bne.n	800fd82 <_write_r+0x1e>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	b103      	cbz	r3, 800fd82 <_write_r+0x1e>
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	bd38      	pop	{r3, r4, r5, pc}
 800fd84:	200019e4 	.word	0x200019e4

0800fd88 <__errno>:
 800fd88:	4b01      	ldr	r3, [pc, #4]	; (800fd90 <__errno+0x8>)
 800fd8a:	6818      	ldr	r0, [r3, #0]
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	200001dc 	.word	0x200001dc

0800fd94 <__libc_init_array>:
 800fd94:	b570      	push	{r4, r5, r6, lr}
 800fd96:	4d0d      	ldr	r5, [pc, #52]	; (800fdcc <__libc_init_array+0x38>)
 800fd98:	4c0d      	ldr	r4, [pc, #52]	; (800fdd0 <__libc_init_array+0x3c>)
 800fd9a:	1b64      	subs	r4, r4, r5
 800fd9c:	10a4      	asrs	r4, r4, #2
 800fd9e:	2600      	movs	r6, #0
 800fda0:	42a6      	cmp	r6, r4
 800fda2:	d109      	bne.n	800fdb8 <__libc_init_array+0x24>
 800fda4:	4d0b      	ldr	r5, [pc, #44]	; (800fdd4 <__libc_init_array+0x40>)
 800fda6:	4c0c      	ldr	r4, [pc, #48]	; (800fdd8 <__libc_init_array+0x44>)
 800fda8:	f002 fb0c 	bl	80123c4 <_init>
 800fdac:	1b64      	subs	r4, r4, r5
 800fdae:	10a4      	asrs	r4, r4, #2
 800fdb0:	2600      	movs	r6, #0
 800fdb2:	42a6      	cmp	r6, r4
 800fdb4:	d105      	bne.n	800fdc2 <__libc_init_array+0x2e>
 800fdb6:	bd70      	pop	{r4, r5, r6, pc}
 800fdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdbc:	4798      	blx	r3
 800fdbe:	3601      	adds	r6, #1
 800fdc0:	e7ee      	b.n	800fda0 <__libc_init_array+0xc>
 800fdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdc6:	4798      	blx	r3
 800fdc8:	3601      	adds	r6, #1
 800fdca:	e7f2      	b.n	800fdb2 <__libc_init_array+0x1e>
 800fdcc:	08012908 	.word	0x08012908
 800fdd0:	08012908 	.word	0x08012908
 800fdd4:	08012908 	.word	0x08012908
 800fdd8:	0801290c 	.word	0x0801290c

0800fddc <__retarget_lock_init_recursive>:
 800fddc:	4770      	bx	lr

0800fdde <__retarget_lock_acquire_recursive>:
 800fdde:	4770      	bx	lr

0800fde0 <__retarget_lock_release_recursive>:
 800fde0:	4770      	bx	lr

0800fde2 <quorem>:
 800fde2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde6:	6903      	ldr	r3, [r0, #16]
 800fde8:	690c      	ldr	r4, [r1, #16]
 800fdea:	42a3      	cmp	r3, r4
 800fdec:	4607      	mov	r7, r0
 800fdee:	db7e      	blt.n	800feee <quorem+0x10c>
 800fdf0:	3c01      	subs	r4, #1
 800fdf2:	f101 0814 	add.w	r8, r1, #20
 800fdf6:	f100 0514 	add.w	r5, r0, #20
 800fdfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe14:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe18:	d331      	bcc.n	800fe7e <quorem+0x9c>
 800fe1a:	f04f 0e00 	mov.w	lr, #0
 800fe1e:	4640      	mov	r0, r8
 800fe20:	46ac      	mov	ip, r5
 800fe22:	46f2      	mov	sl, lr
 800fe24:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe28:	b293      	uxth	r3, r2
 800fe2a:	fb06 e303 	mla	r3, r6, r3, lr
 800fe2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe32:	0c1a      	lsrs	r2, r3, #16
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	ebaa 0303 	sub.w	r3, sl, r3
 800fe3a:	f8dc a000 	ldr.w	sl, [ip]
 800fe3e:	fa13 f38a 	uxtah	r3, r3, sl
 800fe42:	fb06 220e 	mla	r2, r6, lr, r2
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	9b00      	ldr	r3, [sp, #0]
 800fe4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe4e:	b292      	uxth	r2, r2
 800fe50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe58:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe5c:	4581      	cmp	r9, r0
 800fe5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe62:	f84c 3b04 	str.w	r3, [ip], #4
 800fe66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe6a:	d2db      	bcs.n	800fe24 <quorem+0x42>
 800fe6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe70:	b92b      	cbnz	r3, 800fe7e <quorem+0x9c>
 800fe72:	9b01      	ldr	r3, [sp, #4]
 800fe74:	3b04      	subs	r3, #4
 800fe76:	429d      	cmp	r5, r3
 800fe78:	461a      	mov	r2, r3
 800fe7a:	d32c      	bcc.n	800fed6 <quorem+0xf4>
 800fe7c:	613c      	str	r4, [r7, #16]
 800fe7e:	4638      	mov	r0, r7
 800fe80:	f001 f9a8 	bl	80111d4 <__mcmp>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	db22      	blt.n	800fece <quorem+0xec>
 800fe88:	3601      	adds	r6, #1
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe92:	f8d1 c000 	ldr.w	ip, [r1]
 800fe96:	b293      	uxth	r3, r2
 800fe98:	1ac3      	subs	r3, r0, r3
 800fe9a:	0c12      	lsrs	r2, r2, #16
 800fe9c:	fa13 f38c 	uxtah	r3, r3, ip
 800fea0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800feae:	45c1      	cmp	r9, r8
 800feb0:	f841 3b04 	str.w	r3, [r1], #4
 800feb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800feb8:	d2e9      	bcs.n	800fe8e <quorem+0xac>
 800feba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800febe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fec2:	b922      	cbnz	r2, 800fece <quorem+0xec>
 800fec4:	3b04      	subs	r3, #4
 800fec6:	429d      	cmp	r5, r3
 800fec8:	461a      	mov	r2, r3
 800feca:	d30a      	bcc.n	800fee2 <quorem+0x100>
 800fecc:	613c      	str	r4, [r7, #16]
 800fece:	4630      	mov	r0, r6
 800fed0:	b003      	add	sp, #12
 800fed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed6:	6812      	ldr	r2, [r2, #0]
 800fed8:	3b04      	subs	r3, #4
 800feda:	2a00      	cmp	r2, #0
 800fedc:	d1ce      	bne.n	800fe7c <quorem+0x9a>
 800fede:	3c01      	subs	r4, #1
 800fee0:	e7c9      	b.n	800fe76 <quorem+0x94>
 800fee2:	6812      	ldr	r2, [r2, #0]
 800fee4:	3b04      	subs	r3, #4
 800fee6:	2a00      	cmp	r2, #0
 800fee8:	d1f0      	bne.n	800fecc <quorem+0xea>
 800feea:	3c01      	subs	r4, #1
 800feec:	e7eb      	b.n	800fec6 <quorem+0xe4>
 800feee:	2000      	movs	r0, #0
 800fef0:	e7ee      	b.n	800fed0 <quorem+0xee>
 800fef2:	0000      	movs	r0, r0
 800fef4:	0000      	movs	r0, r0
	...

0800fef8 <_dtoa_r>:
 800fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefc:	ed2d 8b04 	vpush	{d8-d9}
 800ff00:	69c5      	ldr	r5, [r0, #28]
 800ff02:	b093      	sub	sp, #76	; 0x4c
 800ff04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ff08:	ec57 6b10 	vmov	r6, r7, d0
 800ff0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ff10:	9107      	str	r1, [sp, #28]
 800ff12:	4604      	mov	r4, r0
 800ff14:	920a      	str	r2, [sp, #40]	; 0x28
 800ff16:	930d      	str	r3, [sp, #52]	; 0x34
 800ff18:	b975      	cbnz	r5, 800ff38 <_dtoa_r+0x40>
 800ff1a:	2010      	movs	r0, #16
 800ff1c:	f000 fe2a 	bl	8010b74 <malloc>
 800ff20:	4602      	mov	r2, r0
 800ff22:	61e0      	str	r0, [r4, #28]
 800ff24:	b920      	cbnz	r0, 800ff30 <_dtoa_r+0x38>
 800ff26:	4bae      	ldr	r3, [pc, #696]	; (80101e0 <_dtoa_r+0x2e8>)
 800ff28:	21ef      	movs	r1, #239	; 0xef
 800ff2a:	48ae      	ldr	r0, [pc, #696]	; (80101e4 <_dtoa_r+0x2ec>)
 800ff2c:	f001 fc90 	bl	8011850 <__assert_func>
 800ff30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff34:	6005      	str	r5, [r0, #0]
 800ff36:	60c5      	str	r5, [r0, #12]
 800ff38:	69e3      	ldr	r3, [r4, #28]
 800ff3a:	6819      	ldr	r1, [r3, #0]
 800ff3c:	b151      	cbz	r1, 800ff54 <_dtoa_r+0x5c>
 800ff3e:	685a      	ldr	r2, [r3, #4]
 800ff40:	604a      	str	r2, [r1, #4]
 800ff42:	2301      	movs	r3, #1
 800ff44:	4093      	lsls	r3, r2
 800ff46:	608b      	str	r3, [r1, #8]
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f000 ff07 	bl	8010d5c <_Bfree>
 800ff4e:	69e3      	ldr	r3, [r4, #28]
 800ff50:	2200      	movs	r2, #0
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	1e3b      	subs	r3, r7, #0
 800ff56:	bfbb      	ittet	lt
 800ff58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ff5c:	9303      	strlt	r3, [sp, #12]
 800ff5e:	2300      	movge	r3, #0
 800ff60:	2201      	movlt	r2, #1
 800ff62:	bfac      	ite	ge
 800ff64:	f8c8 3000 	strge.w	r3, [r8]
 800ff68:	f8c8 2000 	strlt.w	r2, [r8]
 800ff6c:	4b9e      	ldr	r3, [pc, #632]	; (80101e8 <_dtoa_r+0x2f0>)
 800ff6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ff72:	ea33 0308 	bics.w	r3, r3, r8
 800ff76:	d11b      	bne.n	800ffb0 <_dtoa_r+0xb8>
 800ff78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff7e:	6013      	str	r3, [r2, #0]
 800ff80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ff84:	4333      	orrs	r3, r6
 800ff86:	f000 8593 	beq.w	8010ab0 <_dtoa_r+0xbb8>
 800ff8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff8c:	b963      	cbnz	r3, 800ffa8 <_dtoa_r+0xb0>
 800ff8e:	4b97      	ldr	r3, [pc, #604]	; (80101ec <_dtoa_r+0x2f4>)
 800ff90:	e027      	b.n	800ffe2 <_dtoa_r+0xea>
 800ff92:	4b97      	ldr	r3, [pc, #604]	; (80101f0 <_dtoa_r+0x2f8>)
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	3308      	adds	r3, #8
 800ff98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	9800      	ldr	r0, [sp, #0]
 800ff9e:	b013      	add	sp, #76	; 0x4c
 800ffa0:	ecbd 8b04 	vpop	{d8-d9}
 800ffa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa8:	4b90      	ldr	r3, [pc, #576]	; (80101ec <_dtoa_r+0x2f4>)
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	3303      	adds	r3, #3
 800ffae:	e7f3      	b.n	800ff98 <_dtoa_r+0xa0>
 800ffb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	ec51 0b17 	vmov	r0, r1, d7
 800ffba:	eeb0 8a47 	vmov.f32	s16, s14
 800ffbe:	eef0 8a67 	vmov.f32	s17, s15
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f7f0 fda8 	bl	8000b18 <__aeabi_dcmpeq>
 800ffc8:	4681      	mov	r9, r0
 800ffca:	b160      	cbz	r0, 800ffe6 <_dtoa_r+0xee>
 800ffcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffce:	2301      	movs	r3, #1
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 8568 	beq.w	8010aaa <_dtoa_r+0xbb2>
 800ffda:	4b86      	ldr	r3, [pc, #536]	; (80101f4 <_dtoa_r+0x2fc>)
 800ffdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffde:	6013      	str	r3, [r2, #0]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	e7da      	b.n	800ff9c <_dtoa_r+0xa4>
 800ffe6:	aa10      	add	r2, sp, #64	; 0x40
 800ffe8:	a911      	add	r1, sp, #68	; 0x44
 800ffea:	4620      	mov	r0, r4
 800ffec:	eeb0 0a48 	vmov.f32	s0, s16
 800fff0:	eef0 0a68 	vmov.f32	s1, s17
 800fff4:	f001 f994 	bl	8011320 <__d2b>
 800fff8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fffc:	4682      	mov	sl, r0
 800fffe:	2d00      	cmp	r5, #0
 8010000:	d07f      	beq.n	8010102 <_dtoa_r+0x20a>
 8010002:	ee18 3a90 	vmov	r3, s17
 8010006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801000a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801000e:	ec51 0b18 	vmov	r0, r1, d8
 8010012:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801001a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801001e:	4619      	mov	r1, r3
 8010020:	2200      	movs	r2, #0
 8010022:	4b75      	ldr	r3, [pc, #468]	; (80101f8 <_dtoa_r+0x300>)
 8010024:	f7f0 f958 	bl	80002d8 <__aeabi_dsub>
 8010028:	a367      	add	r3, pc, #412	; (adr r3, 80101c8 <_dtoa_r+0x2d0>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	f7f0 fb0b 	bl	8000648 <__aeabi_dmul>
 8010032:	a367      	add	r3, pc, #412	; (adr r3, 80101d0 <_dtoa_r+0x2d8>)
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	f7f0 f950 	bl	80002dc <__adddf3>
 801003c:	4606      	mov	r6, r0
 801003e:	4628      	mov	r0, r5
 8010040:	460f      	mov	r7, r1
 8010042:	f7f0 fa97 	bl	8000574 <__aeabi_i2d>
 8010046:	a364      	add	r3, pc, #400	; (adr r3, 80101d8 <_dtoa_r+0x2e0>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	f7f0 fafc 	bl	8000648 <__aeabi_dmul>
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	4630      	mov	r0, r6
 8010056:	4639      	mov	r1, r7
 8010058:	f7f0 f940 	bl	80002dc <__adddf3>
 801005c:	4606      	mov	r6, r0
 801005e:	460f      	mov	r7, r1
 8010060:	f7f0 fda2 	bl	8000ba8 <__aeabi_d2iz>
 8010064:	2200      	movs	r2, #0
 8010066:	4683      	mov	fp, r0
 8010068:	2300      	movs	r3, #0
 801006a:	4630      	mov	r0, r6
 801006c:	4639      	mov	r1, r7
 801006e:	f7f0 fd5d 	bl	8000b2c <__aeabi_dcmplt>
 8010072:	b148      	cbz	r0, 8010088 <_dtoa_r+0x190>
 8010074:	4658      	mov	r0, fp
 8010076:	f7f0 fa7d 	bl	8000574 <__aeabi_i2d>
 801007a:	4632      	mov	r2, r6
 801007c:	463b      	mov	r3, r7
 801007e:	f7f0 fd4b 	bl	8000b18 <__aeabi_dcmpeq>
 8010082:	b908      	cbnz	r0, 8010088 <_dtoa_r+0x190>
 8010084:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010088:	f1bb 0f16 	cmp.w	fp, #22
 801008c:	d857      	bhi.n	801013e <_dtoa_r+0x246>
 801008e:	4b5b      	ldr	r3, [pc, #364]	; (80101fc <_dtoa_r+0x304>)
 8010090:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	ec51 0b18 	vmov	r0, r1, d8
 801009c:	f7f0 fd46 	bl	8000b2c <__aeabi_dcmplt>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d04e      	beq.n	8010142 <_dtoa_r+0x24a>
 80100a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80100a8:	2300      	movs	r3, #0
 80100aa:	930c      	str	r3, [sp, #48]	; 0x30
 80100ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100ae:	1b5b      	subs	r3, r3, r5
 80100b0:	1e5a      	subs	r2, r3, #1
 80100b2:	bf45      	ittet	mi
 80100b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80100b8:	9305      	strmi	r3, [sp, #20]
 80100ba:	2300      	movpl	r3, #0
 80100bc:	2300      	movmi	r3, #0
 80100be:	9206      	str	r2, [sp, #24]
 80100c0:	bf54      	ite	pl
 80100c2:	9305      	strpl	r3, [sp, #20]
 80100c4:	9306      	strmi	r3, [sp, #24]
 80100c6:	f1bb 0f00 	cmp.w	fp, #0
 80100ca:	db3c      	blt.n	8010146 <_dtoa_r+0x24e>
 80100cc:	9b06      	ldr	r3, [sp, #24]
 80100ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80100d2:	445b      	add	r3, fp
 80100d4:	9306      	str	r3, [sp, #24]
 80100d6:	2300      	movs	r3, #0
 80100d8:	9308      	str	r3, [sp, #32]
 80100da:	9b07      	ldr	r3, [sp, #28]
 80100dc:	2b09      	cmp	r3, #9
 80100de:	d868      	bhi.n	80101b2 <_dtoa_r+0x2ba>
 80100e0:	2b05      	cmp	r3, #5
 80100e2:	bfc4      	itt	gt
 80100e4:	3b04      	subgt	r3, #4
 80100e6:	9307      	strgt	r3, [sp, #28]
 80100e8:	9b07      	ldr	r3, [sp, #28]
 80100ea:	f1a3 0302 	sub.w	r3, r3, #2
 80100ee:	bfcc      	ite	gt
 80100f0:	2500      	movgt	r5, #0
 80100f2:	2501      	movle	r5, #1
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	f200 8085 	bhi.w	8010204 <_dtoa_r+0x30c>
 80100fa:	e8df f003 	tbb	[pc, r3]
 80100fe:	3b2e      	.short	0x3b2e
 8010100:	5839      	.short	0x5839
 8010102:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010106:	441d      	add	r5, r3
 8010108:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801010c:	2b20      	cmp	r3, #32
 801010e:	bfc1      	itttt	gt
 8010110:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010114:	fa08 f803 	lslgt.w	r8, r8, r3
 8010118:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801011c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010120:	bfd6      	itet	le
 8010122:	f1c3 0320 	rsble	r3, r3, #32
 8010126:	ea48 0003 	orrgt.w	r0, r8, r3
 801012a:	fa06 f003 	lslle.w	r0, r6, r3
 801012e:	f7f0 fa11 	bl	8000554 <__aeabi_ui2d>
 8010132:	2201      	movs	r2, #1
 8010134:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010138:	3d01      	subs	r5, #1
 801013a:	920e      	str	r2, [sp, #56]	; 0x38
 801013c:	e76f      	b.n	801001e <_dtoa_r+0x126>
 801013e:	2301      	movs	r3, #1
 8010140:	e7b3      	b.n	80100aa <_dtoa_r+0x1b2>
 8010142:	900c      	str	r0, [sp, #48]	; 0x30
 8010144:	e7b2      	b.n	80100ac <_dtoa_r+0x1b4>
 8010146:	9b05      	ldr	r3, [sp, #20]
 8010148:	eba3 030b 	sub.w	r3, r3, fp
 801014c:	9305      	str	r3, [sp, #20]
 801014e:	f1cb 0300 	rsb	r3, fp, #0
 8010152:	9308      	str	r3, [sp, #32]
 8010154:	2300      	movs	r3, #0
 8010156:	930b      	str	r3, [sp, #44]	; 0x2c
 8010158:	e7bf      	b.n	80100da <_dtoa_r+0x1e2>
 801015a:	2300      	movs	r3, #0
 801015c:	9309      	str	r3, [sp, #36]	; 0x24
 801015e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010160:	2b00      	cmp	r3, #0
 8010162:	dc52      	bgt.n	801020a <_dtoa_r+0x312>
 8010164:	2301      	movs	r3, #1
 8010166:	9301      	str	r3, [sp, #4]
 8010168:	9304      	str	r3, [sp, #16]
 801016a:	461a      	mov	r2, r3
 801016c:	920a      	str	r2, [sp, #40]	; 0x28
 801016e:	e00b      	b.n	8010188 <_dtoa_r+0x290>
 8010170:	2301      	movs	r3, #1
 8010172:	e7f3      	b.n	801015c <_dtoa_r+0x264>
 8010174:	2300      	movs	r3, #0
 8010176:	9309      	str	r3, [sp, #36]	; 0x24
 8010178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801017a:	445b      	add	r3, fp
 801017c:	9301      	str	r3, [sp, #4]
 801017e:	3301      	adds	r3, #1
 8010180:	2b01      	cmp	r3, #1
 8010182:	9304      	str	r3, [sp, #16]
 8010184:	bfb8      	it	lt
 8010186:	2301      	movlt	r3, #1
 8010188:	69e0      	ldr	r0, [r4, #28]
 801018a:	2100      	movs	r1, #0
 801018c:	2204      	movs	r2, #4
 801018e:	f102 0614 	add.w	r6, r2, #20
 8010192:	429e      	cmp	r6, r3
 8010194:	d93d      	bls.n	8010212 <_dtoa_r+0x31a>
 8010196:	6041      	str	r1, [r0, #4]
 8010198:	4620      	mov	r0, r4
 801019a:	f000 fd9f 	bl	8010cdc <_Balloc>
 801019e:	9000      	str	r0, [sp, #0]
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d139      	bne.n	8010218 <_dtoa_r+0x320>
 80101a4:	4b16      	ldr	r3, [pc, #88]	; (8010200 <_dtoa_r+0x308>)
 80101a6:	4602      	mov	r2, r0
 80101a8:	f240 11af 	movw	r1, #431	; 0x1af
 80101ac:	e6bd      	b.n	800ff2a <_dtoa_r+0x32>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e7e1      	b.n	8010176 <_dtoa_r+0x27e>
 80101b2:	2501      	movs	r5, #1
 80101b4:	2300      	movs	r3, #0
 80101b6:	9307      	str	r3, [sp, #28]
 80101b8:	9509      	str	r5, [sp, #36]	; 0x24
 80101ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101be:	9301      	str	r3, [sp, #4]
 80101c0:	9304      	str	r3, [sp, #16]
 80101c2:	2200      	movs	r2, #0
 80101c4:	2312      	movs	r3, #18
 80101c6:	e7d1      	b.n	801016c <_dtoa_r+0x274>
 80101c8:	636f4361 	.word	0x636f4361
 80101cc:	3fd287a7 	.word	0x3fd287a7
 80101d0:	8b60c8b3 	.word	0x8b60c8b3
 80101d4:	3fc68a28 	.word	0x3fc68a28
 80101d8:	509f79fb 	.word	0x509f79fb
 80101dc:	3fd34413 	.word	0x3fd34413
 80101e0:	0801255d 	.word	0x0801255d
 80101e4:	08012574 	.word	0x08012574
 80101e8:	7ff00000 	.word	0x7ff00000
 80101ec:	08012559 	.word	0x08012559
 80101f0:	08012550 	.word	0x08012550
 80101f4:	0801252d 	.word	0x0801252d
 80101f8:	3ff80000 	.word	0x3ff80000
 80101fc:	08012660 	.word	0x08012660
 8010200:	080125cc 	.word	0x080125cc
 8010204:	2301      	movs	r3, #1
 8010206:	9309      	str	r3, [sp, #36]	; 0x24
 8010208:	e7d7      	b.n	80101ba <_dtoa_r+0x2c2>
 801020a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801020c:	9301      	str	r3, [sp, #4]
 801020e:	9304      	str	r3, [sp, #16]
 8010210:	e7ba      	b.n	8010188 <_dtoa_r+0x290>
 8010212:	3101      	adds	r1, #1
 8010214:	0052      	lsls	r2, r2, #1
 8010216:	e7ba      	b.n	801018e <_dtoa_r+0x296>
 8010218:	69e3      	ldr	r3, [r4, #28]
 801021a:	9a00      	ldr	r2, [sp, #0]
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	9b04      	ldr	r3, [sp, #16]
 8010220:	2b0e      	cmp	r3, #14
 8010222:	f200 80a8 	bhi.w	8010376 <_dtoa_r+0x47e>
 8010226:	2d00      	cmp	r5, #0
 8010228:	f000 80a5 	beq.w	8010376 <_dtoa_r+0x47e>
 801022c:	f1bb 0f00 	cmp.w	fp, #0
 8010230:	dd38      	ble.n	80102a4 <_dtoa_r+0x3ac>
 8010232:	4bc0      	ldr	r3, [pc, #768]	; (8010534 <_dtoa_r+0x63c>)
 8010234:	f00b 020f 	and.w	r2, fp, #15
 8010238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801023c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010240:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010244:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010248:	d019      	beq.n	801027e <_dtoa_r+0x386>
 801024a:	4bbb      	ldr	r3, [pc, #748]	; (8010538 <_dtoa_r+0x640>)
 801024c:	ec51 0b18 	vmov	r0, r1, d8
 8010250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010254:	f7f0 fb22 	bl	800089c <__aeabi_ddiv>
 8010258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801025c:	f008 080f 	and.w	r8, r8, #15
 8010260:	2503      	movs	r5, #3
 8010262:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010538 <_dtoa_r+0x640>
 8010266:	f1b8 0f00 	cmp.w	r8, #0
 801026a:	d10a      	bne.n	8010282 <_dtoa_r+0x38a>
 801026c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010270:	4632      	mov	r2, r6
 8010272:	463b      	mov	r3, r7
 8010274:	f7f0 fb12 	bl	800089c <__aeabi_ddiv>
 8010278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801027c:	e02b      	b.n	80102d6 <_dtoa_r+0x3de>
 801027e:	2502      	movs	r5, #2
 8010280:	e7ef      	b.n	8010262 <_dtoa_r+0x36a>
 8010282:	f018 0f01 	tst.w	r8, #1
 8010286:	d008      	beq.n	801029a <_dtoa_r+0x3a2>
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010290:	f7f0 f9da 	bl	8000648 <__aeabi_dmul>
 8010294:	3501      	adds	r5, #1
 8010296:	4606      	mov	r6, r0
 8010298:	460f      	mov	r7, r1
 801029a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801029e:	f109 0908 	add.w	r9, r9, #8
 80102a2:	e7e0      	b.n	8010266 <_dtoa_r+0x36e>
 80102a4:	f000 809f 	beq.w	80103e6 <_dtoa_r+0x4ee>
 80102a8:	f1cb 0600 	rsb	r6, fp, #0
 80102ac:	4ba1      	ldr	r3, [pc, #644]	; (8010534 <_dtoa_r+0x63c>)
 80102ae:	4fa2      	ldr	r7, [pc, #648]	; (8010538 <_dtoa_r+0x640>)
 80102b0:	f006 020f 	and.w	r2, r6, #15
 80102b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102bc:	ec51 0b18 	vmov	r0, r1, d8
 80102c0:	f7f0 f9c2 	bl	8000648 <__aeabi_dmul>
 80102c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102c8:	1136      	asrs	r6, r6, #4
 80102ca:	2300      	movs	r3, #0
 80102cc:	2502      	movs	r5, #2
 80102ce:	2e00      	cmp	r6, #0
 80102d0:	d17e      	bne.n	80103d0 <_dtoa_r+0x4d8>
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1d0      	bne.n	8010278 <_dtoa_r+0x380>
 80102d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f000 8084 	beq.w	80103ea <_dtoa_r+0x4f2>
 80102e2:	4b96      	ldr	r3, [pc, #600]	; (801053c <_dtoa_r+0x644>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	4640      	mov	r0, r8
 80102e8:	4649      	mov	r1, r9
 80102ea:	f7f0 fc1f 	bl	8000b2c <__aeabi_dcmplt>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d07b      	beq.n	80103ea <_dtoa_r+0x4f2>
 80102f2:	9b04      	ldr	r3, [sp, #16]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d078      	beq.n	80103ea <_dtoa_r+0x4f2>
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	dd39      	ble.n	8010372 <_dtoa_r+0x47a>
 80102fe:	4b90      	ldr	r3, [pc, #576]	; (8010540 <_dtoa_r+0x648>)
 8010300:	2200      	movs	r2, #0
 8010302:	4640      	mov	r0, r8
 8010304:	4649      	mov	r1, r9
 8010306:	f7f0 f99f 	bl	8000648 <__aeabi_dmul>
 801030a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801030e:	9e01      	ldr	r6, [sp, #4]
 8010310:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8010314:	3501      	adds	r5, #1
 8010316:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801031a:	4628      	mov	r0, r5
 801031c:	f7f0 f92a 	bl	8000574 <__aeabi_i2d>
 8010320:	4642      	mov	r2, r8
 8010322:	464b      	mov	r3, r9
 8010324:	f7f0 f990 	bl	8000648 <__aeabi_dmul>
 8010328:	4b86      	ldr	r3, [pc, #536]	; (8010544 <_dtoa_r+0x64c>)
 801032a:	2200      	movs	r2, #0
 801032c:	f7ef ffd6 	bl	80002dc <__adddf3>
 8010330:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010338:	9303      	str	r3, [sp, #12]
 801033a:	2e00      	cmp	r6, #0
 801033c:	d158      	bne.n	80103f0 <_dtoa_r+0x4f8>
 801033e:	4b82      	ldr	r3, [pc, #520]	; (8010548 <_dtoa_r+0x650>)
 8010340:	2200      	movs	r2, #0
 8010342:	4640      	mov	r0, r8
 8010344:	4649      	mov	r1, r9
 8010346:	f7ef ffc7 	bl	80002d8 <__aeabi_dsub>
 801034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801034e:	4680      	mov	r8, r0
 8010350:	4689      	mov	r9, r1
 8010352:	f7f0 fc09 	bl	8000b68 <__aeabi_dcmpgt>
 8010356:	2800      	cmp	r0, #0
 8010358:	f040 8296 	bne.w	8010888 <_dtoa_r+0x990>
 801035c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010360:	4640      	mov	r0, r8
 8010362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010366:	4649      	mov	r1, r9
 8010368:	f7f0 fbe0 	bl	8000b2c <__aeabi_dcmplt>
 801036c:	2800      	cmp	r0, #0
 801036e:	f040 8289 	bne.w	8010884 <_dtoa_r+0x98c>
 8010372:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010378:	2b00      	cmp	r3, #0
 801037a:	f2c0 814e 	blt.w	801061a <_dtoa_r+0x722>
 801037e:	f1bb 0f0e 	cmp.w	fp, #14
 8010382:	f300 814a 	bgt.w	801061a <_dtoa_r+0x722>
 8010386:	4b6b      	ldr	r3, [pc, #428]	; (8010534 <_dtoa_r+0x63c>)
 8010388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801038c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010392:	2b00      	cmp	r3, #0
 8010394:	f280 80dc 	bge.w	8010550 <_dtoa_r+0x658>
 8010398:	9b04      	ldr	r3, [sp, #16]
 801039a:	2b00      	cmp	r3, #0
 801039c:	f300 80d8 	bgt.w	8010550 <_dtoa_r+0x658>
 80103a0:	f040 826f 	bne.w	8010882 <_dtoa_r+0x98a>
 80103a4:	4b68      	ldr	r3, [pc, #416]	; (8010548 <_dtoa_r+0x650>)
 80103a6:	2200      	movs	r2, #0
 80103a8:	4640      	mov	r0, r8
 80103aa:	4649      	mov	r1, r9
 80103ac:	f7f0 f94c 	bl	8000648 <__aeabi_dmul>
 80103b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103b4:	f7f0 fbce 	bl	8000b54 <__aeabi_dcmpge>
 80103b8:	9e04      	ldr	r6, [sp, #16]
 80103ba:	4637      	mov	r7, r6
 80103bc:	2800      	cmp	r0, #0
 80103be:	f040 8245 	bne.w	801084c <_dtoa_r+0x954>
 80103c2:	9d00      	ldr	r5, [sp, #0]
 80103c4:	2331      	movs	r3, #49	; 0x31
 80103c6:	f805 3b01 	strb.w	r3, [r5], #1
 80103ca:	f10b 0b01 	add.w	fp, fp, #1
 80103ce:	e241      	b.n	8010854 <_dtoa_r+0x95c>
 80103d0:	07f2      	lsls	r2, r6, #31
 80103d2:	d505      	bpl.n	80103e0 <_dtoa_r+0x4e8>
 80103d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103d8:	f7f0 f936 	bl	8000648 <__aeabi_dmul>
 80103dc:	3501      	adds	r5, #1
 80103de:	2301      	movs	r3, #1
 80103e0:	1076      	asrs	r6, r6, #1
 80103e2:	3708      	adds	r7, #8
 80103e4:	e773      	b.n	80102ce <_dtoa_r+0x3d6>
 80103e6:	2502      	movs	r5, #2
 80103e8:	e775      	b.n	80102d6 <_dtoa_r+0x3de>
 80103ea:	9e04      	ldr	r6, [sp, #16]
 80103ec:	465f      	mov	r7, fp
 80103ee:	e792      	b.n	8010316 <_dtoa_r+0x41e>
 80103f0:	9900      	ldr	r1, [sp, #0]
 80103f2:	4b50      	ldr	r3, [pc, #320]	; (8010534 <_dtoa_r+0x63c>)
 80103f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103f8:	4431      	add	r1, r6
 80103fa:	9102      	str	r1, [sp, #8]
 80103fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103fe:	eeb0 9a47 	vmov.f32	s18, s14
 8010402:	eef0 9a67 	vmov.f32	s19, s15
 8010406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801040a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801040e:	2900      	cmp	r1, #0
 8010410:	d044      	beq.n	801049c <_dtoa_r+0x5a4>
 8010412:	494e      	ldr	r1, [pc, #312]	; (801054c <_dtoa_r+0x654>)
 8010414:	2000      	movs	r0, #0
 8010416:	f7f0 fa41 	bl	800089c <__aeabi_ddiv>
 801041a:	ec53 2b19 	vmov	r2, r3, d9
 801041e:	f7ef ff5b 	bl	80002d8 <__aeabi_dsub>
 8010422:	9d00      	ldr	r5, [sp, #0]
 8010424:	ec41 0b19 	vmov	d9, r0, r1
 8010428:	4649      	mov	r1, r9
 801042a:	4640      	mov	r0, r8
 801042c:	f7f0 fbbc 	bl	8000ba8 <__aeabi_d2iz>
 8010430:	4606      	mov	r6, r0
 8010432:	f7f0 f89f 	bl	8000574 <__aeabi_i2d>
 8010436:	4602      	mov	r2, r0
 8010438:	460b      	mov	r3, r1
 801043a:	4640      	mov	r0, r8
 801043c:	4649      	mov	r1, r9
 801043e:	f7ef ff4b 	bl	80002d8 <__aeabi_dsub>
 8010442:	3630      	adds	r6, #48	; 0x30
 8010444:	f805 6b01 	strb.w	r6, [r5], #1
 8010448:	ec53 2b19 	vmov	r2, r3, d9
 801044c:	4680      	mov	r8, r0
 801044e:	4689      	mov	r9, r1
 8010450:	f7f0 fb6c 	bl	8000b2c <__aeabi_dcmplt>
 8010454:	2800      	cmp	r0, #0
 8010456:	d164      	bne.n	8010522 <_dtoa_r+0x62a>
 8010458:	4642      	mov	r2, r8
 801045a:	464b      	mov	r3, r9
 801045c:	4937      	ldr	r1, [pc, #220]	; (801053c <_dtoa_r+0x644>)
 801045e:	2000      	movs	r0, #0
 8010460:	f7ef ff3a 	bl	80002d8 <__aeabi_dsub>
 8010464:	ec53 2b19 	vmov	r2, r3, d9
 8010468:	f7f0 fb60 	bl	8000b2c <__aeabi_dcmplt>
 801046c:	2800      	cmp	r0, #0
 801046e:	f040 80b6 	bne.w	80105de <_dtoa_r+0x6e6>
 8010472:	9b02      	ldr	r3, [sp, #8]
 8010474:	429d      	cmp	r5, r3
 8010476:	f43f af7c 	beq.w	8010372 <_dtoa_r+0x47a>
 801047a:	4b31      	ldr	r3, [pc, #196]	; (8010540 <_dtoa_r+0x648>)
 801047c:	ec51 0b19 	vmov	r0, r1, d9
 8010480:	2200      	movs	r2, #0
 8010482:	f7f0 f8e1 	bl	8000648 <__aeabi_dmul>
 8010486:	4b2e      	ldr	r3, [pc, #184]	; (8010540 <_dtoa_r+0x648>)
 8010488:	ec41 0b19 	vmov	d9, r0, r1
 801048c:	2200      	movs	r2, #0
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7f0 f8d9 	bl	8000648 <__aeabi_dmul>
 8010496:	4680      	mov	r8, r0
 8010498:	4689      	mov	r9, r1
 801049a:	e7c5      	b.n	8010428 <_dtoa_r+0x530>
 801049c:	ec51 0b17 	vmov	r0, r1, d7
 80104a0:	f7f0 f8d2 	bl	8000648 <__aeabi_dmul>
 80104a4:	9b02      	ldr	r3, [sp, #8]
 80104a6:	9d00      	ldr	r5, [sp, #0]
 80104a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80104aa:	ec41 0b19 	vmov	d9, r0, r1
 80104ae:	4649      	mov	r1, r9
 80104b0:	4640      	mov	r0, r8
 80104b2:	f7f0 fb79 	bl	8000ba8 <__aeabi_d2iz>
 80104b6:	4606      	mov	r6, r0
 80104b8:	f7f0 f85c 	bl	8000574 <__aeabi_i2d>
 80104bc:	3630      	adds	r6, #48	; 0x30
 80104be:	4602      	mov	r2, r0
 80104c0:	460b      	mov	r3, r1
 80104c2:	4640      	mov	r0, r8
 80104c4:	4649      	mov	r1, r9
 80104c6:	f7ef ff07 	bl	80002d8 <__aeabi_dsub>
 80104ca:	f805 6b01 	strb.w	r6, [r5], #1
 80104ce:	9b02      	ldr	r3, [sp, #8]
 80104d0:	429d      	cmp	r5, r3
 80104d2:	4680      	mov	r8, r0
 80104d4:	4689      	mov	r9, r1
 80104d6:	f04f 0200 	mov.w	r2, #0
 80104da:	d124      	bne.n	8010526 <_dtoa_r+0x62e>
 80104dc:	4b1b      	ldr	r3, [pc, #108]	; (801054c <_dtoa_r+0x654>)
 80104de:	ec51 0b19 	vmov	r0, r1, d9
 80104e2:	f7ef fefb 	bl	80002dc <__adddf3>
 80104e6:	4602      	mov	r2, r0
 80104e8:	460b      	mov	r3, r1
 80104ea:	4640      	mov	r0, r8
 80104ec:	4649      	mov	r1, r9
 80104ee:	f7f0 fb3b 	bl	8000b68 <__aeabi_dcmpgt>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d173      	bne.n	80105de <_dtoa_r+0x6e6>
 80104f6:	ec53 2b19 	vmov	r2, r3, d9
 80104fa:	4914      	ldr	r1, [pc, #80]	; (801054c <_dtoa_r+0x654>)
 80104fc:	2000      	movs	r0, #0
 80104fe:	f7ef feeb 	bl	80002d8 <__aeabi_dsub>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4640      	mov	r0, r8
 8010508:	4649      	mov	r1, r9
 801050a:	f7f0 fb0f 	bl	8000b2c <__aeabi_dcmplt>
 801050e:	2800      	cmp	r0, #0
 8010510:	f43f af2f 	beq.w	8010372 <_dtoa_r+0x47a>
 8010514:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010516:	1e6b      	subs	r3, r5, #1
 8010518:	930f      	str	r3, [sp, #60]	; 0x3c
 801051a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801051e:	2b30      	cmp	r3, #48	; 0x30
 8010520:	d0f8      	beq.n	8010514 <_dtoa_r+0x61c>
 8010522:	46bb      	mov	fp, r7
 8010524:	e04a      	b.n	80105bc <_dtoa_r+0x6c4>
 8010526:	4b06      	ldr	r3, [pc, #24]	; (8010540 <_dtoa_r+0x648>)
 8010528:	f7f0 f88e 	bl	8000648 <__aeabi_dmul>
 801052c:	4680      	mov	r8, r0
 801052e:	4689      	mov	r9, r1
 8010530:	e7bd      	b.n	80104ae <_dtoa_r+0x5b6>
 8010532:	bf00      	nop
 8010534:	08012660 	.word	0x08012660
 8010538:	08012638 	.word	0x08012638
 801053c:	3ff00000 	.word	0x3ff00000
 8010540:	40240000 	.word	0x40240000
 8010544:	401c0000 	.word	0x401c0000
 8010548:	40140000 	.word	0x40140000
 801054c:	3fe00000 	.word	0x3fe00000
 8010550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010554:	9d00      	ldr	r5, [sp, #0]
 8010556:	4642      	mov	r2, r8
 8010558:	464b      	mov	r3, r9
 801055a:	4630      	mov	r0, r6
 801055c:	4639      	mov	r1, r7
 801055e:	f7f0 f99d 	bl	800089c <__aeabi_ddiv>
 8010562:	f7f0 fb21 	bl	8000ba8 <__aeabi_d2iz>
 8010566:	9001      	str	r0, [sp, #4]
 8010568:	f7f0 f804 	bl	8000574 <__aeabi_i2d>
 801056c:	4642      	mov	r2, r8
 801056e:	464b      	mov	r3, r9
 8010570:	f7f0 f86a 	bl	8000648 <__aeabi_dmul>
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	4630      	mov	r0, r6
 801057a:	4639      	mov	r1, r7
 801057c:	f7ef feac 	bl	80002d8 <__aeabi_dsub>
 8010580:	9e01      	ldr	r6, [sp, #4]
 8010582:	9f04      	ldr	r7, [sp, #16]
 8010584:	3630      	adds	r6, #48	; 0x30
 8010586:	f805 6b01 	strb.w	r6, [r5], #1
 801058a:	9e00      	ldr	r6, [sp, #0]
 801058c:	1bae      	subs	r6, r5, r6
 801058e:	42b7      	cmp	r7, r6
 8010590:	4602      	mov	r2, r0
 8010592:	460b      	mov	r3, r1
 8010594:	d134      	bne.n	8010600 <_dtoa_r+0x708>
 8010596:	f7ef fea1 	bl	80002dc <__adddf3>
 801059a:	4642      	mov	r2, r8
 801059c:	464b      	mov	r3, r9
 801059e:	4606      	mov	r6, r0
 80105a0:	460f      	mov	r7, r1
 80105a2:	f7f0 fae1 	bl	8000b68 <__aeabi_dcmpgt>
 80105a6:	b9c8      	cbnz	r0, 80105dc <_dtoa_r+0x6e4>
 80105a8:	4642      	mov	r2, r8
 80105aa:	464b      	mov	r3, r9
 80105ac:	4630      	mov	r0, r6
 80105ae:	4639      	mov	r1, r7
 80105b0:	f7f0 fab2 	bl	8000b18 <__aeabi_dcmpeq>
 80105b4:	b110      	cbz	r0, 80105bc <_dtoa_r+0x6c4>
 80105b6:	9b01      	ldr	r3, [sp, #4]
 80105b8:	07db      	lsls	r3, r3, #31
 80105ba:	d40f      	bmi.n	80105dc <_dtoa_r+0x6e4>
 80105bc:	4651      	mov	r1, sl
 80105be:	4620      	mov	r0, r4
 80105c0:	f000 fbcc 	bl	8010d5c <_Bfree>
 80105c4:	2300      	movs	r3, #0
 80105c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105c8:	702b      	strb	r3, [r5, #0]
 80105ca:	f10b 0301 	add.w	r3, fp, #1
 80105ce:	6013      	str	r3, [r2, #0]
 80105d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f43f ace2 	beq.w	800ff9c <_dtoa_r+0xa4>
 80105d8:	601d      	str	r5, [r3, #0]
 80105da:	e4df      	b.n	800ff9c <_dtoa_r+0xa4>
 80105dc:	465f      	mov	r7, fp
 80105de:	462b      	mov	r3, r5
 80105e0:	461d      	mov	r5, r3
 80105e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105e6:	2a39      	cmp	r2, #57	; 0x39
 80105e8:	d106      	bne.n	80105f8 <_dtoa_r+0x700>
 80105ea:	9a00      	ldr	r2, [sp, #0]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d1f7      	bne.n	80105e0 <_dtoa_r+0x6e8>
 80105f0:	9900      	ldr	r1, [sp, #0]
 80105f2:	2230      	movs	r2, #48	; 0x30
 80105f4:	3701      	adds	r7, #1
 80105f6:	700a      	strb	r2, [r1, #0]
 80105f8:	781a      	ldrb	r2, [r3, #0]
 80105fa:	3201      	adds	r2, #1
 80105fc:	701a      	strb	r2, [r3, #0]
 80105fe:	e790      	b.n	8010522 <_dtoa_r+0x62a>
 8010600:	4ba3      	ldr	r3, [pc, #652]	; (8010890 <_dtoa_r+0x998>)
 8010602:	2200      	movs	r2, #0
 8010604:	f7f0 f820 	bl	8000648 <__aeabi_dmul>
 8010608:	2200      	movs	r2, #0
 801060a:	2300      	movs	r3, #0
 801060c:	4606      	mov	r6, r0
 801060e:	460f      	mov	r7, r1
 8010610:	f7f0 fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8010614:	2800      	cmp	r0, #0
 8010616:	d09e      	beq.n	8010556 <_dtoa_r+0x65e>
 8010618:	e7d0      	b.n	80105bc <_dtoa_r+0x6c4>
 801061a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801061c:	2a00      	cmp	r2, #0
 801061e:	f000 80ca 	beq.w	80107b6 <_dtoa_r+0x8be>
 8010622:	9a07      	ldr	r2, [sp, #28]
 8010624:	2a01      	cmp	r2, #1
 8010626:	f300 80ad 	bgt.w	8010784 <_dtoa_r+0x88c>
 801062a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801062c:	2a00      	cmp	r2, #0
 801062e:	f000 80a5 	beq.w	801077c <_dtoa_r+0x884>
 8010632:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010636:	9e08      	ldr	r6, [sp, #32]
 8010638:	9d05      	ldr	r5, [sp, #20]
 801063a:	9a05      	ldr	r2, [sp, #20]
 801063c:	441a      	add	r2, r3
 801063e:	9205      	str	r2, [sp, #20]
 8010640:	9a06      	ldr	r2, [sp, #24]
 8010642:	2101      	movs	r1, #1
 8010644:	441a      	add	r2, r3
 8010646:	4620      	mov	r0, r4
 8010648:	9206      	str	r2, [sp, #24]
 801064a:	f000 fc3d 	bl	8010ec8 <__i2b>
 801064e:	4607      	mov	r7, r0
 8010650:	b165      	cbz	r5, 801066c <_dtoa_r+0x774>
 8010652:	9b06      	ldr	r3, [sp, #24]
 8010654:	2b00      	cmp	r3, #0
 8010656:	dd09      	ble.n	801066c <_dtoa_r+0x774>
 8010658:	42ab      	cmp	r3, r5
 801065a:	9a05      	ldr	r2, [sp, #20]
 801065c:	bfa8      	it	ge
 801065e:	462b      	movge	r3, r5
 8010660:	1ad2      	subs	r2, r2, r3
 8010662:	9205      	str	r2, [sp, #20]
 8010664:	9a06      	ldr	r2, [sp, #24]
 8010666:	1aed      	subs	r5, r5, r3
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	9306      	str	r3, [sp, #24]
 801066c:	9b08      	ldr	r3, [sp, #32]
 801066e:	b1f3      	cbz	r3, 80106ae <_dtoa_r+0x7b6>
 8010670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010672:	2b00      	cmp	r3, #0
 8010674:	f000 80a3 	beq.w	80107be <_dtoa_r+0x8c6>
 8010678:	2e00      	cmp	r6, #0
 801067a:	dd10      	ble.n	801069e <_dtoa_r+0x7a6>
 801067c:	4639      	mov	r1, r7
 801067e:	4632      	mov	r2, r6
 8010680:	4620      	mov	r0, r4
 8010682:	f000 fce1 	bl	8011048 <__pow5mult>
 8010686:	4652      	mov	r2, sl
 8010688:	4601      	mov	r1, r0
 801068a:	4607      	mov	r7, r0
 801068c:	4620      	mov	r0, r4
 801068e:	f000 fc31 	bl	8010ef4 <__multiply>
 8010692:	4651      	mov	r1, sl
 8010694:	4680      	mov	r8, r0
 8010696:	4620      	mov	r0, r4
 8010698:	f000 fb60 	bl	8010d5c <_Bfree>
 801069c:	46c2      	mov	sl, r8
 801069e:	9b08      	ldr	r3, [sp, #32]
 80106a0:	1b9a      	subs	r2, r3, r6
 80106a2:	d004      	beq.n	80106ae <_dtoa_r+0x7b6>
 80106a4:	4651      	mov	r1, sl
 80106a6:	4620      	mov	r0, r4
 80106a8:	f000 fcce 	bl	8011048 <__pow5mult>
 80106ac:	4682      	mov	sl, r0
 80106ae:	2101      	movs	r1, #1
 80106b0:	4620      	mov	r0, r4
 80106b2:	f000 fc09 	bl	8010ec8 <__i2b>
 80106b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	4606      	mov	r6, r0
 80106bc:	f340 8081 	ble.w	80107c2 <_dtoa_r+0x8ca>
 80106c0:	461a      	mov	r2, r3
 80106c2:	4601      	mov	r1, r0
 80106c4:	4620      	mov	r0, r4
 80106c6:	f000 fcbf 	bl	8011048 <__pow5mult>
 80106ca:	9b07      	ldr	r3, [sp, #28]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	4606      	mov	r6, r0
 80106d0:	dd7a      	ble.n	80107c8 <_dtoa_r+0x8d0>
 80106d2:	f04f 0800 	mov.w	r8, #0
 80106d6:	6933      	ldr	r3, [r6, #16]
 80106d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106dc:	6918      	ldr	r0, [r3, #16]
 80106de:	f000 fba5 	bl	8010e2c <__hi0bits>
 80106e2:	f1c0 0020 	rsb	r0, r0, #32
 80106e6:	9b06      	ldr	r3, [sp, #24]
 80106e8:	4418      	add	r0, r3
 80106ea:	f010 001f 	ands.w	r0, r0, #31
 80106ee:	f000 8094 	beq.w	801081a <_dtoa_r+0x922>
 80106f2:	f1c0 0320 	rsb	r3, r0, #32
 80106f6:	2b04      	cmp	r3, #4
 80106f8:	f340 8085 	ble.w	8010806 <_dtoa_r+0x90e>
 80106fc:	9b05      	ldr	r3, [sp, #20]
 80106fe:	f1c0 001c 	rsb	r0, r0, #28
 8010702:	4403      	add	r3, r0
 8010704:	9305      	str	r3, [sp, #20]
 8010706:	9b06      	ldr	r3, [sp, #24]
 8010708:	4403      	add	r3, r0
 801070a:	4405      	add	r5, r0
 801070c:	9306      	str	r3, [sp, #24]
 801070e:	9b05      	ldr	r3, [sp, #20]
 8010710:	2b00      	cmp	r3, #0
 8010712:	dd05      	ble.n	8010720 <_dtoa_r+0x828>
 8010714:	4651      	mov	r1, sl
 8010716:	461a      	mov	r2, r3
 8010718:	4620      	mov	r0, r4
 801071a:	f000 fcef 	bl	80110fc <__lshift>
 801071e:	4682      	mov	sl, r0
 8010720:	9b06      	ldr	r3, [sp, #24]
 8010722:	2b00      	cmp	r3, #0
 8010724:	dd05      	ble.n	8010732 <_dtoa_r+0x83a>
 8010726:	4631      	mov	r1, r6
 8010728:	461a      	mov	r2, r3
 801072a:	4620      	mov	r0, r4
 801072c:	f000 fce6 	bl	80110fc <__lshift>
 8010730:	4606      	mov	r6, r0
 8010732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010734:	2b00      	cmp	r3, #0
 8010736:	d072      	beq.n	801081e <_dtoa_r+0x926>
 8010738:	4631      	mov	r1, r6
 801073a:	4650      	mov	r0, sl
 801073c:	f000 fd4a 	bl	80111d4 <__mcmp>
 8010740:	2800      	cmp	r0, #0
 8010742:	da6c      	bge.n	801081e <_dtoa_r+0x926>
 8010744:	2300      	movs	r3, #0
 8010746:	4651      	mov	r1, sl
 8010748:	220a      	movs	r2, #10
 801074a:	4620      	mov	r0, r4
 801074c:	f000 fb28 	bl	8010da0 <__multadd>
 8010750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010752:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010756:	4682      	mov	sl, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	f000 81b0 	beq.w	8010abe <_dtoa_r+0xbc6>
 801075e:	2300      	movs	r3, #0
 8010760:	4639      	mov	r1, r7
 8010762:	220a      	movs	r2, #10
 8010764:	4620      	mov	r0, r4
 8010766:	f000 fb1b 	bl	8010da0 <__multadd>
 801076a:	9b01      	ldr	r3, [sp, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	4607      	mov	r7, r0
 8010770:	f300 8096 	bgt.w	80108a0 <_dtoa_r+0x9a8>
 8010774:	9b07      	ldr	r3, [sp, #28]
 8010776:	2b02      	cmp	r3, #2
 8010778:	dc59      	bgt.n	801082e <_dtoa_r+0x936>
 801077a:	e091      	b.n	80108a0 <_dtoa_r+0x9a8>
 801077c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801077e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010782:	e758      	b.n	8010636 <_dtoa_r+0x73e>
 8010784:	9b04      	ldr	r3, [sp, #16]
 8010786:	1e5e      	subs	r6, r3, #1
 8010788:	9b08      	ldr	r3, [sp, #32]
 801078a:	42b3      	cmp	r3, r6
 801078c:	bfbf      	itttt	lt
 801078e:	9b08      	ldrlt	r3, [sp, #32]
 8010790:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010792:	9608      	strlt	r6, [sp, #32]
 8010794:	1af3      	sublt	r3, r6, r3
 8010796:	bfb4      	ite	lt
 8010798:	18d2      	addlt	r2, r2, r3
 801079a:	1b9e      	subge	r6, r3, r6
 801079c:	9b04      	ldr	r3, [sp, #16]
 801079e:	bfbc      	itt	lt
 80107a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80107a2:	2600      	movlt	r6, #0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	bfb7      	itett	lt
 80107a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80107ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80107b0:	1a9d      	sublt	r5, r3, r2
 80107b2:	2300      	movlt	r3, #0
 80107b4:	e741      	b.n	801063a <_dtoa_r+0x742>
 80107b6:	9e08      	ldr	r6, [sp, #32]
 80107b8:	9d05      	ldr	r5, [sp, #20]
 80107ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80107bc:	e748      	b.n	8010650 <_dtoa_r+0x758>
 80107be:	9a08      	ldr	r2, [sp, #32]
 80107c0:	e770      	b.n	80106a4 <_dtoa_r+0x7ac>
 80107c2:	9b07      	ldr	r3, [sp, #28]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	dc19      	bgt.n	80107fc <_dtoa_r+0x904>
 80107c8:	9b02      	ldr	r3, [sp, #8]
 80107ca:	b9bb      	cbnz	r3, 80107fc <_dtoa_r+0x904>
 80107cc:	9b03      	ldr	r3, [sp, #12]
 80107ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107d2:	b99b      	cbnz	r3, 80107fc <_dtoa_r+0x904>
 80107d4:	9b03      	ldr	r3, [sp, #12]
 80107d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107da:	0d1b      	lsrs	r3, r3, #20
 80107dc:	051b      	lsls	r3, r3, #20
 80107de:	b183      	cbz	r3, 8010802 <_dtoa_r+0x90a>
 80107e0:	9b05      	ldr	r3, [sp, #20]
 80107e2:	3301      	adds	r3, #1
 80107e4:	9305      	str	r3, [sp, #20]
 80107e6:	9b06      	ldr	r3, [sp, #24]
 80107e8:	3301      	adds	r3, #1
 80107ea:	9306      	str	r3, [sp, #24]
 80107ec:	f04f 0801 	mov.w	r8, #1
 80107f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f47f af6f 	bne.w	80106d6 <_dtoa_r+0x7de>
 80107f8:	2001      	movs	r0, #1
 80107fa:	e774      	b.n	80106e6 <_dtoa_r+0x7ee>
 80107fc:	f04f 0800 	mov.w	r8, #0
 8010800:	e7f6      	b.n	80107f0 <_dtoa_r+0x8f8>
 8010802:	4698      	mov	r8, r3
 8010804:	e7f4      	b.n	80107f0 <_dtoa_r+0x8f8>
 8010806:	d082      	beq.n	801070e <_dtoa_r+0x816>
 8010808:	9a05      	ldr	r2, [sp, #20]
 801080a:	331c      	adds	r3, #28
 801080c:	441a      	add	r2, r3
 801080e:	9205      	str	r2, [sp, #20]
 8010810:	9a06      	ldr	r2, [sp, #24]
 8010812:	441a      	add	r2, r3
 8010814:	441d      	add	r5, r3
 8010816:	9206      	str	r2, [sp, #24]
 8010818:	e779      	b.n	801070e <_dtoa_r+0x816>
 801081a:	4603      	mov	r3, r0
 801081c:	e7f4      	b.n	8010808 <_dtoa_r+0x910>
 801081e:	9b04      	ldr	r3, [sp, #16]
 8010820:	2b00      	cmp	r3, #0
 8010822:	dc37      	bgt.n	8010894 <_dtoa_r+0x99c>
 8010824:	9b07      	ldr	r3, [sp, #28]
 8010826:	2b02      	cmp	r3, #2
 8010828:	dd34      	ble.n	8010894 <_dtoa_r+0x99c>
 801082a:	9b04      	ldr	r3, [sp, #16]
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	9b01      	ldr	r3, [sp, #4]
 8010830:	b963      	cbnz	r3, 801084c <_dtoa_r+0x954>
 8010832:	4631      	mov	r1, r6
 8010834:	2205      	movs	r2, #5
 8010836:	4620      	mov	r0, r4
 8010838:	f000 fab2 	bl	8010da0 <__multadd>
 801083c:	4601      	mov	r1, r0
 801083e:	4606      	mov	r6, r0
 8010840:	4650      	mov	r0, sl
 8010842:	f000 fcc7 	bl	80111d4 <__mcmp>
 8010846:	2800      	cmp	r0, #0
 8010848:	f73f adbb 	bgt.w	80103c2 <_dtoa_r+0x4ca>
 801084c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801084e:	9d00      	ldr	r5, [sp, #0]
 8010850:	ea6f 0b03 	mvn.w	fp, r3
 8010854:	f04f 0800 	mov.w	r8, #0
 8010858:	4631      	mov	r1, r6
 801085a:	4620      	mov	r0, r4
 801085c:	f000 fa7e 	bl	8010d5c <_Bfree>
 8010860:	2f00      	cmp	r7, #0
 8010862:	f43f aeab 	beq.w	80105bc <_dtoa_r+0x6c4>
 8010866:	f1b8 0f00 	cmp.w	r8, #0
 801086a:	d005      	beq.n	8010878 <_dtoa_r+0x980>
 801086c:	45b8      	cmp	r8, r7
 801086e:	d003      	beq.n	8010878 <_dtoa_r+0x980>
 8010870:	4641      	mov	r1, r8
 8010872:	4620      	mov	r0, r4
 8010874:	f000 fa72 	bl	8010d5c <_Bfree>
 8010878:	4639      	mov	r1, r7
 801087a:	4620      	mov	r0, r4
 801087c:	f000 fa6e 	bl	8010d5c <_Bfree>
 8010880:	e69c      	b.n	80105bc <_dtoa_r+0x6c4>
 8010882:	2600      	movs	r6, #0
 8010884:	4637      	mov	r7, r6
 8010886:	e7e1      	b.n	801084c <_dtoa_r+0x954>
 8010888:	46bb      	mov	fp, r7
 801088a:	4637      	mov	r7, r6
 801088c:	e599      	b.n	80103c2 <_dtoa_r+0x4ca>
 801088e:	bf00      	nop
 8010890:	40240000 	.word	0x40240000
 8010894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 80c8 	beq.w	8010a2c <_dtoa_r+0xb34>
 801089c:	9b04      	ldr	r3, [sp, #16]
 801089e:	9301      	str	r3, [sp, #4]
 80108a0:	2d00      	cmp	r5, #0
 80108a2:	dd05      	ble.n	80108b0 <_dtoa_r+0x9b8>
 80108a4:	4639      	mov	r1, r7
 80108a6:	462a      	mov	r2, r5
 80108a8:	4620      	mov	r0, r4
 80108aa:	f000 fc27 	bl	80110fc <__lshift>
 80108ae:	4607      	mov	r7, r0
 80108b0:	f1b8 0f00 	cmp.w	r8, #0
 80108b4:	d05b      	beq.n	801096e <_dtoa_r+0xa76>
 80108b6:	6879      	ldr	r1, [r7, #4]
 80108b8:	4620      	mov	r0, r4
 80108ba:	f000 fa0f 	bl	8010cdc <_Balloc>
 80108be:	4605      	mov	r5, r0
 80108c0:	b928      	cbnz	r0, 80108ce <_dtoa_r+0x9d6>
 80108c2:	4b83      	ldr	r3, [pc, #524]	; (8010ad0 <_dtoa_r+0xbd8>)
 80108c4:	4602      	mov	r2, r0
 80108c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80108ca:	f7ff bb2e 	b.w	800ff2a <_dtoa_r+0x32>
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	3202      	adds	r2, #2
 80108d2:	0092      	lsls	r2, r2, #2
 80108d4:	f107 010c 	add.w	r1, r7, #12
 80108d8:	300c      	adds	r0, #12
 80108da:	f000 ffab 	bl	8011834 <memcpy>
 80108de:	2201      	movs	r2, #1
 80108e0:	4629      	mov	r1, r5
 80108e2:	4620      	mov	r0, r4
 80108e4:	f000 fc0a 	bl	80110fc <__lshift>
 80108e8:	9b00      	ldr	r3, [sp, #0]
 80108ea:	3301      	adds	r3, #1
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108f2:	4413      	add	r3, r2
 80108f4:	9308      	str	r3, [sp, #32]
 80108f6:	9b02      	ldr	r3, [sp, #8]
 80108f8:	f003 0301 	and.w	r3, r3, #1
 80108fc:	46b8      	mov	r8, r7
 80108fe:	9306      	str	r3, [sp, #24]
 8010900:	4607      	mov	r7, r0
 8010902:	9b04      	ldr	r3, [sp, #16]
 8010904:	4631      	mov	r1, r6
 8010906:	3b01      	subs	r3, #1
 8010908:	4650      	mov	r0, sl
 801090a:	9301      	str	r3, [sp, #4]
 801090c:	f7ff fa69 	bl	800fde2 <quorem>
 8010910:	4641      	mov	r1, r8
 8010912:	9002      	str	r0, [sp, #8]
 8010914:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010918:	4650      	mov	r0, sl
 801091a:	f000 fc5b 	bl	80111d4 <__mcmp>
 801091e:	463a      	mov	r2, r7
 8010920:	9005      	str	r0, [sp, #20]
 8010922:	4631      	mov	r1, r6
 8010924:	4620      	mov	r0, r4
 8010926:	f000 fc71 	bl	801120c <__mdiff>
 801092a:	68c2      	ldr	r2, [r0, #12]
 801092c:	4605      	mov	r5, r0
 801092e:	bb02      	cbnz	r2, 8010972 <_dtoa_r+0xa7a>
 8010930:	4601      	mov	r1, r0
 8010932:	4650      	mov	r0, sl
 8010934:	f000 fc4e 	bl	80111d4 <__mcmp>
 8010938:	4602      	mov	r2, r0
 801093a:	4629      	mov	r1, r5
 801093c:	4620      	mov	r0, r4
 801093e:	9209      	str	r2, [sp, #36]	; 0x24
 8010940:	f000 fa0c 	bl	8010d5c <_Bfree>
 8010944:	9b07      	ldr	r3, [sp, #28]
 8010946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010948:	9d04      	ldr	r5, [sp, #16]
 801094a:	ea43 0102 	orr.w	r1, r3, r2
 801094e:	9b06      	ldr	r3, [sp, #24]
 8010950:	4319      	orrs	r1, r3
 8010952:	d110      	bne.n	8010976 <_dtoa_r+0xa7e>
 8010954:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010958:	d029      	beq.n	80109ae <_dtoa_r+0xab6>
 801095a:	9b05      	ldr	r3, [sp, #20]
 801095c:	2b00      	cmp	r3, #0
 801095e:	dd02      	ble.n	8010966 <_dtoa_r+0xa6e>
 8010960:	9b02      	ldr	r3, [sp, #8]
 8010962:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	f883 9000 	strb.w	r9, [r3]
 801096c:	e774      	b.n	8010858 <_dtoa_r+0x960>
 801096e:	4638      	mov	r0, r7
 8010970:	e7ba      	b.n	80108e8 <_dtoa_r+0x9f0>
 8010972:	2201      	movs	r2, #1
 8010974:	e7e1      	b.n	801093a <_dtoa_r+0xa42>
 8010976:	9b05      	ldr	r3, [sp, #20]
 8010978:	2b00      	cmp	r3, #0
 801097a:	db04      	blt.n	8010986 <_dtoa_r+0xa8e>
 801097c:	9907      	ldr	r1, [sp, #28]
 801097e:	430b      	orrs	r3, r1
 8010980:	9906      	ldr	r1, [sp, #24]
 8010982:	430b      	orrs	r3, r1
 8010984:	d120      	bne.n	80109c8 <_dtoa_r+0xad0>
 8010986:	2a00      	cmp	r2, #0
 8010988:	dded      	ble.n	8010966 <_dtoa_r+0xa6e>
 801098a:	4651      	mov	r1, sl
 801098c:	2201      	movs	r2, #1
 801098e:	4620      	mov	r0, r4
 8010990:	f000 fbb4 	bl	80110fc <__lshift>
 8010994:	4631      	mov	r1, r6
 8010996:	4682      	mov	sl, r0
 8010998:	f000 fc1c 	bl	80111d4 <__mcmp>
 801099c:	2800      	cmp	r0, #0
 801099e:	dc03      	bgt.n	80109a8 <_dtoa_r+0xab0>
 80109a0:	d1e1      	bne.n	8010966 <_dtoa_r+0xa6e>
 80109a2:	f019 0f01 	tst.w	r9, #1
 80109a6:	d0de      	beq.n	8010966 <_dtoa_r+0xa6e>
 80109a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80109ac:	d1d8      	bne.n	8010960 <_dtoa_r+0xa68>
 80109ae:	9a01      	ldr	r2, [sp, #4]
 80109b0:	2339      	movs	r3, #57	; 0x39
 80109b2:	7013      	strb	r3, [r2, #0]
 80109b4:	462b      	mov	r3, r5
 80109b6:	461d      	mov	r5, r3
 80109b8:	3b01      	subs	r3, #1
 80109ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80109be:	2a39      	cmp	r2, #57	; 0x39
 80109c0:	d06c      	beq.n	8010a9c <_dtoa_r+0xba4>
 80109c2:	3201      	adds	r2, #1
 80109c4:	701a      	strb	r2, [r3, #0]
 80109c6:	e747      	b.n	8010858 <_dtoa_r+0x960>
 80109c8:	2a00      	cmp	r2, #0
 80109ca:	dd07      	ble.n	80109dc <_dtoa_r+0xae4>
 80109cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80109d0:	d0ed      	beq.n	80109ae <_dtoa_r+0xab6>
 80109d2:	9a01      	ldr	r2, [sp, #4]
 80109d4:	f109 0301 	add.w	r3, r9, #1
 80109d8:	7013      	strb	r3, [r2, #0]
 80109da:	e73d      	b.n	8010858 <_dtoa_r+0x960>
 80109dc:	9b04      	ldr	r3, [sp, #16]
 80109de:	9a08      	ldr	r2, [sp, #32]
 80109e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d043      	beq.n	8010a70 <_dtoa_r+0xb78>
 80109e8:	4651      	mov	r1, sl
 80109ea:	2300      	movs	r3, #0
 80109ec:	220a      	movs	r2, #10
 80109ee:	4620      	mov	r0, r4
 80109f0:	f000 f9d6 	bl	8010da0 <__multadd>
 80109f4:	45b8      	cmp	r8, r7
 80109f6:	4682      	mov	sl, r0
 80109f8:	f04f 0300 	mov.w	r3, #0
 80109fc:	f04f 020a 	mov.w	r2, #10
 8010a00:	4641      	mov	r1, r8
 8010a02:	4620      	mov	r0, r4
 8010a04:	d107      	bne.n	8010a16 <_dtoa_r+0xb1e>
 8010a06:	f000 f9cb 	bl	8010da0 <__multadd>
 8010a0a:	4680      	mov	r8, r0
 8010a0c:	4607      	mov	r7, r0
 8010a0e:	9b04      	ldr	r3, [sp, #16]
 8010a10:	3301      	adds	r3, #1
 8010a12:	9304      	str	r3, [sp, #16]
 8010a14:	e775      	b.n	8010902 <_dtoa_r+0xa0a>
 8010a16:	f000 f9c3 	bl	8010da0 <__multadd>
 8010a1a:	4639      	mov	r1, r7
 8010a1c:	4680      	mov	r8, r0
 8010a1e:	2300      	movs	r3, #0
 8010a20:	220a      	movs	r2, #10
 8010a22:	4620      	mov	r0, r4
 8010a24:	f000 f9bc 	bl	8010da0 <__multadd>
 8010a28:	4607      	mov	r7, r0
 8010a2a:	e7f0      	b.n	8010a0e <_dtoa_r+0xb16>
 8010a2c:	9b04      	ldr	r3, [sp, #16]
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	9d00      	ldr	r5, [sp, #0]
 8010a32:	4631      	mov	r1, r6
 8010a34:	4650      	mov	r0, sl
 8010a36:	f7ff f9d4 	bl	800fde2 <quorem>
 8010a3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010a3e:	9b00      	ldr	r3, [sp, #0]
 8010a40:	f805 9b01 	strb.w	r9, [r5], #1
 8010a44:	1aea      	subs	r2, r5, r3
 8010a46:	9b01      	ldr	r3, [sp, #4]
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	dd07      	ble.n	8010a5c <_dtoa_r+0xb64>
 8010a4c:	4651      	mov	r1, sl
 8010a4e:	2300      	movs	r3, #0
 8010a50:	220a      	movs	r2, #10
 8010a52:	4620      	mov	r0, r4
 8010a54:	f000 f9a4 	bl	8010da0 <__multadd>
 8010a58:	4682      	mov	sl, r0
 8010a5a:	e7ea      	b.n	8010a32 <_dtoa_r+0xb3a>
 8010a5c:	9b01      	ldr	r3, [sp, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	bfc8      	it	gt
 8010a62:	461d      	movgt	r5, r3
 8010a64:	9b00      	ldr	r3, [sp, #0]
 8010a66:	bfd8      	it	le
 8010a68:	2501      	movle	r5, #1
 8010a6a:	441d      	add	r5, r3
 8010a6c:	f04f 0800 	mov.w	r8, #0
 8010a70:	4651      	mov	r1, sl
 8010a72:	2201      	movs	r2, #1
 8010a74:	4620      	mov	r0, r4
 8010a76:	f000 fb41 	bl	80110fc <__lshift>
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4682      	mov	sl, r0
 8010a7e:	f000 fba9 	bl	80111d4 <__mcmp>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	dc96      	bgt.n	80109b4 <_dtoa_r+0xabc>
 8010a86:	d102      	bne.n	8010a8e <_dtoa_r+0xb96>
 8010a88:	f019 0f01 	tst.w	r9, #1
 8010a8c:	d192      	bne.n	80109b4 <_dtoa_r+0xabc>
 8010a8e:	462b      	mov	r3, r5
 8010a90:	461d      	mov	r5, r3
 8010a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a96:	2a30      	cmp	r2, #48	; 0x30
 8010a98:	d0fa      	beq.n	8010a90 <_dtoa_r+0xb98>
 8010a9a:	e6dd      	b.n	8010858 <_dtoa_r+0x960>
 8010a9c:	9a00      	ldr	r2, [sp, #0]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d189      	bne.n	80109b6 <_dtoa_r+0xabe>
 8010aa2:	f10b 0b01 	add.w	fp, fp, #1
 8010aa6:	2331      	movs	r3, #49	; 0x31
 8010aa8:	e796      	b.n	80109d8 <_dtoa_r+0xae0>
 8010aaa:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <_dtoa_r+0xbdc>)
 8010aac:	f7ff ba99 	b.w	800ffe2 <_dtoa_r+0xea>
 8010ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f47f aa6d 	bne.w	800ff92 <_dtoa_r+0x9a>
 8010ab8:	4b07      	ldr	r3, [pc, #28]	; (8010ad8 <_dtoa_r+0xbe0>)
 8010aba:	f7ff ba92 	b.w	800ffe2 <_dtoa_r+0xea>
 8010abe:	9b01      	ldr	r3, [sp, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	dcb5      	bgt.n	8010a30 <_dtoa_r+0xb38>
 8010ac4:	9b07      	ldr	r3, [sp, #28]
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	f73f aeb1 	bgt.w	801082e <_dtoa_r+0x936>
 8010acc:	e7b0      	b.n	8010a30 <_dtoa_r+0xb38>
 8010ace:	bf00      	nop
 8010ad0:	080125cc 	.word	0x080125cc
 8010ad4:	0801252c 	.word	0x0801252c
 8010ad8:	08012550 	.word	0x08012550

08010adc <_free_r>:
 8010adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ade:	2900      	cmp	r1, #0
 8010ae0:	d044      	beq.n	8010b6c <_free_r+0x90>
 8010ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ae6:	9001      	str	r0, [sp, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f1a1 0404 	sub.w	r4, r1, #4
 8010aee:	bfb8      	it	lt
 8010af0:	18e4      	addlt	r4, r4, r3
 8010af2:	f000 f8e7 	bl	8010cc4 <__malloc_lock>
 8010af6:	4a1e      	ldr	r2, [pc, #120]	; (8010b70 <_free_r+0x94>)
 8010af8:	9801      	ldr	r0, [sp, #4]
 8010afa:	6813      	ldr	r3, [r2, #0]
 8010afc:	b933      	cbnz	r3, 8010b0c <_free_r+0x30>
 8010afe:	6063      	str	r3, [r4, #4]
 8010b00:	6014      	str	r4, [r2, #0]
 8010b02:	b003      	add	sp, #12
 8010b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b08:	f000 b8e2 	b.w	8010cd0 <__malloc_unlock>
 8010b0c:	42a3      	cmp	r3, r4
 8010b0e:	d908      	bls.n	8010b22 <_free_r+0x46>
 8010b10:	6825      	ldr	r5, [r4, #0]
 8010b12:	1961      	adds	r1, r4, r5
 8010b14:	428b      	cmp	r3, r1
 8010b16:	bf01      	itttt	eq
 8010b18:	6819      	ldreq	r1, [r3, #0]
 8010b1a:	685b      	ldreq	r3, [r3, #4]
 8010b1c:	1949      	addeq	r1, r1, r5
 8010b1e:	6021      	streq	r1, [r4, #0]
 8010b20:	e7ed      	b.n	8010afe <_free_r+0x22>
 8010b22:	461a      	mov	r2, r3
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	b10b      	cbz	r3, 8010b2c <_free_r+0x50>
 8010b28:	42a3      	cmp	r3, r4
 8010b2a:	d9fa      	bls.n	8010b22 <_free_r+0x46>
 8010b2c:	6811      	ldr	r1, [r2, #0]
 8010b2e:	1855      	adds	r5, r2, r1
 8010b30:	42a5      	cmp	r5, r4
 8010b32:	d10b      	bne.n	8010b4c <_free_r+0x70>
 8010b34:	6824      	ldr	r4, [r4, #0]
 8010b36:	4421      	add	r1, r4
 8010b38:	1854      	adds	r4, r2, r1
 8010b3a:	42a3      	cmp	r3, r4
 8010b3c:	6011      	str	r1, [r2, #0]
 8010b3e:	d1e0      	bne.n	8010b02 <_free_r+0x26>
 8010b40:	681c      	ldr	r4, [r3, #0]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	6053      	str	r3, [r2, #4]
 8010b46:	440c      	add	r4, r1
 8010b48:	6014      	str	r4, [r2, #0]
 8010b4a:	e7da      	b.n	8010b02 <_free_r+0x26>
 8010b4c:	d902      	bls.n	8010b54 <_free_r+0x78>
 8010b4e:	230c      	movs	r3, #12
 8010b50:	6003      	str	r3, [r0, #0]
 8010b52:	e7d6      	b.n	8010b02 <_free_r+0x26>
 8010b54:	6825      	ldr	r5, [r4, #0]
 8010b56:	1961      	adds	r1, r4, r5
 8010b58:	428b      	cmp	r3, r1
 8010b5a:	bf04      	itt	eq
 8010b5c:	6819      	ldreq	r1, [r3, #0]
 8010b5e:	685b      	ldreq	r3, [r3, #4]
 8010b60:	6063      	str	r3, [r4, #4]
 8010b62:	bf04      	itt	eq
 8010b64:	1949      	addeq	r1, r1, r5
 8010b66:	6021      	streq	r1, [r4, #0]
 8010b68:	6054      	str	r4, [r2, #4]
 8010b6a:	e7ca      	b.n	8010b02 <_free_r+0x26>
 8010b6c:	b003      	add	sp, #12
 8010b6e:	bd30      	pop	{r4, r5, pc}
 8010b70:	200019ec 	.word	0x200019ec

08010b74 <malloc>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <malloc+0xc>)
 8010b76:	4601      	mov	r1, r0
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f000 b823 	b.w	8010bc4 <_malloc_r>
 8010b7e:	bf00      	nop
 8010b80:	200001dc 	.word	0x200001dc

08010b84 <sbrk_aligned>:
 8010b84:	b570      	push	{r4, r5, r6, lr}
 8010b86:	4e0e      	ldr	r6, [pc, #56]	; (8010bc0 <sbrk_aligned+0x3c>)
 8010b88:	460c      	mov	r4, r1
 8010b8a:	6831      	ldr	r1, [r6, #0]
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	b911      	cbnz	r1, 8010b96 <sbrk_aligned+0x12>
 8010b90:	f000 fe40 	bl	8011814 <_sbrk_r>
 8010b94:	6030      	str	r0, [r6, #0]
 8010b96:	4621      	mov	r1, r4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f000 fe3b 	bl	8011814 <_sbrk_r>
 8010b9e:	1c43      	adds	r3, r0, #1
 8010ba0:	d00a      	beq.n	8010bb8 <sbrk_aligned+0x34>
 8010ba2:	1cc4      	adds	r4, r0, #3
 8010ba4:	f024 0403 	bic.w	r4, r4, #3
 8010ba8:	42a0      	cmp	r0, r4
 8010baa:	d007      	beq.n	8010bbc <sbrk_aligned+0x38>
 8010bac:	1a21      	subs	r1, r4, r0
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f000 fe30 	bl	8011814 <_sbrk_r>
 8010bb4:	3001      	adds	r0, #1
 8010bb6:	d101      	bne.n	8010bbc <sbrk_aligned+0x38>
 8010bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	bd70      	pop	{r4, r5, r6, pc}
 8010bc0:	200019f0 	.word	0x200019f0

08010bc4 <_malloc_r>:
 8010bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc8:	1ccd      	adds	r5, r1, #3
 8010bca:	f025 0503 	bic.w	r5, r5, #3
 8010bce:	3508      	adds	r5, #8
 8010bd0:	2d0c      	cmp	r5, #12
 8010bd2:	bf38      	it	cc
 8010bd4:	250c      	movcc	r5, #12
 8010bd6:	2d00      	cmp	r5, #0
 8010bd8:	4607      	mov	r7, r0
 8010bda:	db01      	blt.n	8010be0 <_malloc_r+0x1c>
 8010bdc:	42a9      	cmp	r1, r5
 8010bde:	d905      	bls.n	8010bec <_malloc_r+0x28>
 8010be0:	230c      	movs	r3, #12
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	2600      	movs	r6, #0
 8010be6:	4630      	mov	r0, r6
 8010be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010cc0 <_malloc_r+0xfc>
 8010bf0:	f000 f868 	bl	8010cc4 <__malloc_lock>
 8010bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8010bf8:	461c      	mov	r4, r3
 8010bfa:	bb5c      	cbnz	r4, 8010c54 <_malloc_r+0x90>
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	4638      	mov	r0, r7
 8010c00:	f7ff ffc0 	bl	8010b84 <sbrk_aligned>
 8010c04:	1c43      	adds	r3, r0, #1
 8010c06:	4604      	mov	r4, r0
 8010c08:	d155      	bne.n	8010cb6 <_malloc_r+0xf2>
 8010c0a:	f8d8 4000 	ldr.w	r4, [r8]
 8010c0e:	4626      	mov	r6, r4
 8010c10:	2e00      	cmp	r6, #0
 8010c12:	d145      	bne.n	8010ca0 <_malloc_r+0xdc>
 8010c14:	2c00      	cmp	r4, #0
 8010c16:	d048      	beq.n	8010caa <_malloc_r+0xe6>
 8010c18:	6823      	ldr	r3, [r4, #0]
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	eb04 0903 	add.w	r9, r4, r3
 8010c22:	f000 fdf7 	bl	8011814 <_sbrk_r>
 8010c26:	4581      	cmp	r9, r0
 8010c28:	d13f      	bne.n	8010caa <_malloc_r+0xe6>
 8010c2a:	6821      	ldr	r1, [r4, #0]
 8010c2c:	1a6d      	subs	r5, r5, r1
 8010c2e:	4629      	mov	r1, r5
 8010c30:	4638      	mov	r0, r7
 8010c32:	f7ff ffa7 	bl	8010b84 <sbrk_aligned>
 8010c36:	3001      	adds	r0, #1
 8010c38:	d037      	beq.n	8010caa <_malloc_r+0xe6>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	442b      	add	r3, r5
 8010c3e:	6023      	str	r3, [r4, #0]
 8010c40:	f8d8 3000 	ldr.w	r3, [r8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d038      	beq.n	8010cba <_malloc_r+0xf6>
 8010c48:	685a      	ldr	r2, [r3, #4]
 8010c4a:	42a2      	cmp	r2, r4
 8010c4c:	d12b      	bne.n	8010ca6 <_malloc_r+0xe2>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	605a      	str	r2, [r3, #4]
 8010c52:	e00f      	b.n	8010c74 <_malloc_r+0xb0>
 8010c54:	6822      	ldr	r2, [r4, #0]
 8010c56:	1b52      	subs	r2, r2, r5
 8010c58:	d41f      	bmi.n	8010c9a <_malloc_r+0xd6>
 8010c5a:	2a0b      	cmp	r2, #11
 8010c5c:	d917      	bls.n	8010c8e <_malloc_r+0xca>
 8010c5e:	1961      	adds	r1, r4, r5
 8010c60:	42a3      	cmp	r3, r4
 8010c62:	6025      	str	r5, [r4, #0]
 8010c64:	bf18      	it	ne
 8010c66:	6059      	strne	r1, [r3, #4]
 8010c68:	6863      	ldr	r3, [r4, #4]
 8010c6a:	bf08      	it	eq
 8010c6c:	f8c8 1000 	streq.w	r1, [r8]
 8010c70:	5162      	str	r2, [r4, r5]
 8010c72:	604b      	str	r3, [r1, #4]
 8010c74:	4638      	mov	r0, r7
 8010c76:	f104 060b 	add.w	r6, r4, #11
 8010c7a:	f000 f829 	bl	8010cd0 <__malloc_unlock>
 8010c7e:	f026 0607 	bic.w	r6, r6, #7
 8010c82:	1d23      	adds	r3, r4, #4
 8010c84:	1af2      	subs	r2, r6, r3
 8010c86:	d0ae      	beq.n	8010be6 <_malloc_r+0x22>
 8010c88:	1b9b      	subs	r3, r3, r6
 8010c8a:	50a3      	str	r3, [r4, r2]
 8010c8c:	e7ab      	b.n	8010be6 <_malloc_r+0x22>
 8010c8e:	42a3      	cmp	r3, r4
 8010c90:	6862      	ldr	r2, [r4, #4]
 8010c92:	d1dd      	bne.n	8010c50 <_malloc_r+0x8c>
 8010c94:	f8c8 2000 	str.w	r2, [r8]
 8010c98:	e7ec      	b.n	8010c74 <_malloc_r+0xb0>
 8010c9a:	4623      	mov	r3, r4
 8010c9c:	6864      	ldr	r4, [r4, #4]
 8010c9e:	e7ac      	b.n	8010bfa <_malloc_r+0x36>
 8010ca0:	4634      	mov	r4, r6
 8010ca2:	6876      	ldr	r6, [r6, #4]
 8010ca4:	e7b4      	b.n	8010c10 <_malloc_r+0x4c>
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	e7cc      	b.n	8010c44 <_malloc_r+0x80>
 8010caa:	230c      	movs	r3, #12
 8010cac:	603b      	str	r3, [r7, #0]
 8010cae:	4638      	mov	r0, r7
 8010cb0:	f000 f80e 	bl	8010cd0 <__malloc_unlock>
 8010cb4:	e797      	b.n	8010be6 <_malloc_r+0x22>
 8010cb6:	6025      	str	r5, [r4, #0]
 8010cb8:	e7dc      	b.n	8010c74 <_malloc_r+0xb0>
 8010cba:	605b      	str	r3, [r3, #4]
 8010cbc:	deff      	udf	#255	; 0xff
 8010cbe:	bf00      	nop
 8010cc0:	200019ec 	.word	0x200019ec

08010cc4 <__malloc_lock>:
 8010cc4:	4801      	ldr	r0, [pc, #4]	; (8010ccc <__malloc_lock+0x8>)
 8010cc6:	f7ff b88a 	b.w	800fdde <__retarget_lock_acquire_recursive>
 8010cca:	bf00      	nop
 8010ccc:	200019e8 	.word	0x200019e8

08010cd0 <__malloc_unlock>:
 8010cd0:	4801      	ldr	r0, [pc, #4]	; (8010cd8 <__malloc_unlock+0x8>)
 8010cd2:	f7ff b885 	b.w	800fde0 <__retarget_lock_release_recursive>
 8010cd6:	bf00      	nop
 8010cd8:	200019e8 	.word	0x200019e8

08010cdc <_Balloc>:
 8010cdc:	b570      	push	{r4, r5, r6, lr}
 8010cde:	69c6      	ldr	r6, [r0, #28]
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	b976      	cbnz	r6, 8010d04 <_Balloc+0x28>
 8010ce6:	2010      	movs	r0, #16
 8010ce8:	f7ff ff44 	bl	8010b74 <malloc>
 8010cec:	4602      	mov	r2, r0
 8010cee:	61e0      	str	r0, [r4, #28]
 8010cf0:	b920      	cbnz	r0, 8010cfc <_Balloc+0x20>
 8010cf2:	4b18      	ldr	r3, [pc, #96]	; (8010d54 <_Balloc+0x78>)
 8010cf4:	4818      	ldr	r0, [pc, #96]	; (8010d58 <_Balloc+0x7c>)
 8010cf6:	216b      	movs	r1, #107	; 0x6b
 8010cf8:	f000 fdaa 	bl	8011850 <__assert_func>
 8010cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d00:	6006      	str	r6, [r0, #0]
 8010d02:	60c6      	str	r6, [r0, #12]
 8010d04:	69e6      	ldr	r6, [r4, #28]
 8010d06:	68f3      	ldr	r3, [r6, #12]
 8010d08:	b183      	cbz	r3, 8010d2c <_Balloc+0x50>
 8010d0a:	69e3      	ldr	r3, [r4, #28]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d12:	b9b8      	cbnz	r0, 8010d44 <_Balloc+0x68>
 8010d14:	2101      	movs	r1, #1
 8010d16:	fa01 f605 	lsl.w	r6, r1, r5
 8010d1a:	1d72      	adds	r2, r6, #5
 8010d1c:	0092      	lsls	r2, r2, #2
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f000 fdb4 	bl	801188c <_calloc_r>
 8010d24:	b160      	cbz	r0, 8010d40 <_Balloc+0x64>
 8010d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d2a:	e00e      	b.n	8010d4a <_Balloc+0x6e>
 8010d2c:	2221      	movs	r2, #33	; 0x21
 8010d2e:	2104      	movs	r1, #4
 8010d30:	4620      	mov	r0, r4
 8010d32:	f000 fdab 	bl	801188c <_calloc_r>
 8010d36:	69e3      	ldr	r3, [r4, #28]
 8010d38:	60f0      	str	r0, [r6, #12]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1e4      	bne.n	8010d0a <_Balloc+0x2e>
 8010d40:	2000      	movs	r0, #0
 8010d42:	bd70      	pop	{r4, r5, r6, pc}
 8010d44:	6802      	ldr	r2, [r0, #0]
 8010d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d50:	e7f7      	b.n	8010d42 <_Balloc+0x66>
 8010d52:	bf00      	nop
 8010d54:	0801255d 	.word	0x0801255d
 8010d58:	080125dd 	.word	0x080125dd

08010d5c <_Bfree>:
 8010d5c:	b570      	push	{r4, r5, r6, lr}
 8010d5e:	69c6      	ldr	r6, [r0, #28]
 8010d60:	4605      	mov	r5, r0
 8010d62:	460c      	mov	r4, r1
 8010d64:	b976      	cbnz	r6, 8010d84 <_Bfree+0x28>
 8010d66:	2010      	movs	r0, #16
 8010d68:	f7ff ff04 	bl	8010b74 <malloc>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	61e8      	str	r0, [r5, #28]
 8010d70:	b920      	cbnz	r0, 8010d7c <_Bfree+0x20>
 8010d72:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <_Bfree+0x3c>)
 8010d74:	4809      	ldr	r0, [pc, #36]	; (8010d9c <_Bfree+0x40>)
 8010d76:	218f      	movs	r1, #143	; 0x8f
 8010d78:	f000 fd6a 	bl	8011850 <__assert_func>
 8010d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d80:	6006      	str	r6, [r0, #0]
 8010d82:	60c6      	str	r6, [r0, #12]
 8010d84:	b13c      	cbz	r4, 8010d96 <_Bfree+0x3a>
 8010d86:	69eb      	ldr	r3, [r5, #28]
 8010d88:	6862      	ldr	r2, [r4, #4]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d90:	6021      	str	r1, [r4, #0]
 8010d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d96:	bd70      	pop	{r4, r5, r6, pc}
 8010d98:	0801255d 	.word	0x0801255d
 8010d9c:	080125dd 	.word	0x080125dd

08010da0 <__multadd>:
 8010da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da4:	690d      	ldr	r5, [r1, #16]
 8010da6:	4607      	mov	r7, r0
 8010da8:	460c      	mov	r4, r1
 8010daa:	461e      	mov	r6, r3
 8010dac:	f101 0c14 	add.w	ip, r1, #20
 8010db0:	2000      	movs	r0, #0
 8010db2:	f8dc 3000 	ldr.w	r3, [ip]
 8010db6:	b299      	uxth	r1, r3
 8010db8:	fb02 6101 	mla	r1, r2, r1, r6
 8010dbc:	0c1e      	lsrs	r6, r3, #16
 8010dbe:	0c0b      	lsrs	r3, r1, #16
 8010dc0:	fb02 3306 	mla	r3, r2, r6, r3
 8010dc4:	b289      	uxth	r1, r1
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010dcc:	4285      	cmp	r5, r0
 8010dce:	f84c 1b04 	str.w	r1, [ip], #4
 8010dd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dd6:	dcec      	bgt.n	8010db2 <__multadd+0x12>
 8010dd8:	b30e      	cbz	r6, 8010e1e <__multadd+0x7e>
 8010dda:	68a3      	ldr	r3, [r4, #8]
 8010ddc:	42ab      	cmp	r3, r5
 8010dde:	dc19      	bgt.n	8010e14 <__multadd+0x74>
 8010de0:	6861      	ldr	r1, [r4, #4]
 8010de2:	4638      	mov	r0, r7
 8010de4:	3101      	adds	r1, #1
 8010de6:	f7ff ff79 	bl	8010cdc <_Balloc>
 8010dea:	4680      	mov	r8, r0
 8010dec:	b928      	cbnz	r0, 8010dfa <__multadd+0x5a>
 8010dee:	4602      	mov	r2, r0
 8010df0:	4b0c      	ldr	r3, [pc, #48]	; (8010e24 <__multadd+0x84>)
 8010df2:	480d      	ldr	r0, [pc, #52]	; (8010e28 <__multadd+0x88>)
 8010df4:	21ba      	movs	r1, #186	; 0xba
 8010df6:	f000 fd2b 	bl	8011850 <__assert_func>
 8010dfa:	6922      	ldr	r2, [r4, #16]
 8010dfc:	3202      	adds	r2, #2
 8010dfe:	f104 010c 	add.w	r1, r4, #12
 8010e02:	0092      	lsls	r2, r2, #2
 8010e04:	300c      	adds	r0, #12
 8010e06:	f000 fd15 	bl	8011834 <memcpy>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4638      	mov	r0, r7
 8010e0e:	f7ff ffa5 	bl	8010d5c <_Bfree>
 8010e12:	4644      	mov	r4, r8
 8010e14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e18:	3501      	adds	r5, #1
 8010e1a:	615e      	str	r6, [r3, #20]
 8010e1c:	6125      	str	r5, [r4, #16]
 8010e1e:	4620      	mov	r0, r4
 8010e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e24:	080125cc 	.word	0x080125cc
 8010e28:	080125dd 	.word	0x080125dd

08010e2c <__hi0bits>:
 8010e2c:	0c03      	lsrs	r3, r0, #16
 8010e2e:	041b      	lsls	r3, r3, #16
 8010e30:	b9d3      	cbnz	r3, 8010e68 <__hi0bits+0x3c>
 8010e32:	0400      	lsls	r0, r0, #16
 8010e34:	2310      	movs	r3, #16
 8010e36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010e3a:	bf04      	itt	eq
 8010e3c:	0200      	lsleq	r0, r0, #8
 8010e3e:	3308      	addeq	r3, #8
 8010e40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010e44:	bf04      	itt	eq
 8010e46:	0100      	lsleq	r0, r0, #4
 8010e48:	3304      	addeq	r3, #4
 8010e4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010e4e:	bf04      	itt	eq
 8010e50:	0080      	lsleq	r0, r0, #2
 8010e52:	3302      	addeq	r3, #2
 8010e54:	2800      	cmp	r0, #0
 8010e56:	db05      	blt.n	8010e64 <__hi0bits+0x38>
 8010e58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010e5c:	f103 0301 	add.w	r3, r3, #1
 8010e60:	bf08      	it	eq
 8010e62:	2320      	moveq	r3, #32
 8010e64:	4618      	mov	r0, r3
 8010e66:	4770      	bx	lr
 8010e68:	2300      	movs	r3, #0
 8010e6a:	e7e4      	b.n	8010e36 <__hi0bits+0xa>

08010e6c <__lo0bits>:
 8010e6c:	6803      	ldr	r3, [r0, #0]
 8010e6e:	f013 0207 	ands.w	r2, r3, #7
 8010e72:	d00c      	beq.n	8010e8e <__lo0bits+0x22>
 8010e74:	07d9      	lsls	r1, r3, #31
 8010e76:	d422      	bmi.n	8010ebe <__lo0bits+0x52>
 8010e78:	079a      	lsls	r2, r3, #30
 8010e7a:	bf49      	itett	mi
 8010e7c:	085b      	lsrmi	r3, r3, #1
 8010e7e:	089b      	lsrpl	r3, r3, #2
 8010e80:	6003      	strmi	r3, [r0, #0]
 8010e82:	2201      	movmi	r2, #1
 8010e84:	bf5c      	itt	pl
 8010e86:	6003      	strpl	r3, [r0, #0]
 8010e88:	2202      	movpl	r2, #2
 8010e8a:	4610      	mov	r0, r2
 8010e8c:	4770      	bx	lr
 8010e8e:	b299      	uxth	r1, r3
 8010e90:	b909      	cbnz	r1, 8010e96 <__lo0bits+0x2a>
 8010e92:	0c1b      	lsrs	r3, r3, #16
 8010e94:	2210      	movs	r2, #16
 8010e96:	b2d9      	uxtb	r1, r3
 8010e98:	b909      	cbnz	r1, 8010e9e <__lo0bits+0x32>
 8010e9a:	3208      	adds	r2, #8
 8010e9c:	0a1b      	lsrs	r3, r3, #8
 8010e9e:	0719      	lsls	r1, r3, #28
 8010ea0:	bf04      	itt	eq
 8010ea2:	091b      	lsreq	r3, r3, #4
 8010ea4:	3204      	addeq	r2, #4
 8010ea6:	0799      	lsls	r1, r3, #30
 8010ea8:	bf04      	itt	eq
 8010eaa:	089b      	lsreq	r3, r3, #2
 8010eac:	3202      	addeq	r2, #2
 8010eae:	07d9      	lsls	r1, r3, #31
 8010eb0:	d403      	bmi.n	8010eba <__lo0bits+0x4e>
 8010eb2:	085b      	lsrs	r3, r3, #1
 8010eb4:	f102 0201 	add.w	r2, r2, #1
 8010eb8:	d003      	beq.n	8010ec2 <__lo0bits+0x56>
 8010eba:	6003      	str	r3, [r0, #0]
 8010ebc:	e7e5      	b.n	8010e8a <__lo0bits+0x1e>
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	e7e3      	b.n	8010e8a <__lo0bits+0x1e>
 8010ec2:	2220      	movs	r2, #32
 8010ec4:	e7e1      	b.n	8010e8a <__lo0bits+0x1e>
	...

08010ec8 <__i2b>:
 8010ec8:	b510      	push	{r4, lr}
 8010eca:	460c      	mov	r4, r1
 8010ecc:	2101      	movs	r1, #1
 8010ece:	f7ff ff05 	bl	8010cdc <_Balloc>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	b928      	cbnz	r0, 8010ee2 <__i2b+0x1a>
 8010ed6:	4b05      	ldr	r3, [pc, #20]	; (8010eec <__i2b+0x24>)
 8010ed8:	4805      	ldr	r0, [pc, #20]	; (8010ef0 <__i2b+0x28>)
 8010eda:	f240 1145 	movw	r1, #325	; 0x145
 8010ede:	f000 fcb7 	bl	8011850 <__assert_func>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	6144      	str	r4, [r0, #20]
 8010ee6:	6103      	str	r3, [r0, #16]
 8010ee8:	bd10      	pop	{r4, pc}
 8010eea:	bf00      	nop
 8010eec:	080125cc 	.word	0x080125cc
 8010ef0:	080125dd 	.word	0x080125dd

08010ef4 <__multiply>:
 8010ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef8:	4691      	mov	r9, r2
 8010efa:	690a      	ldr	r2, [r1, #16]
 8010efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	bfb8      	it	lt
 8010f04:	460b      	movlt	r3, r1
 8010f06:	460c      	mov	r4, r1
 8010f08:	bfbc      	itt	lt
 8010f0a:	464c      	movlt	r4, r9
 8010f0c:	4699      	movlt	r9, r3
 8010f0e:	6927      	ldr	r7, [r4, #16]
 8010f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010f14:	68a3      	ldr	r3, [r4, #8]
 8010f16:	6861      	ldr	r1, [r4, #4]
 8010f18:	eb07 060a 	add.w	r6, r7, sl
 8010f1c:	42b3      	cmp	r3, r6
 8010f1e:	b085      	sub	sp, #20
 8010f20:	bfb8      	it	lt
 8010f22:	3101      	addlt	r1, #1
 8010f24:	f7ff feda 	bl	8010cdc <_Balloc>
 8010f28:	b930      	cbnz	r0, 8010f38 <__multiply+0x44>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	4b44      	ldr	r3, [pc, #272]	; (8011040 <__multiply+0x14c>)
 8010f2e:	4845      	ldr	r0, [pc, #276]	; (8011044 <__multiply+0x150>)
 8010f30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010f34:	f000 fc8c 	bl	8011850 <__assert_func>
 8010f38:	f100 0514 	add.w	r5, r0, #20
 8010f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f40:	462b      	mov	r3, r5
 8010f42:	2200      	movs	r2, #0
 8010f44:	4543      	cmp	r3, r8
 8010f46:	d321      	bcc.n	8010f8c <__multiply+0x98>
 8010f48:	f104 0314 	add.w	r3, r4, #20
 8010f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010f50:	f109 0314 	add.w	r3, r9, #20
 8010f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010f58:	9202      	str	r2, [sp, #8]
 8010f5a:	1b3a      	subs	r2, r7, r4
 8010f5c:	3a15      	subs	r2, #21
 8010f5e:	f022 0203 	bic.w	r2, r2, #3
 8010f62:	3204      	adds	r2, #4
 8010f64:	f104 0115 	add.w	r1, r4, #21
 8010f68:	428f      	cmp	r7, r1
 8010f6a:	bf38      	it	cc
 8010f6c:	2204      	movcc	r2, #4
 8010f6e:	9201      	str	r2, [sp, #4]
 8010f70:	9a02      	ldr	r2, [sp, #8]
 8010f72:	9303      	str	r3, [sp, #12]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d80c      	bhi.n	8010f92 <__multiply+0x9e>
 8010f78:	2e00      	cmp	r6, #0
 8010f7a:	dd03      	ble.n	8010f84 <__multiply+0x90>
 8010f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d05b      	beq.n	801103c <__multiply+0x148>
 8010f84:	6106      	str	r6, [r0, #16]
 8010f86:	b005      	add	sp, #20
 8010f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8c:	f843 2b04 	str.w	r2, [r3], #4
 8010f90:	e7d8      	b.n	8010f44 <__multiply+0x50>
 8010f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8010f96:	f1ba 0f00 	cmp.w	sl, #0
 8010f9a:	d024      	beq.n	8010fe6 <__multiply+0xf2>
 8010f9c:	f104 0e14 	add.w	lr, r4, #20
 8010fa0:	46a9      	mov	r9, r5
 8010fa2:	f04f 0c00 	mov.w	ip, #0
 8010fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010faa:	f8d9 1000 	ldr.w	r1, [r9]
 8010fae:	fa1f fb82 	uxth.w	fp, r2
 8010fb2:	b289      	uxth	r1, r1
 8010fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8010fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8010fc0:	4461      	add	r1, ip
 8010fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8010fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010fce:	b289      	uxth	r1, r1
 8010fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010fd4:	4577      	cmp	r7, lr
 8010fd6:	f849 1b04 	str.w	r1, [r9], #4
 8010fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010fde:	d8e2      	bhi.n	8010fa6 <__multiply+0xb2>
 8010fe0:	9a01      	ldr	r2, [sp, #4]
 8010fe2:	f845 c002 	str.w	ip, [r5, r2]
 8010fe6:	9a03      	ldr	r2, [sp, #12]
 8010fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010fec:	3304      	adds	r3, #4
 8010fee:	f1b9 0f00 	cmp.w	r9, #0
 8010ff2:	d021      	beq.n	8011038 <__multiply+0x144>
 8010ff4:	6829      	ldr	r1, [r5, #0]
 8010ff6:	f104 0c14 	add.w	ip, r4, #20
 8010ffa:	46ae      	mov	lr, r5
 8010ffc:	f04f 0a00 	mov.w	sl, #0
 8011000:	f8bc b000 	ldrh.w	fp, [ip]
 8011004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011008:	fb09 220b 	mla	r2, r9, fp, r2
 801100c:	4452      	add	r2, sl
 801100e:	b289      	uxth	r1, r1
 8011010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011014:	f84e 1b04 	str.w	r1, [lr], #4
 8011018:	f85c 1b04 	ldr.w	r1, [ip], #4
 801101c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011020:	f8be 1000 	ldrh.w	r1, [lr]
 8011024:	fb09 110a 	mla	r1, r9, sl, r1
 8011028:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801102c:	4567      	cmp	r7, ip
 801102e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011032:	d8e5      	bhi.n	8011000 <__multiply+0x10c>
 8011034:	9a01      	ldr	r2, [sp, #4]
 8011036:	50a9      	str	r1, [r5, r2]
 8011038:	3504      	adds	r5, #4
 801103a:	e799      	b.n	8010f70 <__multiply+0x7c>
 801103c:	3e01      	subs	r6, #1
 801103e:	e79b      	b.n	8010f78 <__multiply+0x84>
 8011040:	080125cc 	.word	0x080125cc
 8011044:	080125dd 	.word	0x080125dd

08011048 <__pow5mult>:
 8011048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801104c:	4615      	mov	r5, r2
 801104e:	f012 0203 	ands.w	r2, r2, #3
 8011052:	4606      	mov	r6, r0
 8011054:	460f      	mov	r7, r1
 8011056:	d007      	beq.n	8011068 <__pow5mult+0x20>
 8011058:	4c25      	ldr	r4, [pc, #148]	; (80110f0 <__pow5mult+0xa8>)
 801105a:	3a01      	subs	r2, #1
 801105c:	2300      	movs	r3, #0
 801105e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011062:	f7ff fe9d 	bl	8010da0 <__multadd>
 8011066:	4607      	mov	r7, r0
 8011068:	10ad      	asrs	r5, r5, #2
 801106a:	d03d      	beq.n	80110e8 <__pow5mult+0xa0>
 801106c:	69f4      	ldr	r4, [r6, #28]
 801106e:	b97c      	cbnz	r4, 8011090 <__pow5mult+0x48>
 8011070:	2010      	movs	r0, #16
 8011072:	f7ff fd7f 	bl	8010b74 <malloc>
 8011076:	4602      	mov	r2, r0
 8011078:	61f0      	str	r0, [r6, #28]
 801107a:	b928      	cbnz	r0, 8011088 <__pow5mult+0x40>
 801107c:	4b1d      	ldr	r3, [pc, #116]	; (80110f4 <__pow5mult+0xac>)
 801107e:	481e      	ldr	r0, [pc, #120]	; (80110f8 <__pow5mult+0xb0>)
 8011080:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011084:	f000 fbe4 	bl	8011850 <__assert_func>
 8011088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801108c:	6004      	str	r4, [r0, #0]
 801108e:	60c4      	str	r4, [r0, #12]
 8011090:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011098:	b94c      	cbnz	r4, 80110ae <__pow5mult+0x66>
 801109a:	f240 2171 	movw	r1, #625	; 0x271
 801109e:	4630      	mov	r0, r6
 80110a0:	f7ff ff12 	bl	8010ec8 <__i2b>
 80110a4:	2300      	movs	r3, #0
 80110a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80110aa:	4604      	mov	r4, r0
 80110ac:	6003      	str	r3, [r0, #0]
 80110ae:	f04f 0900 	mov.w	r9, #0
 80110b2:	07eb      	lsls	r3, r5, #31
 80110b4:	d50a      	bpl.n	80110cc <__pow5mult+0x84>
 80110b6:	4639      	mov	r1, r7
 80110b8:	4622      	mov	r2, r4
 80110ba:	4630      	mov	r0, r6
 80110bc:	f7ff ff1a 	bl	8010ef4 <__multiply>
 80110c0:	4639      	mov	r1, r7
 80110c2:	4680      	mov	r8, r0
 80110c4:	4630      	mov	r0, r6
 80110c6:	f7ff fe49 	bl	8010d5c <_Bfree>
 80110ca:	4647      	mov	r7, r8
 80110cc:	106d      	asrs	r5, r5, #1
 80110ce:	d00b      	beq.n	80110e8 <__pow5mult+0xa0>
 80110d0:	6820      	ldr	r0, [r4, #0]
 80110d2:	b938      	cbnz	r0, 80110e4 <__pow5mult+0x9c>
 80110d4:	4622      	mov	r2, r4
 80110d6:	4621      	mov	r1, r4
 80110d8:	4630      	mov	r0, r6
 80110da:	f7ff ff0b 	bl	8010ef4 <__multiply>
 80110de:	6020      	str	r0, [r4, #0]
 80110e0:	f8c0 9000 	str.w	r9, [r0]
 80110e4:	4604      	mov	r4, r0
 80110e6:	e7e4      	b.n	80110b2 <__pow5mult+0x6a>
 80110e8:	4638      	mov	r0, r7
 80110ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ee:	bf00      	nop
 80110f0:	08012728 	.word	0x08012728
 80110f4:	0801255d 	.word	0x0801255d
 80110f8:	080125dd 	.word	0x080125dd

080110fc <__lshift>:
 80110fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011100:	460c      	mov	r4, r1
 8011102:	6849      	ldr	r1, [r1, #4]
 8011104:	6923      	ldr	r3, [r4, #16]
 8011106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801110a:	68a3      	ldr	r3, [r4, #8]
 801110c:	4607      	mov	r7, r0
 801110e:	4691      	mov	r9, r2
 8011110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011114:	f108 0601 	add.w	r6, r8, #1
 8011118:	42b3      	cmp	r3, r6
 801111a:	db0b      	blt.n	8011134 <__lshift+0x38>
 801111c:	4638      	mov	r0, r7
 801111e:	f7ff fddd 	bl	8010cdc <_Balloc>
 8011122:	4605      	mov	r5, r0
 8011124:	b948      	cbnz	r0, 801113a <__lshift+0x3e>
 8011126:	4602      	mov	r2, r0
 8011128:	4b28      	ldr	r3, [pc, #160]	; (80111cc <__lshift+0xd0>)
 801112a:	4829      	ldr	r0, [pc, #164]	; (80111d0 <__lshift+0xd4>)
 801112c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011130:	f000 fb8e 	bl	8011850 <__assert_func>
 8011134:	3101      	adds	r1, #1
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	e7ee      	b.n	8011118 <__lshift+0x1c>
 801113a:	2300      	movs	r3, #0
 801113c:	f100 0114 	add.w	r1, r0, #20
 8011140:	f100 0210 	add.w	r2, r0, #16
 8011144:	4618      	mov	r0, r3
 8011146:	4553      	cmp	r3, sl
 8011148:	db33      	blt.n	80111b2 <__lshift+0xb6>
 801114a:	6920      	ldr	r0, [r4, #16]
 801114c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011150:	f104 0314 	add.w	r3, r4, #20
 8011154:	f019 091f 	ands.w	r9, r9, #31
 8011158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801115c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011160:	d02b      	beq.n	80111ba <__lshift+0xbe>
 8011162:	f1c9 0e20 	rsb	lr, r9, #32
 8011166:	468a      	mov	sl, r1
 8011168:	2200      	movs	r2, #0
 801116a:	6818      	ldr	r0, [r3, #0]
 801116c:	fa00 f009 	lsl.w	r0, r0, r9
 8011170:	4310      	orrs	r0, r2
 8011172:	f84a 0b04 	str.w	r0, [sl], #4
 8011176:	f853 2b04 	ldr.w	r2, [r3], #4
 801117a:	459c      	cmp	ip, r3
 801117c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011180:	d8f3      	bhi.n	801116a <__lshift+0x6e>
 8011182:	ebac 0304 	sub.w	r3, ip, r4
 8011186:	3b15      	subs	r3, #21
 8011188:	f023 0303 	bic.w	r3, r3, #3
 801118c:	3304      	adds	r3, #4
 801118e:	f104 0015 	add.w	r0, r4, #21
 8011192:	4584      	cmp	ip, r0
 8011194:	bf38      	it	cc
 8011196:	2304      	movcc	r3, #4
 8011198:	50ca      	str	r2, [r1, r3]
 801119a:	b10a      	cbz	r2, 80111a0 <__lshift+0xa4>
 801119c:	f108 0602 	add.w	r6, r8, #2
 80111a0:	3e01      	subs	r6, #1
 80111a2:	4638      	mov	r0, r7
 80111a4:	612e      	str	r6, [r5, #16]
 80111a6:	4621      	mov	r1, r4
 80111a8:	f7ff fdd8 	bl	8010d5c <_Bfree>
 80111ac:	4628      	mov	r0, r5
 80111ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80111b6:	3301      	adds	r3, #1
 80111b8:	e7c5      	b.n	8011146 <__lshift+0x4a>
 80111ba:	3904      	subs	r1, #4
 80111bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80111c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80111c4:	459c      	cmp	ip, r3
 80111c6:	d8f9      	bhi.n	80111bc <__lshift+0xc0>
 80111c8:	e7ea      	b.n	80111a0 <__lshift+0xa4>
 80111ca:	bf00      	nop
 80111cc:	080125cc 	.word	0x080125cc
 80111d0:	080125dd 	.word	0x080125dd

080111d4 <__mcmp>:
 80111d4:	b530      	push	{r4, r5, lr}
 80111d6:	6902      	ldr	r2, [r0, #16]
 80111d8:	690c      	ldr	r4, [r1, #16]
 80111da:	1b12      	subs	r2, r2, r4
 80111dc:	d10e      	bne.n	80111fc <__mcmp+0x28>
 80111de:	f100 0314 	add.w	r3, r0, #20
 80111e2:	3114      	adds	r1, #20
 80111e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80111e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80111ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80111f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80111f4:	42a5      	cmp	r5, r4
 80111f6:	d003      	beq.n	8011200 <__mcmp+0x2c>
 80111f8:	d305      	bcc.n	8011206 <__mcmp+0x32>
 80111fa:	2201      	movs	r2, #1
 80111fc:	4610      	mov	r0, r2
 80111fe:	bd30      	pop	{r4, r5, pc}
 8011200:	4283      	cmp	r3, r0
 8011202:	d3f3      	bcc.n	80111ec <__mcmp+0x18>
 8011204:	e7fa      	b.n	80111fc <__mcmp+0x28>
 8011206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801120a:	e7f7      	b.n	80111fc <__mcmp+0x28>

0801120c <__mdiff>:
 801120c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011210:	460c      	mov	r4, r1
 8011212:	4606      	mov	r6, r0
 8011214:	4611      	mov	r1, r2
 8011216:	4620      	mov	r0, r4
 8011218:	4690      	mov	r8, r2
 801121a:	f7ff ffdb 	bl	80111d4 <__mcmp>
 801121e:	1e05      	subs	r5, r0, #0
 8011220:	d110      	bne.n	8011244 <__mdiff+0x38>
 8011222:	4629      	mov	r1, r5
 8011224:	4630      	mov	r0, r6
 8011226:	f7ff fd59 	bl	8010cdc <_Balloc>
 801122a:	b930      	cbnz	r0, 801123a <__mdiff+0x2e>
 801122c:	4b3a      	ldr	r3, [pc, #232]	; (8011318 <__mdiff+0x10c>)
 801122e:	4602      	mov	r2, r0
 8011230:	f240 2137 	movw	r1, #567	; 0x237
 8011234:	4839      	ldr	r0, [pc, #228]	; (801131c <__mdiff+0x110>)
 8011236:	f000 fb0b 	bl	8011850 <__assert_func>
 801123a:	2301      	movs	r3, #1
 801123c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011244:	bfa4      	itt	ge
 8011246:	4643      	movge	r3, r8
 8011248:	46a0      	movge	r8, r4
 801124a:	4630      	mov	r0, r6
 801124c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011250:	bfa6      	itte	ge
 8011252:	461c      	movge	r4, r3
 8011254:	2500      	movge	r5, #0
 8011256:	2501      	movlt	r5, #1
 8011258:	f7ff fd40 	bl	8010cdc <_Balloc>
 801125c:	b920      	cbnz	r0, 8011268 <__mdiff+0x5c>
 801125e:	4b2e      	ldr	r3, [pc, #184]	; (8011318 <__mdiff+0x10c>)
 8011260:	4602      	mov	r2, r0
 8011262:	f240 2145 	movw	r1, #581	; 0x245
 8011266:	e7e5      	b.n	8011234 <__mdiff+0x28>
 8011268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801126c:	6926      	ldr	r6, [r4, #16]
 801126e:	60c5      	str	r5, [r0, #12]
 8011270:	f104 0914 	add.w	r9, r4, #20
 8011274:	f108 0514 	add.w	r5, r8, #20
 8011278:	f100 0e14 	add.w	lr, r0, #20
 801127c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011284:	f108 0210 	add.w	r2, r8, #16
 8011288:	46f2      	mov	sl, lr
 801128a:	2100      	movs	r1, #0
 801128c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011294:	fa11 f88b 	uxtah	r8, r1, fp
 8011298:	b299      	uxth	r1, r3
 801129a:	0c1b      	lsrs	r3, r3, #16
 801129c:	eba8 0801 	sub.w	r8, r8, r1
 80112a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80112a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80112a8:	fa1f f888 	uxth.w	r8, r8
 80112ac:	1419      	asrs	r1, r3, #16
 80112ae:	454e      	cmp	r6, r9
 80112b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80112b4:	f84a 3b04 	str.w	r3, [sl], #4
 80112b8:	d8e8      	bhi.n	801128c <__mdiff+0x80>
 80112ba:	1b33      	subs	r3, r6, r4
 80112bc:	3b15      	subs	r3, #21
 80112be:	f023 0303 	bic.w	r3, r3, #3
 80112c2:	3304      	adds	r3, #4
 80112c4:	3415      	adds	r4, #21
 80112c6:	42a6      	cmp	r6, r4
 80112c8:	bf38      	it	cc
 80112ca:	2304      	movcc	r3, #4
 80112cc:	441d      	add	r5, r3
 80112ce:	4473      	add	r3, lr
 80112d0:	469e      	mov	lr, r3
 80112d2:	462e      	mov	r6, r5
 80112d4:	4566      	cmp	r6, ip
 80112d6:	d30e      	bcc.n	80112f6 <__mdiff+0xea>
 80112d8:	f10c 0203 	add.w	r2, ip, #3
 80112dc:	1b52      	subs	r2, r2, r5
 80112de:	f022 0203 	bic.w	r2, r2, #3
 80112e2:	3d03      	subs	r5, #3
 80112e4:	45ac      	cmp	ip, r5
 80112e6:	bf38      	it	cc
 80112e8:	2200      	movcc	r2, #0
 80112ea:	4413      	add	r3, r2
 80112ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80112f0:	b17a      	cbz	r2, 8011312 <__mdiff+0x106>
 80112f2:	6107      	str	r7, [r0, #16]
 80112f4:	e7a4      	b.n	8011240 <__mdiff+0x34>
 80112f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80112fa:	fa11 f288 	uxtah	r2, r1, r8
 80112fe:	1414      	asrs	r4, r2, #16
 8011300:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011304:	b292      	uxth	r2, r2
 8011306:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801130a:	f84e 2b04 	str.w	r2, [lr], #4
 801130e:	1421      	asrs	r1, r4, #16
 8011310:	e7e0      	b.n	80112d4 <__mdiff+0xc8>
 8011312:	3f01      	subs	r7, #1
 8011314:	e7ea      	b.n	80112ec <__mdiff+0xe0>
 8011316:	bf00      	nop
 8011318:	080125cc 	.word	0x080125cc
 801131c:	080125dd 	.word	0x080125dd

08011320 <__d2b>:
 8011320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011324:	460f      	mov	r7, r1
 8011326:	2101      	movs	r1, #1
 8011328:	ec59 8b10 	vmov	r8, r9, d0
 801132c:	4616      	mov	r6, r2
 801132e:	f7ff fcd5 	bl	8010cdc <_Balloc>
 8011332:	4604      	mov	r4, r0
 8011334:	b930      	cbnz	r0, 8011344 <__d2b+0x24>
 8011336:	4602      	mov	r2, r0
 8011338:	4b24      	ldr	r3, [pc, #144]	; (80113cc <__d2b+0xac>)
 801133a:	4825      	ldr	r0, [pc, #148]	; (80113d0 <__d2b+0xb0>)
 801133c:	f240 310f 	movw	r1, #783	; 0x30f
 8011340:	f000 fa86 	bl	8011850 <__assert_func>
 8011344:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801134c:	bb2d      	cbnz	r5, 801139a <__d2b+0x7a>
 801134e:	9301      	str	r3, [sp, #4]
 8011350:	f1b8 0300 	subs.w	r3, r8, #0
 8011354:	d026      	beq.n	80113a4 <__d2b+0x84>
 8011356:	4668      	mov	r0, sp
 8011358:	9300      	str	r3, [sp, #0]
 801135a:	f7ff fd87 	bl	8010e6c <__lo0bits>
 801135e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011362:	b1e8      	cbz	r0, 80113a0 <__d2b+0x80>
 8011364:	f1c0 0320 	rsb	r3, r0, #32
 8011368:	fa02 f303 	lsl.w	r3, r2, r3
 801136c:	430b      	orrs	r3, r1
 801136e:	40c2      	lsrs	r2, r0
 8011370:	6163      	str	r3, [r4, #20]
 8011372:	9201      	str	r2, [sp, #4]
 8011374:	9b01      	ldr	r3, [sp, #4]
 8011376:	61a3      	str	r3, [r4, #24]
 8011378:	2b00      	cmp	r3, #0
 801137a:	bf14      	ite	ne
 801137c:	2202      	movne	r2, #2
 801137e:	2201      	moveq	r2, #1
 8011380:	6122      	str	r2, [r4, #16]
 8011382:	b1bd      	cbz	r5, 80113b4 <__d2b+0x94>
 8011384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011388:	4405      	add	r5, r0
 801138a:	603d      	str	r5, [r7, #0]
 801138c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011390:	6030      	str	r0, [r6, #0]
 8011392:	4620      	mov	r0, r4
 8011394:	b003      	add	sp, #12
 8011396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801139a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801139e:	e7d6      	b.n	801134e <__d2b+0x2e>
 80113a0:	6161      	str	r1, [r4, #20]
 80113a2:	e7e7      	b.n	8011374 <__d2b+0x54>
 80113a4:	a801      	add	r0, sp, #4
 80113a6:	f7ff fd61 	bl	8010e6c <__lo0bits>
 80113aa:	9b01      	ldr	r3, [sp, #4]
 80113ac:	6163      	str	r3, [r4, #20]
 80113ae:	3020      	adds	r0, #32
 80113b0:	2201      	movs	r2, #1
 80113b2:	e7e5      	b.n	8011380 <__d2b+0x60>
 80113b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113bc:	6038      	str	r0, [r7, #0]
 80113be:	6918      	ldr	r0, [r3, #16]
 80113c0:	f7ff fd34 	bl	8010e2c <__hi0bits>
 80113c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113c8:	e7e2      	b.n	8011390 <__d2b+0x70>
 80113ca:	bf00      	nop
 80113cc:	080125cc 	.word	0x080125cc
 80113d0:	080125dd 	.word	0x080125dd

080113d4 <__ssputs_r>:
 80113d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d8:	688e      	ldr	r6, [r1, #8]
 80113da:	461f      	mov	r7, r3
 80113dc:	42be      	cmp	r6, r7
 80113de:	680b      	ldr	r3, [r1, #0]
 80113e0:	4682      	mov	sl, r0
 80113e2:	460c      	mov	r4, r1
 80113e4:	4690      	mov	r8, r2
 80113e6:	d82c      	bhi.n	8011442 <__ssputs_r+0x6e>
 80113e8:	898a      	ldrh	r2, [r1, #12]
 80113ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80113ee:	d026      	beq.n	801143e <__ssputs_r+0x6a>
 80113f0:	6965      	ldr	r5, [r4, #20]
 80113f2:	6909      	ldr	r1, [r1, #16]
 80113f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113f8:	eba3 0901 	sub.w	r9, r3, r1
 80113fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011400:	1c7b      	adds	r3, r7, #1
 8011402:	444b      	add	r3, r9
 8011404:	106d      	asrs	r5, r5, #1
 8011406:	429d      	cmp	r5, r3
 8011408:	bf38      	it	cc
 801140a:	461d      	movcc	r5, r3
 801140c:	0553      	lsls	r3, r2, #21
 801140e:	d527      	bpl.n	8011460 <__ssputs_r+0x8c>
 8011410:	4629      	mov	r1, r5
 8011412:	f7ff fbd7 	bl	8010bc4 <_malloc_r>
 8011416:	4606      	mov	r6, r0
 8011418:	b360      	cbz	r0, 8011474 <__ssputs_r+0xa0>
 801141a:	6921      	ldr	r1, [r4, #16]
 801141c:	464a      	mov	r2, r9
 801141e:	f000 fa09 	bl	8011834 <memcpy>
 8011422:	89a3      	ldrh	r3, [r4, #12]
 8011424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801142c:	81a3      	strh	r3, [r4, #12]
 801142e:	6126      	str	r6, [r4, #16]
 8011430:	6165      	str	r5, [r4, #20]
 8011432:	444e      	add	r6, r9
 8011434:	eba5 0509 	sub.w	r5, r5, r9
 8011438:	6026      	str	r6, [r4, #0]
 801143a:	60a5      	str	r5, [r4, #8]
 801143c:	463e      	mov	r6, r7
 801143e:	42be      	cmp	r6, r7
 8011440:	d900      	bls.n	8011444 <__ssputs_r+0x70>
 8011442:	463e      	mov	r6, r7
 8011444:	6820      	ldr	r0, [r4, #0]
 8011446:	4632      	mov	r2, r6
 8011448:	4641      	mov	r1, r8
 801144a:	f000 f9c9 	bl	80117e0 <memmove>
 801144e:	68a3      	ldr	r3, [r4, #8]
 8011450:	1b9b      	subs	r3, r3, r6
 8011452:	60a3      	str	r3, [r4, #8]
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	4433      	add	r3, r6
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	2000      	movs	r0, #0
 801145c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011460:	462a      	mov	r2, r5
 8011462:	f000 fa3b 	bl	80118dc <_realloc_r>
 8011466:	4606      	mov	r6, r0
 8011468:	2800      	cmp	r0, #0
 801146a:	d1e0      	bne.n	801142e <__ssputs_r+0x5a>
 801146c:	6921      	ldr	r1, [r4, #16]
 801146e:	4650      	mov	r0, sl
 8011470:	f7ff fb34 	bl	8010adc <_free_r>
 8011474:	230c      	movs	r3, #12
 8011476:	f8ca 3000 	str.w	r3, [sl]
 801147a:	89a3      	ldrh	r3, [r4, #12]
 801147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011480:	81a3      	strh	r3, [r4, #12]
 8011482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011486:	e7e9      	b.n	801145c <__ssputs_r+0x88>

08011488 <_svfiprintf_r>:
 8011488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148c:	4698      	mov	r8, r3
 801148e:	898b      	ldrh	r3, [r1, #12]
 8011490:	061b      	lsls	r3, r3, #24
 8011492:	b09d      	sub	sp, #116	; 0x74
 8011494:	4607      	mov	r7, r0
 8011496:	460d      	mov	r5, r1
 8011498:	4614      	mov	r4, r2
 801149a:	d50e      	bpl.n	80114ba <_svfiprintf_r+0x32>
 801149c:	690b      	ldr	r3, [r1, #16]
 801149e:	b963      	cbnz	r3, 80114ba <_svfiprintf_r+0x32>
 80114a0:	2140      	movs	r1, #64	; 0x40
 80114a2:	f7ff fb8f 	bl	8010bc4 <_malloc_r>
 80114a6:	6028      	str	r0, [r5, #0]
 80114a8:	6128      	str	r0, [r5, #16]
 80114aa:	b920      	cbnz	r0, 80114b6 <_svfiprintf_r+0x2e>
 80114ac:	230c      	movs	r3, #12
 80114ae:	603b      	str	r3, [r7, #0]
 80114b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114b4:	e0d0      	b.n	8011658 <_svfiprintf_r+0x1d0>
 80114b6:	2340      	movs	r3, #64	; 0x40
 80114b8:	616b      	str	r3, [r5, #20]
 80114ba:	2300      	movs	r3, #0
 80114bc:	9309      	str	r3, [sp, #36]	; 0x24
 80114be:	2320      	movs	r3, #32
 80114c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80114c8:	2330      	movs	r3, #48	; 0x30
 80114ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011670 <_svfiprintf_r+0x1e8>
 80114ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114d2:	f04f 0901 	mov.w	r9, #1
 80114d6:	4623      	mov	r3, r4
 80114d8:	469a      	mov	sl, r3
 80114da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114de:	b10a      	cbz	r2, 80114e4 <_svfiprintf_r+0x5c>
 80114e0:	2a25      	cmp	r2, #37	; 0x25
 80114e2:	d1f9      	bne.n	80114d8 <_svfiprintf_r+0x50>
 80114e4:	ebba 0b04 	subs.w	fp, sl, r4
 80114e8:	d00b      	beq.n	8011502 <_svfiprintf_r+0x7a>
 80114ea:	465b      	mov	r3, fp
 80114ec:	4622      	mov	r2, r4
 80114ee:	4629      	mov	r1, r5
 80114f0:	4638      	mov	r0, r7
 80114f2:	f7ff ff6f 	bl	80113d4 <__ssputs_r>
 80114f6:	3001      	adds	r0, #1
 80114f8:	f000 80a9 	beq.w	801164e <_svfiprintf_r+0x1c6>
 80114fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114fe:	445a      	add	r2, fp
 8011500:	9209      	str	r2, [sp, #36]	; 0x24
 8011502:	f89a 3000 	ldrb.w	r3, [sl]
 8011506:	2b00      	cmp	r3, #0
 8011508:	f000 80a1 	beq.w	801164e <_svfiprintf_r+0x1c6>
 801150c:	2300      	movs	r3, #0
 801150e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011516:	f10a 0a01 	add.w	sl, sl, #1
 801151a:	9304      	str	r3, [sp, #16]
 801151c:	9307      	str	r3, [sp, #28]
 801151e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011522:	931a      	str	r3, [sp, #104]	; 0x68
 8011524:	4654      	mov	r4, sl
 8011526:	2205      	movs	r2, #5
 8011528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801152c:	4850      	ldr	r0, [pc, #320]	; (8011670 <_svfiprintf_r+0x1e8>)
 801152e:	f7ee fe77 	bl	8000220 <memchr>
 8011532:	9a04      	ldr	r2, [sp, #16]
 8011534:	b9d8      	cbnz	r0, 801156e <_svfiprintf_r+0xe6>
 8011536:	06d0      	lsls	r0, r2, #27
 8011538:	bf44      	itt	mi
 801153a:	2320      	movmi	r3, #32
 801153c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011540:	0711      	lsls	r1, r2, #28
 8011542:	bf44      	itt	mi
 8011544:	232b      	movmi	r3, #43	; 0x2b
 8011546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801154a:	f89a 3000 	ldrb.w	r3, [sl]
 801154e:	2b2a      	cmp	r3, #42	; 0x2a
 8011550:	d015      	beq.n	801157e <_svfiprintf_r+0xf6>
 8011552:	9a07      	ldr	r2, [sp, #28]
 8011554:	4654      	mov	r4, sl
 8011556:	2000      	movs	r0, #0
 8011558:	f04f 0c0a 	mov.w	ip, #10
 801155c:	4621      	mov	r1, r4
 801155e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011562:	3b30      	subs	r3, #48	; 0x30
 8011564:	2b09      	cmp	r3, #9
 8011566:	d94d      	bls.n	8011604 <_svfiprintf_r+0x17c>
 8011568:	b1b0      	cbz	r0, 8011598 <_svfiprintf_r+0x110>
 801156a:	9207      	str	r2, [sp, #28]
 801156c:	e014      	b.n	8011598 <_svfiprintf_r+0x110>
 801156e:	eba0 0308 	sub.w	r3, r0, r8
 8011572:	fa09 f303 	lsl.w	r3, r9, r3
 8011576:	4313      	orrs	r3, r2
 8011578:	9304      	str	r3, [sp, #16]
 801157a:	46a2      	mov	sl, r4
 801157c:	e7d2      	b.n	8011524 <_svfiprintf_r+0x9c>
 801157e:	9b03      	ldr	r3, [sp, #12]
 8011580:	1d19      	adds	r1, r3, #4
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	9103      	str	r1, [sp, #12]
 8011586:	2b00      	cmp	r3, #0
 8011588:	bfbb      	ittet	lt
 801158a:	425b      	neglt	r3, r3
 801158c:	f042 0202 	orrlt.w	r2, r2, #2
 8011590:	9307      	strge	r3, [sp, #28]
 8011592:	9307      	strlt	r3, [sp, #28]
 8011594:	bfb8      	it	lt
 8011596:	9204      	strlt	r2, [sp, #16]
 8011598:	7823      	ldrb	r3, [r4, #0]
 801159a:	2b2e      	cmp	r3, #46	; 0x2e
 801159c:	d10c      	bne.n	80115b8 <_svfiprintf_r+0x130>
 801159e:	7863      	ldrb	r3, [r4, #1]
 80115a0:	2b2a      	cmp	r3, #42	; 0x2a
 80115a2:	d134      	bne.n	801160e <_svfiprintf_r+0x186>
 80115a4:	9b03      	ldr	r3, [sp, #12]
 80115a6:	1d1a      	adds	r2, r3, #4
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	9203      	str	r2, [sp, #12]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	bfb8      	it	lt
 80115b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80115b4:	3402      	adds	r4, #2
 80115b6:	9305      	str	r3, [sp, #20]
 80115b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011680 <_svfiprintf_r+0x1f8>
 80115bc:	7821      	ldrb	r1, [r4, #0]
 80115be:	2203      	movs	r2, #3
 80115c0:	4650      	mov	r0, sl
 80115c2:	f7ee fe2d 	bl	8000220 <memchr>
 80115c6:	b138      	cbz	r0, 80115d8 <_svfiprintf_r+0x150>
 80115c8:	9b04      	ldr	r3, [sp, #16]
 80115ca:	eba0 000a 	sub.w	r0, r0, sl
 80115ce:	2240      	movs	r2, #64	; 0x40
 80115d0:	4082      	lsls	r2, r0
 80115d2:	4313      	orrs	r3, r2
 80115d4:	3401      	adds	r4, #1
 80115d6:	9304      	str	r3, [sp, #16]
 80115d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115dc:	4825      	ldr	r0, [pc, #148]	; (8011674 <_svfiprintf_r+0x1ec>)
 80115de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115e2:	2206      	movs	r2, #6
 80115e4:	f7ee fe1c 	bl	8000220 <memchr>
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d038      	beq.n	801165e <_svfiprintf_r+0x1d6>
 80115ec:	4b22      	ldr	r3, [pc, #136]	; (8011678 <_svfiprintf_r+0x1f0>)
 80115ee:	bb1b      	cbnz	r3, 8011638 <_svfiprintf_r+0x1b0>
 80115f0:	9b03      	ldr	r3, [sp, #12]
 80115f2:	3307      	adds	r3, #7
 80115f4:	f023 0307 	bic.w	r3, r3, #7
 80115f8:	3308      	adds	r3, #8
 80115fa:	9303      	str	r3, [sp, #12]
 80115fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115fe:	4433      	add	r3, r6
 8011600:	9309      	str	r3, [sp, #36]	; 0x24
 8011602:	e768      	b.n	80114d6 <_svfiprintf_r+0x4e>
 8011604:	fb0c 3202 	mla	r2, ip, r2, r3
 8011608:	460c      	mov	r4, r1
 801160a:	2001      	movs	r0, #1
 801160c:	e7a6      	b.n	801155c <_svfiprintf_r+0xd4>
 801160e:	2300      	movs	r3, #0
 8011610:	3401      	adds	r4, #1
 8011612:	9305      	str	r3, [sp, #20]
 8011614:	4619      	mov	r1, r3
 8011616:	f04f 0c0a 	mov.w	ip, #10
 801161a:	4620      	mov	r0, r4
 801161c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011620:	3a30      	subs	r2, #48	; 0x30
 8011622:	2a09      	cmp	r2, #9
 8011624:	d903      	bls.n	801162e <_svfiprintf_r+0x1a6>
 8011626:	2b00      	cmp	r3, #0
 8011628:	d0c6      	beq.n	80115b8 <_svfiprintf_r+0x130>
 801162a:	9105      	str	r1, [sp, #20]
 801162c:	e7c4      	b.n	80115b8 <_svfiprintf_r+0x130>
 801162e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011632:	4604      	mov	r4, r0
 8011634:	2301      	movs	r3, #1
 8011636:	e7f0      	b.n	801161a <_svfiprintf_r+0x192>
 8011638:	ab03      	add	r3, sp, #12
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	462a      	mov	r2, r5
 801163e:	4b0f      	ldr	r3, [pc, #60]	; (801167c <_svfiprintf_r+0x1f4>)
 8011640:	a904      	add	r1, sp, #16
 8011642:	4638      	mov	r0, r7
 8011644:	f7fd fe62 	bl	800f30c <_printf_float>
 8011648:	1c42      	adds	r2, r0, #1
 801164a:	4606      	mov	r6, r0
 801164c:	d1d6      	bne.n	80115fc <_svfiprintf_r+0x174>
 801164e:	89ab      	ldrh	r3, [r5, #12]
 8011650:	065b      	lsls	r3, r3, #25
 8011652:	f53f af2d 	bmi.w	80114b0 <_svfiprintf_r+0x28>
 8011656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011658:	b01d      	add	sp, #116	; 0x74
 801165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165e:	ab03      	add	r3, sp, #12
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	462a      	mov	r2, r5
 8011664:	4b05      	ldr	r3, [pc, #20]	; (801167c <_svfiprintf_r+0x1f4>)
 8011666:	a904      	add	r1, sp, #16
 8011668:	4638      	mov	r0, r7
 801166a:	f7fe f8f3 	bl	800f854 <_printf_i>
 801166e:	e7eb      	b.n	8011648 <_svfiprintf_r+0x1c0>
 8011670:	08012734 	.word	0x08012734
 8011674:	0801273e 	.word	0x0801273e
 8011678:	0800f30d 	.word	0x0800f30d
 801167c:	080113d5 	.word	0x080113d5
 8011680:	0801273a 	.word	0x0801273a

08011684 <__sflush_r>:
 8011684:	898a      	ldrh	r2, [r1, #12]
 8011686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168a:	4605      	mov	r5, r0
 801168c:	0710      	lsls	r0, r2, #28
 801168e:	460c      	mov	r4, r1
 8011690:	d458      	bmi.n	8011744 <__sflush_r+0xc0>
 8011692:	684b      	ldr	r3, [r1, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc05      	bgt.n	80116a4 <__sflush_r+0x20>
 8011698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801169a:	2b00      	cmp	r3, #0
 801169c:	dc02      	bgt.n	80116a4 <__sflush_r+0x20>
 801169e:	2000      	movs	r0, #0
 80116a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116a6:	2e00      	cmp	r6, #0
 80116a8:	d0f9      	beq.n	801169e <__sflush_r+0x1a>
 80116aa:	2300      	movs	r3, #0
 80116ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116b0:	682f      	ldr	r7, [r5, #0]
 80116b2:	6a21      	ldr	r1, [r4, #32]
 80116b4:	602b      	str	r3, [r5, #0]
 80116b6:	d032      	beq.n	801171e <__sflush_r+0x9a>
 80116b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116ba:	89a3      	ldrh	r3, [r4, #12]
 80116bc:	075a      	lsls	r2, r3, #29
 80116be:	d505      	bpl.n	80116cc <__sflush_r+0x48>
 80116c0:	6863      	ldr	r3, [r4, #4]
 80116c2:	1ac0      	subs	r0, r0, r3
 80116c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116c6:	b10b      	cbz	r3, 80116cc <__sflush_r+0x48>
 80116c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116ca:	1ac0      	subs	r0, r0, r3
 80116cc:	2300      	movs	r3, #0
 80116ce:	4602      	mov	r2, r0
 80116d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116d2:	6a21      	ldr	r1, [r4, #32]
 80116d4:	4628      	mov	r0, r5
 80116d6:	47b0      	blx	r6
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	89a3      	ldrh	r3, [r4, #12]
 80116dc:	d106      	bne.n	80116ec <__sflush_r+0x68>
 80116de:	6829      	ldr	r1, [r5, #0]
 80116e0:	291d      	cmp	r1, #29
 80116e2:	d82b      	bhi.n	801173c <__sflush_r+0xb8>
 80116e4:	4a29      	ldr	r2, [pc, #164]	; (801178c <__sflush_r+0x108>)
 80116e6:	410a      	asrs	r2, r1
 80116e8:	07d6      	lsls	r6, r2, #31
 80116ea:	d427      	bmi.n	801173c <__sflush_r+0xb8>
 80116ec:	2200      	movs	r2, #0
 80116ee:	6062      	str	r2, [r4, #4]
 80116f0:	04d9      	lsls	r1, r3, #19
 80116f2:	6922      	ldr	r2, [r4, #16]
 80116f4:	6022      	str	r2, [r4, #0]
 80116f6:	d504      	bpl.n	8011702 <__sflush_r+0x7e>
 80116f8:	1c42      	adds	r2, r0, #1
 80116fa:	d101      	bne.n	8011700 <__sflush_r+0x7c>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	b903      	cbnz	r3, 8011702 <__sflush_r+0x7e>
 8011700:	6560      	str	r0, [r4, #84]	; 0x54
 8011702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011704:	602f      	str	r7, [r5, #0]
 8011706:	2900      	cmp	r1, #0
 8011708:	d0c9      	beq.n	801169e <__sflush_r+0x1a>
 801170a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801170e:	4299      	cmp	r1, r3
 8011710:	d002      	beq.n	8011718 <__sflush_r+0x94>
 8011712:	4628      	mov	r0, r5
 8011714:	f7ff f9e2 	bl	8010adc <_free_r>
 8011718:	2000      	movs	r0, #0
 801171a:	6360      	str	r0, [r4, #52]	; 0x34
 801171c:	e7c0      	b.n	80116a0 <__sflush_r+0x1c>
 801171e:	2301      	movs	r3, #1
 8011720:	4628      	mov	r0, r5
 8011722:	47b0      	blx	r6
 8011724:	1c41      	adds	r1, r0, #1
 8011726:	d1c8      	bne.n	80116ba <__sflush_r+0x36>
 8011728:	682b      	ldr	r3, [r5, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d0c5      	beq.n	80116ba <__sflush_r+0x36>
 801172e:	2b1d      	cmp	r3, #29
 8011730:	d001      	beq.n	8011736 <__sflush_r+0xb2>
 8011732:	2b16      	cmp	r3, #22
 8011734:	d101      	bne.n	801173a <__sflush_r+0xb6>
 8011736:	602f      	str	r7, [r5, #0]
 8011738:	e7b1      	b.n	801169e <__sflush_r+0x1a>
 801173a:	89a3      	ldrh	r3, [r4, #12]
 801173c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	e7ad      	b.n	80116a0 <__sflush_r+0x1c>
 8011744:	690f      	ldr	r7, [r1, #16]
 8011746:	2f00      	cmp	r7, #0
 8011748:	d0a9      	beq.n	801169e <__sflush_r+0x1a>
 801174a:	0793      	lsls	r3, r2, #30
 801174c:	680e      	ldr	r6, [r1, #0]
 801174e:	bf08      	it	eq
 8011750:	694b      	ldreq	r3, [r1, #20]
 8011752:	600f      	str	r7, [r1, #0]
 8011754:	bf18      	it	ne
 8011756:	2300      	movne	r3, #0
 8011758:	eba6 0807 	sub.w	r8, r6, r7
 801175c:	608b      	str	r3, [r1, #8]
 801175e:	f1b8 0f00 	cmp.w	r8, #0
 8011762:	dd9c      	ble.n	801169e <__sflush_r+0x1a>
 8011764:	6a21      	ldr	r1, [r4, #32]
 8011766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011768:	4643      	mov	r3, r8
 801176a:	463a      	mov	r2, r7
 801176c:	4628      	mov	r0, r5
 801176e:	47b0      	blx	r6
 8011770:	2800      	cmp	r0, #0
 8011772:	dc06      	bgt.n	8011782 <__sflush_r+0xfe>
 8011774:	89a3      	ldrh	r3, [r4, #12]
 8011776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177a:	81a3      	strh	r3, [r4, #12]
 801177c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011780:	e78e      	b.n	80116a0 <__sflush_r+0x1c>
 8011782:	4407      	add	r7, r0
 8011784:	eba8 0800 	sub.w	r8, r8, r0
 8011788:	e7e9      	b.n	801175e <__sflush_r+0xda>
 801178a:	bf00      	nop
 801178c:	dfbffffe 	.word	0xdfbffffe

08011790 <_fflush_r>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	690b      	ldr	r3, [r1, #16]
 8011794:	4605      	mov	r5, r0
 8011796:	460c      	mov	r4, r1
 8011798:	b913      	cbnz	r3, 80117a0 <_fflush_r+0x10>
 801179a:	2500      	movs	r5, #0
 801179c:	4628      	mov	r0, r5
 801179e:	bd38      	pop	{r3, r4, r5, pc}
 80117a0:	b118      	cbz	r0, 80117aa <_fflush_r+0x1a>
 80117a2:	6a03      	ldr	r3, [r0, #32]
 80117a4:	b90b      	cbnz	r3, 80117aa <_fflush_r+0x1a>
 80117a6:	f7fe fa03 	bl	800fbb0 <__sinit>
 80117aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d0f3      	beq.n	801179a <_fflush_r+0xa>
 80117b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117b4:	07d0      	lsls	r0, r2, #31
 80117b6:	d404      	bmi.n	80117c2 <_fflush_r+0x32>
 80117b8:	0599      	lsls	r1, r3, #22
 80117ba:	d402      	bmi.n	80117c2 <_fflush_r+0x32>
 80117bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117be:	f7fe fb0e 	bl	800fdde <__retarget_lock_acquire_recursive>
 80117c2:	4628      	mov	r0, r5
 80117c4:	4621      	mov	r1, r4
 80117c6:	f7ff ff5d 	bl	8011684 <__sflush_r>
 80117ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117cc:	07da      	lsls	r2, r3, #31
 80117ce:	4605      	mov	r5, r0
 80117d0:	d4e4      	bmi.n	801179c <_fflush_r+0xc>
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	059b      	lsls	r3, r3, #22
 80117d6:	d4e1      	bmi.n	801179c <_fflush_r+0xc>
 80117d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117da:	f7fe fb01 	bl	800fde0 <__retarget_lock_release_recursive>
 80117de:	e7dd      	b.n	801179c <_fflush_r+0xc>

080117e0 <memmove>:
 80117e0:	4288      	cmp	r0, r1
 80117e2:	b510      	push	{r4, lr}
 80117e4:	eb01 0402 	add.w	r4, r1, r2
 80117e8:	d902      	bls.n	80117f0 <memmove+0x10>
 80117ea:	4284      	cmp	r4, r0
 80117ec:	4623      	mov	r3, r4
 80117ee:	d807      	bhi.n	8011800 <memmove+0x20>
 80117f0:	1e43      	subs	r3, r0, #1
 80117f2:	42a1      	cmp	r1, r4
 80117f4:	d008      	beq.n	8011808 <memmove+0x28>
 80117f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117fe:	e7f8      	b.n	80117f2 <memmove+0x12>
 8011800:	4402      	add	r2, r0
 8011802:	4601      	mov	r1, r0
 8011804:	428a      	cmp	r2, r1
 8011806:	d100      	bne.n	801180a <memmove+0x2a>
 8011808:	bd10      	pop	{r4, pc}
 801180a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801180e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011812:	e7f7      	b.n	8011804 <memmove+0x24>

08011814 <_sbrk_r>:
 8011814:	b538      	push	{r3, r4, r5, lr}
 8011816:	4d06      	ldr	r5, [pc, #24]	; (8011830 <_sbrk_r+0x1c>)
 8011818:	2300      	movs	r3, #0
 801181a:	4604      	mov	r4, r0
 801181c:	4608      	mov	r0, r1
 801181e:	602b      	str	r3, [r5, #0]
 8011820:	f7f0 fbde 	bl	8001fe0 <_sbrk>
 8011824:	1c43      	adds	r3, r0, #1
 8011826:	d102      	bne.n	801182e <_sbrk_r+0x1a>
 8011828:	682b      	ldr	r3, [r5, #0]
 801182a:	b103      	cbz	r3, 801182e <_sbrk_r+0x1a>
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	bd38      	pop	{r3, r4, r5, pc}
 8011830:	200019e4 	.word	0x200019e4

08011834 <memcpy>:
 8011834:	440a      	add	r2, r1
 8011836:	4291      	cmp	r1, r2
 8011838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801183c:	d100      	bne.n	8011840 <memcpy+0xc>
 801183e:	4770      	bx	lr
 8011840:	b510      	push	{r4, lr}
 8011842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011846:	f803 4f01 	strb.w	r4, [r3, #1]!
 801184a:	4291      	cmp	r1, r2
 801184c:	d1f9      	bne.n	8011842 <memcpy+0xe>
 801184e:	bd10      	pop	{r4, pc}

08011850 <__assert_func>:
 8011850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011852:	4614      	mov	r4, r2
 8011854:	461a      	mov	r2, r3
 8011856:	4b09      	ldr	r3, [pc, #36]	; (801187c <__assert_func+0x2c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	4605      	mov	r5, r0
 801185c:	68d8      	ldr	r0, [r3, #12]
 801185e:	b14c      	cbz	r4, 8011874 <__assert_func+0x24>
 8011860:	4b07      	ldr	r3, [pc, #28]	; (8011880 <__assert_func+0x30>)
 8011862:	9100      	str	r1, [sp, #0]
 8011864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011868:	4906      	ldr	r1, [pc, #24]	; (8011884 <__assert_func+0x34>)
 801186a:	462b      	mov	r3, r5
 801186c:	f000 f872 	bl	8011954 <fiprintf>
 8011870:	f000 f882 	bl	8011978 <abort>
 8011874:	4b04      	ldr	r3, [pc, #16]	; (8011888 <__assert_func+0x38>)
 8011876:	461c      	mov	r4, r3
 8011878:	e7f3      	b.n	8011862 <__assert_func+0x12>
 801187a:	bf00      	nop
 801187c:	200001dc 	.word	0x200001dc
 8011880:	0801274f 	.word	0x0801274f
 8011884:	0801275c 	.word	0x0801275c
 8011888:	0801278a 	.word	0x0801278a

0801188c <_calloc_r>:
 801188c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801188e:	fba1 2402 	umull	r2, r4, r1, r2
 8011892:	b94c      	cbnz	r4, 80118a8 <_calloc_r+0x1c>
 8011894:	4611      	mov	r1, r2
 8011896:	9201      	str	r2, [sp, #4]
 8011898:	f7ff f994 	bl	8010bc4 <_malloc_r>
 801189c:	9a01      	ldr	r2, [sp, #4]
 801189e:	4605      	mov	r5, r0
 80118a0:	b930      	cbnz	r0, 80118b0 <_calloc_r+0x24>
 80118a2:	4628      	mov	r0, r5
 80118a4:	b003      	add	sp, #12
 80118a6:	bd30      	pop	{r4, r5, pc}
 80118a8:	220c      	movs	r2, #12
 80118aa:	6002      	str	r2, [r0, #0]
 80118ac:	2500      	movs	r5, #0
 80118ae:	e7f8      	b.n	80118a2 <_calloc_r+0x16>
 80118b0:	4621      	mov	r1, r4
 80118b2:	f7fe fa16 	bl	800fce2 <memset>
 80118b6:	e7f4      	b.n	80118a2 <_calloc_r+0x16>

080118b8 <__ascii_mbtowc>:
 80118b8:	b082      	sub	sp, #8
 80118ba:	b901      	cbnz	r1, 80118be <__ascii_mbtowc+0x6>
 80118bc:	a901      	add	r1, sp, #4
 80118be:	b142      	cbz	r2, 80118d2 <__ascii_mbtowc+0x1a>
 80118c0:	b14b      	cbz	r3, 80118d6 <__ascii_mbtowc+0x1e>
 80118c2:	7813      	ldrb	r3, [r2, #0]
 80118c4:	600b      	str	r3, [r1, #0]
 80118c6:	7812      	ldrb	r2, [r2, #0]
 80118c8:	1e10      	subs	r0, r2, #0
 80118ca:	bf18      	it	ne
 80118cc:	2001      	movne	r0, #1
 80118ce:	b002      	add	sp, #8
 80118d0:	4770      	bx	lr
 80118d2:	4610      	mov	r0, r2
 80118d4:	e7fb      	b.n	80118ce <__ascii_mbtowc+0x16>
 80118d6:	f06f 0001 	mvn.w	r0, #1
 80118da:	e7f8      	b.n	80118ce <__ascii_mbtowc+0x16>

080118dc <_realloc_r>:
 80118dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e0:	4680      	mov	r8, r0
 80118e2:	4614      	mov	r4, r2
 80118e4:	460e      	mov	r6, r1
 80118e6:	b921      	cbnz	r1, 80118f2 <_realloc_r+0x16>
 80118e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118ec:	4611      	mov	r1, r2
 80118ee:	f7ff b969 	b.w	8010bc4 <_malloc_r>
 80118f2:	b92a      	cbnz	r2, 8011900 <_realloc_r+0x24>
 80118f4:	f7ff f8f2 	bl	8010adc <_free_r>
 80118f8:	4625      	mov	r5, r4
 80118fa:	4628      	mov	r0, r5
 80118fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011900:	f000 f841 	bl	8011986 <_malloc_usable_size_r>
 8011904:	4284      	cmp	r4, r0
 8011906:	4607      	mov	r7, r0
 8011908:	d802      	bhi.n	8011910 <_realloc_r+0x34>
 801190a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801190e:	d812      	bhi.n	8011936 <_realloc_r+0x5a>
 8011910:	4621      	mov	r1, r4
 8011912:	4640      	mov	r0, r8
 8011914:	f7ff f956 	bl	8010bc4 <_malloc_r>
 8011918:	4605      	mov	r5, r0
 801191a:	2800      	cmp	r0, #0
 801191c:	d0ed      	beq.n	80118fa <_realloc_r+0x1e>
 801191e:	42bc      	cmp	r4, r7
 8011920:	4622      	mov	r2, r4
 8011922:	4631      	mov	r1, r6
 8011924:	bf28      	it	cs
 8011926:	463a      	movcs	r2, r7
 8011928:	f7ff ff84 	bl	8011834 <memcpy>
 801192c:	4631      	mov	r1, r6
 801192e:	4640      	mov	r0, r8
 8011930:	f7ff f8d4 	bl	8010adc <_free_r>
 8011934:	e7e1      	b.n	80118fa <_realloc_r+0x1e>
 8011936:	4635      	mov	r5, r6
 8011938:	e7df      	b.n	80118fa <_realloc_r+0x1e>

0801193a <__ascii_wctomb>:
 801193a:	b149      	cbz	r1, 8011950 <__ascii_wctomb+0x16>
 801193c:	2aff      	cmp	r2, #255	; 0xff
 801193e:	bf85      	ittet	hi
 8011940:	238a      	movhi	r3, #138	; 0x8a
 8011942:	6003      	strhi	r3, [r0, #0]
 8011944:	700a      	strbls	r2, [r1, #0]
 8011946:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801194a:	bf98      	it	ls
 801194c:	2001      	movls	r0, #1
 801194e:	4770      	bx	lr
 8011950:	4608      	mov	r0, r1
 8011952:	4770      	bx	lr

08011954 <fiprintf>:
 8011954:	b40e      	push	{r1, r2, r3}
 8011956:	b503      	push	{r0, r1, lr}
 8011958:	4601      	mov	r1, r0
 801195a:	ab03      	add	r3, sp, #12
 801195c:	4805      	ldr	r0, [pc, #20]	; (8011974 <fiprintf+0x20>)
 801195e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011962:	6800      	ldr	r0, [r0, #0]
 8011964:	9301      	str	r3, [sp, #4]
 8011966:	f000 f83f 	bl	80119e8 <_vfiprintf_r>
 801196a:	b002      	add	sp, #8
 801196c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011970:	b003      	add	sp, #12
 8011972:	4770      	bx	lr
 8011974:	200001dc 	.word	0x200001dc

08011978 <abort>:
 8011978:	b508      	push	{r3, lr}
 801197a:	2006      	movs	r0, #6
 801197c:	f000 fa0c 	bl	8011d98 <raise>
 8011980:	2001      	movs	r0, #1
 8011982:	f7f0 fab5 	bl	8001ef0 <_exit>

08011986 <_malloc_usable_size_r>:
 8011986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801198a:	1f18      	subs	r0, r3, #4
 801198c:	2b00      	cmp	r3, #0
 801198e:	bfbc      	itt	lt
 8011990:	580b      	ldrlt	r3, [r1, r0]
 8011992:	18c0      	addlt	r0, r0, r3
 8011994:	4770      	bx	lr

08011996 <__sfputc_r>:
 8011996:	6893      	ldr	r3, [r2, #8]
 8011998:	3b01      	subs	r3, #1
 801199a:	2b00      	cmp	r3, #0
 801199c:	b410      	push	{r4}
 801199e:	6093      	str	r3, [r2, #8]
 80119a0:	da08      	bge.n	80119b4 <__sfputc_r+0x1e>
 80119a2:	6994      	ldr	r4, [r2, #24]
 80119a4:	42a3      	cmp	r3, r4
 80119a6:	db01      	blt.n	80119ac <__sfputc_r+0x16>
 80119a8:	290a      	cmp	r1, #10
 80119aa:	d103      	bne.n	80119b4 <__sfputc_r+0x1e>
 80119ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b0:	f000 b934 	b.w	8011c1c <__swbuf_r>
 80119b4:	6813      	ldr	r3, [r2, #0]
 80119b6:	1c58      	adds	r0, r3, #1
 80119b8:	6010      	str	r0, [r2, #0]
 80119ba:	7019      	strb	r1, [r3, #0]
 80119bc:	4608      	mov	r0, r1
 80119be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <__sfputs_r>:
 80119c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c6:	4606      	mov	r6, r0
 80119c8:	460f      	mov	r7, r1
 80119ca:	4614      	mov	r4, r2
 80119cc:	18d5      	adds	r5, r2, r3
 80119ce:	42ac      	cmp	r4, r5
 80119d0:	d101      	bne.n	80119d6 <__sfputs_r+0x12>
 80119d2:	2000      	movs	r0, #0
 80119d4:	e007      	b.n	80119e6 <__sfputs_r+0x22>
 80119d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119da:	463a      	mov	r2, r7
 80119dc:	4630      	mov	r0, r6
 80119de:	f7ff ffda 	bl	8011996 <__sfputc_r>
 80119e2:	1c43      	adds	r3, r0, #1
 80119e4:	d1f3      	bne.n	80119ce <__sfputs_r+0xa>
 80119e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119e8 <_vfiprintf_r>:
 80119e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ec:	460d      	mov	r5, r1
 80119ee:	b09d      	sub	sp, #116	; 0x74
 80119f0:	4614      	mov	r4, r2
 80119f2:	4698      	mov	r8, r3
 80119f4:	4606      	mov	r6, r0
 80119f6:	b118      	cbz	r0, 8011a00 <_vfiprintf_r+0x18>
 80119f8:	6a03      	ldr	r3, [r0, #32]
 80119fa:	b90b      	cbnz	r3, 8011a00 <_vfiprintf_r+0x18>
 80119fc:	f7fe f8d8 	bl	800fbb0 <__sinit>
 8011a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a02:	07d9      	lsls	r1, r3, #31
 8011a04:	d405      	bmi.n	8011a12 <_vfiprintf_r+0x2a>
 8011a06:	89ab      	ldrh	r3, [r5, #12]
 8011a08:	059a      	lsls	r2, r3, #22
 8011a0a:	d402      	bmi.n	8011a12 <_vfiprintf_r+0x2a>
 8011a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a0e:	f7fe f9e6 	bl	800fdde <__retarget_lock_acquire_recursive>
 8011a12:	89ab      	ldrh	r3, [r5, #12]
 8011a14:	071b      	lsls	r3, r3, #28
 8011a16:	d501      	bpl.n	8011a1c <_vfiprintf_r+0x34>
 8011a18:	692b      	ldr	r3, [r5, #16]
 8011a1a:	b99b      	cbnz	r3, 8011a44 <_vfiprintf_r+0x5c>
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	4630      	mov	r0, r6
 8011a20:	f000 f93a 	bl	8011c98 <__swsetup_r>
 8011a24:	b170      	cbz	r0, 8011a44 <_vfiprintf_r+0x5c>
 8011a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a28:	07dc      	lsls	r4, r3, #31
 8011a2a:	d504      	bpl.n	8011a36 <_vfiprintf_r+0x4e>
 8011a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a30:	b01d      	add	sp, #116	; 0x74
 8011a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a36:	89ab      	ldrh	r3, [r5, #12]
 8011a38:	0598      	lsls	r0, r3, #22
 8011a3a:	d4f7      	bmi.n	8011a2c <_vfiprintf_r+0x44>
 8011a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a3e:	f7fe f9cf 	bl	800fde0 <__retarget_lock_release_recursive>
 8011a42:	e7f3      	b.n	8011a2c <_vfiprintf_r+0x44>
 8011a44:	2300      	movs	r3, #0
 8011a46:	9309      	str	r3, [sp, #36]	; 0x24
 8011a48:	2320      	movs	r3, #32
 8011a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a52:	2330      	movs	r3, #48	; 0x30
 8011a54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011c08 <_vfiprintf_r+0x220>
 8011a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a5c:	f04f 0901 	mov.w	r9, #1
 8011a60:	4623      	mov	r3, r4
 8011a62:	469a      	mov	sl, r3
 8011a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a68:	b10a      	cbz	r2, 8011a6e <_vfiprintf_r+0x86>
 8011a6a:	2a25      	cmp	r2, #37	; 0x25
 8011a6c:	d1f9      	bne.n	8011a62 <_vfiprintf_r+0x7a>
 8011a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8011a72:	d00b      	beq.n	8011a8c <_vfiprintf_r+0xa4>
 8011a74:	465b      	mov	r3, fp
 8011a76:	4622      	mov	r2, r4
 8011a78:	4629      	mov	r1, r5
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	f7ff ffa2 	bl	80119c4 <__sfputs_r>
 8011a80:	3001      	adds	r0, #1
 8011a82:	f000 80a9 	beq.w	8011bd8 <_vfiprintf_r+0x1f0>
 8011a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a88:	445a      	add	r2, fp
 8011a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f000 80a1 	beq.w	8011bd8 <_vfiprintf_r+0x1f0>
 8011a96:	2300      	movs	r3, #0
 8011a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011aa0:	f10a 0a01 	add.w	sl, sl, #1
 8011aa4:	9304      	str	r3, [sp, #16]
 8011aa6:	9307      	str	r3, [sp, #28]
 8011aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011aac:	931a      	str	r3, [sp, #104]	; 0x68
 8011aae:	4654      	mov	r4, sl
 8011ab0:	2205      	movs	r2, #5
 8011ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab6:	4854      	ldr	r0, [pc, #336]	; (8011c08 <_vfiprintf_r+0x220>)
 8011ab8:	f7ee fbb2 	bl	8000220 <memchr>
 8011abc:	9a04      	ldr	r2, [sp, #16]
 8011abe:	b9d8      	cbnz	r0, 8011af8 <_vfiprintf_r+0x110>
 8011ac0:	06d1      	lsls	r1, r2, #27
 8011ac2:	bf44      	itt	mi
 8011ac4:	2320      	movmi	r3, #32
 8011ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011aca:	0713      	lsls	r3, r2, #28
 8011acc:	bf44      	itt	mi
 8011ace:	232b      	movmi	r3, #43	; 0x2b
 8011ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8011ada:	d015      	beq.n	8011b08 <_vfiprintf_r+0x120>
 8011adc:	9a07      	ldr	r2, [sp, #28]
 8011ade:	4654      	mov	r4, sl
 8011ae0:	2000      	movs	r0, #0
 8011ae2:	f04f 0c0a 	mov.w	ip, #10
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011aec:	3b30      	subs	r3, #48	; 0x30
 8011aee:	2b09      	cmp	r3, #9
 8011af0:	d94d      	bls.n	8011b8e <_vfiprintf_r+0x1a6>
 8011af2:	b1b0      	cbz	r0, 8011b22 <_vfiprintf_r+0x13a>
 8011af4:	9207      	str	r2, [sp, #28]
 8011af6:	e014      	b.n	8011b22 <_vfiprintf_r+0x13a>
 8011af8:	eba0 0308 	sub.w	r3, r0, r8
 8011afc:	fa09 f303 	lsl.w	r3, r9, r3
 8011b00:	4313      	orrs	r3, r2
 8011b02:	9304      	str	r3, [sp, #16]
 8011b04:	46a2      	mov	sl, r4
 8011b06:	e7d2      	b.n	8011aae <_vfiprintf_r+0xc6>
 8011b08:	9b03      	ldr	r3, [sp, #12]
 8011b0a:	1d19      	adds	r1, r3, #4
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	9103      	str	r1, [sp, #12]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	bfbb      	ittet	lt
 8011b14:	425b      	neglt	r3, r3
 8011b16:	f042 0202 	orrlt.w	r2, r2, #2
 8011b1a:	9307      	strge	r3, [sp, #28]
 8011b1c:	9307      	strlt	r3, [sp, #28]
 8011b1e:	bfb8      	it	lt
 8011b20:	9204      	strlt	r2, [sp, #16]
 8011b22:	7823      	ldrb	r3, [r4, #0]
 8011b24:	2b2e      	cmp	r3, #46	; 0x2e
 8011b26:	d10c      	bne.n	8011b42 <_vfiprintf_r+0x15a>
 8011b28:	7863      	ldrb	r3, [r4, #1]
 8011b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8011b2c:	d134      	bne.n	8011b98 <_vfiprintf_r+0x1b0>
 8011b2e:	9b03      	ldr	r3, [sp, #12]
 8011b30:	1d1a      	adds	r2, r3, #4
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	9203      	str	r2, [sp, #12]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	bfb8      	it	lt
 8011b3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011b3e:	3402      	adds	r4, #2
 8011b40:	9305      	str	r3, [sp, #20]
 8011b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011c18 <_vfiprintf_r+0x230>
 8011b46:	7821      	ldrb	r1, [r4, #0]
 8011b48:	2203      	movs	r2, #3
 8011b4a:	4650      	mov	r0, sl
 8011b4c:	f7ee fb68 	bl	8000220 <memchr>
 8011b50:	b138      	cbz	r0, 8011b62 <_vfiprintf_r+0x17a>
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	eba0 000a 	sub.w	r0, r0, sl
 8011b58:	2240      	movs	r2, #64	; 0x40
 8011b5a:	4082      	lsls	r2, r0
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	3401      	adds	r4, #1
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b66:	4829      	ldr	r0, [pc, #164]	; (8011c0c <_vfiprintf_r+0x224>)
 8011b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b6c:	2206      	movs	r2, #6
 8011b6e:	f7ee fb57 	bl	8000220 <memchr>
 8011b72:	2800      	cmp	r0, #0
 8011b74:	d03f      	beq.n	8011bf6 <_vfiprintf_r+0x20e>
 8011b76:	4b26      	ldr	r3, [pc, #152]	; (8011c10 <_vfiprintf_r+0x228>)
 8011b78:	bb1b      	cbnz	r3, 8011bc2 <_vfiprintf_r+0x1da>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	3307      	adds	r3, #7
 8011b7e:	f023 0307 	bic.w	r3, r3, #7
 8011b82:	3308      	adds	r3, #8
 8011b84:	9303      	str	r3, [sp, #12]
 8011b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b88:	443b      	add	r3, r7
 8011b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b8c:	e768      	b.n	8011a60 <_vfiprintf_r+0x78>
 8011b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b92:	460c      	mov	r4, r1
 8011b94:	2001      	movs	r0, #1
 8011b96:	e7a6      	b.n	8011ae6 <_vfiprintf_r+0xfe>
 8011b98:	2300      	movs	r3, #0
 8011b9a:	3401      	adds	r4, #1
 8011b9c:	9305      	str	r3, [sp, #20]
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	f04f 0c0a 	mov.w	ip, #10
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011baa:	3a30      	subs	r2, #48	; 0x30
 8011bac:	2a09      	cmp	r2, #9
 8011bae:	d903      	bls.n	8011bb8 <_vfiprintf_r+0x1d0>
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d0c6      	beq.n	8011b42 <_vfiprintf_r+0x15a>
 8011bb4:	9105      	str	r1, [sp, #20]
 8011bb6:	e7c4      	b.n	8011b42 <_vfiprintf_r+0x15a>
 8011bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	e7f0      	b.n	8011ba4 <_vfiprintf_r+0x1bc>
 8011bc2:	ab03      	add	r3, sp, #12
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	462a      	mov	r2, r5
 8011bc8:	4b12      	ldr	r3, [pc, #72]	; (8011c14 <_vfiprintf_r+0x22c>)
 8011bca:	a904      	add	r1, sp, #16
 8011bcc:	4630      	mov	r0, r6
 8011bce:	f7fd fb9d 	bl	800f30c <_printf_float>
 8011bd2:	4607      	mov	r7, r0
 8011bd4:	1c78      	adds	r0, r7, #1
 8011bd6:	d1d6      	bne.n	8011b86 <_vfiprintf_r+0x19e>
 8011bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bda:	07d9      	lsls	r1, r3, #31
 8011bdc:	d405      	bmi.n	8011bea <_vfiprintf_r+0x202>
 8011bde:	89ab      	ldrh	r3, [r5, #12]
 8011be0:	059a      	lsls	r2, r3, #22
 8011be2:	d402      	bmi.n	8011bea <_vfiprintf_r+0x202>
 8011be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011be6:	f7fe f8fb 	bl	800fde0 <__retarget_lock_release_recursive>
 8011bea:	89ab      	ldrh	r3, [r5, #12]
 8011bec:	065b      	lsls	r3, r3, #25
 8011bee:	f53f af1d 	bmi.w	8011a2c <_vfiprintf_r+0x44>
 8011bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bf4:	e71c      	b.n	8011a30 <_vfiprintf_r+0x48>
 8011bf6:	ab03      	add	r3, sp, #12
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	462a      	mov	r2, r5
 8011bfc:	4b05      	ldr	r3, [pc, #20]	; (8011c14 <_vfiprintf_r+0x22c>)
 8011bfe:	a904      	add	r1, sp, #16
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7fd fe27 	bl	800f854 <_printf_i>
 8011c06:	e7e4      	b.n	8011bd2 <_vfiprintf_r+0x1ea>
 8011c08:	08012734 	.word	0x08012734
 8011c0c:	0801273e 	.word	0x0801273e
 8011c10:	0800f30d 	.word	0x0800f30d
 8011c14:	080119c5 	.word	0x080119c5
 8011c18:	0801273a 	.word	0x0801273a

08011c1c <__swbuf_r>:
 8011c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1e:	460e      	mov	r6, r1
 8011c20:	4614      	mov	r4, r2
 8011c22:	4605      	mov	r5, r0
 8011c24:	b118      	cbz	r0, 8011c2e <__swbuf_r+0x12>
 8011c26:	6a03      	ldr	r3, [r0, #32]
 8011c28:	b90b      	cbnz	r3, 8011c2e <__swbuf_r+0x12>
 8011c2a:	f7fd ffc1 	bl	800fbb0 <__sinit>
 8011c2e:	69a3      	ldr	r3, [r4, #24]
 8011c30:	60a3      	str	r3, [r4, #8]
 8011c32:	89a3      	ldrh	r3, [r4, #12]
 8011c34:	071a      	lsls	r2, r3, #28
 8011c36:	d525      	bpl.n	8011c84 <__swbuf_r+0x68>
 8011c38:	6923      	ldr	r3, [r4, #16]
 8011c3a:	b31b      	cbz	r3, 8011c84 <__swbuf_r+0x68>
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	6922      	ldr	r2, [r4, #16]
 8011c40:	1a98      	subs	r0, r3, r2
 8011c42:	6963      	ldr	r3, [r4, #20]
 8011c44:	b2f6      	uxtb	r6, r6
 8011c46:	4283      	cmp	r3, r0
 8011c48:	4637      	mov	r7, r6
 8011c4a:	dc04      	bgt.n	8011c56 <__swbuf_r+0x3a>
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f7ff fd9e 	bl	8011790 <_fflush_r>
 8011c54:	b9e0      	cbnz	r0, 8011c90 <__swbuf_r+0x74>
 8011c56:	68a3      	ldr	r3, [r4, #8]
 8011c58:	3b01      	subs	r3, #1
 8011c5a:	60a3      	str	r3, [r4, #8]
 8011c5c:	6823      	ldr	r3, [r4, #0]
 8011c5e:	1c5a      	adds	r2, r3, #1
 8011c60:	6022      	str	r2, [r4, #0]
 8011c62:	701e      	strb	r6, [r3, #0]
 8011c64:	6962      	ldr	r2, [r4, #20]
 8011c66:	1c43      	adds	r3, r0, #1
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d004      	beq.n	8011c76 <__swbuf_r+0x5a>
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	07db      	lsls	r3, r3, #31
 8011c70:	d506      	bpl.n	8011c80 <__swbuf_r+0x64>
 8011c72:	2e0a      	cmp	r6, #10
 8011c74:	d104      	bne.n	8011c80 <__swbuf_r+0x64>
 8011c76:	4621      	mov	r1, r4
 8011c78:	4628      	mov	r0, r5
 8011c7a:	f7ff fd89 	bl	8011790 <_fflush_r>
 8011c7e:	b938      	cbnz	r0, 8011c90 <__swbuf_r+0x74>
 8011c80:	4638      	mov	r0, r7
 8011c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c84:	4621      	mov	r1, r4
 8011c86:	4628      	mov	r0, r5
 8011c88:	f000 f806 	bl	8011c98 <__swsetup_r>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d0d5      	beq.n	8011c3c <__swbuf_r+0x20>
 8011c90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c94:	e7f4      	b.n	8011c80 <__swbuf_r+0x64>
	...

08011c98 <__swsetup_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4b2a      	ldr	r3, [pc, #168]	; (8011d44 <__swsetup_r+0xac>)
 8011c9c:	4605      	mov	r5, r0
 8011c9e:	6818      	ldr	r0, [r3, #0]
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	b118      	cbz	r0, 8011cac <__swsetup_r+0x14>
 8011ca4:	6a03      	ldr	r3, [r0, #32]
 8011ca6:	b90b      	cbnz	r3, 8011cac <__swsetup_r+0x14>
 8011ca8:	f7fd ff82 	bl	800fbb0 <__sinit>
 8011cac:	89a3      	ldrh	r3, [r4, #12]
 8011cae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cb2:	0718      	lsls	r0, r3, #28
 8011cb4:	d422      	bmi.n	8011cfc <__swsetup_r+0x64>
 8011cb6:	06d9      	lsls	r1, r3, #27
 8011cb8:	d407      	bmi.n	8011cca <__swsetup_r+0x32>
 8011cba:	2309      	movs	r3, #9
 8011cbc:	602b      	str	r3, [r5, #0]
 8011cbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011cc2:	81a3      	strh	r3, [r4, #12]
 8011cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cc8:	e034      	b.n	8011d34 <__swsetup_r+0x9c>
 8011cca:	0758      	lsls	r0, r3, #29
 8011ccc:	d512      	bpl.n	8011cf4 <__swsetup_r+0x5c>
 8011cce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cd0:	b141      	cbz	r1, 8011ce4 <__swsetup_r+0x4c>
 8011cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cd6:	4299      	cmp	r1, r3
 8011cd8:	d002      	beq.n	8011ce0 <__swsetup_r+0x48>
 8011cda:	4628      	mov	r0, r5
 8011cdc:	f7fe fefe 	bl	8010adc <_free_r>
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	6363      	str	r3, [r4, #52]	; 0x34
 8011ce4:	89a3      	ldrh	r3, [r4, #12]
 8011ce6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011cea:	81a3      	strh	r3, [r4, #12]
 8011cec:	2300      	movs	r3, #0
 8011cee:	6063      	str	r3, [r4, #4]
 8011cf0:	6923      	ldr	r3, [r4, #16]
 8011cf2:	6023      	str	r3, [r4, #0]
 8011cf4:	89a3      	ldrh	r3, [r4, #12]
 8011cf6:	f043 0308 	orr.w	r3, r3, #8
 8011cfa:	81a3      	strh	r3, [r4, #12]
 8011cfc:	6923      	ldr	r3, [r4, #16]
 8011cfe:	b94b      	cbnz	r3, 8011d14 <__swsetup_r+0x7c>
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d0a:	d003      	beq.n	8011d14 <__swsetup_r+0x7c>
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f000 f884 	bl	8011e1c <__smakebuf_r>
 8011d14:	89a0      	ldrh	r0, [r4, #12]
 8011d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d1a:	f010 0301 	ands.w	r3, r0, #1
 8011d1e:	d00a      	beq.n	8011d36 <__swsetup_r+0x9e>
 8011d20:	2300      	movs	r3, #0
 8011d22:	60a3      	str	r3, [r4, #8]
 8011d24:	6963      	ldr	r3, [r4, #20]
 8011d26:	425b      	negs	r3, r3
 8011d28:	61a3      	str	r3, [r4, #24]
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	b943      	cbnz	r3, 8011d40 <__swsetup_r+0xa8>
 8011d2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d32:	d1c4      	bne.n	8011cbe <__swsetup_r+0x26>
 8011d34:	bd38      	pop	{r3, r4, r5, pc}
 8011d36:	0781      	lsls	r1, r0, #30
 8011d38:	bf58      	it	pl
 8011d3a:	6963      	ldrpl	r3, [r4, #20]
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	e7f4      	b.n	8011d2a <__swsetup_r+0x92>
 8011d40:	2000      	movs	r0, #0
 8011d42:	e7f7      	b.n	8011d34 <__swsetup_r+0x9c>
 8011d44:	200001dc 	.word	0x200001dc

08011d48 <_raise_r>:
 8011d48:	291f      	cmp	r1, #31
 8011d4a:	b538      	push	{r3, r4, r5, lr}
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	460d      	mov	r5, r1
 8011d50:	d904      	bls.n	8011d5c <_raise_r+0x14>
 8011d52:	2316      	movs	r3, #22
 8011d54:	6003      	str	r3, [r0, #0]
 8011d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011d5e:	b112      	cbz	r2, 8011d66 <_raise_r+0x1e>
 8011d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d64:	b94b      	cbnz	r3, 8011d7a <_raise_r+0x32>
 8011d66:	4620      	mov	r0, r4
 8011d68:	f000 f830 	bl	8011dcc <_getpid_r>
 8011d6c:	462a      	mov	r2, r5
 8011d6e:	4601      	mov	r1, r0
 8011d70:	4620      	mov	r0, r4
 8011d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d76:	f000 b817 	b.w	8011da8 <_kill_r>
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d00a      	beq.n	8011d94 <_raise_r+0x4c>
 8011d7e:	1c59      	adds	r1, r3, #1
 8011d80:	d103      	bne.n	8011d8a <_raise_r+0x42>
 8011d82:	2316      	movs	r3, #22
 8011d84:	6003      	str	r3, [r0, #0]
 8011d86:	2001      	movs	r0, #1
 8011d88:	e7e7      	b.n	8011d5a <_raise_r+0x12>
 8011d8a:	2400      	movs	r4, #0
 8011d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d90:	4628      	mov	r0, r5
 8011d92:	4798      	blx	r3
 8011d94:	2000      	movs	r0, #0
 8011d96:	e7e0      	b.n	8011d5a <_raise_r+0x12>

08011d98 <raise>:
 8011d98:	4b02      	ldr	r3, [pc, #8]	; (8011da4 <raise+0xc>)
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	6818      	ldr	r0, [r3, #0]
 8011d9e:	f7ff bfd3 	b.w	8011d48 <_raise_r>
 8011da2:	bf00      	nop
 8011da4:	200001dc 	.word	0x200001dc

08011da8 <_kill_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d07      	ldr	r5, [pc, #28]	; (8011dc8 <_kill_r+0x20>)
 8011dac:	2300      	movs	r3, #0
 8011dae:	4604      	mov	r4, r0
 8011db0:	4608      	mov	r0, r1
 8011db2:	4611      	mov	r1, r2
 8011db4:	602b      	str	r3, [r5, #0]
 8011db6:	f7f0 f88b 	bl	8001ed0 <_kill>
 8011dba:	1c43      	adds	r3, r0, #1
 8011dbc:	d102      	bne.n	8011dc4 <_kill_r+0x1c>
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	b103      	cbz	r3, 8011dc4 <_kill_r+0x1c>
 8011dc2:	6023      	str	r3, [r4, #0]
 8011dc4:	bd38      	pop	{r3, r4, r5, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200019e4 	.word	0x200019e4

08011dcc <_getpid_r>:
 8011dcc:	f7f0 b878 	b.w	8001ec0 <_getpid>

08011dd0 <__swhatbuf_r>:
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dd8:	2900      	cmp	r1, #0
 8011dda:	b096      	sub	sp, #88	; 0x58
 8011ddc:	4615      	mov	r5, r2
 8011dde:	461e      	mov	r6, r3
 8011de0:	da0d      	bge.n	8011dfe <__swhatbuf_r+0x2e>
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011de8:	f04f 0100 	mov.w	r1, #0
 8011dec:	bf0c      	ite	eq
 8011dee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011df2:	2340      	movne	r3, #64	; 0x40
 8011df4:	2000      	movs	r0, #0
 8011df6:	6031      	str	r1, [r6, #0]
 8011df8:	602b      	str	r3, [r5, #0]
 8011dfa:	b016      	add	sp, #88	; 0x58
 8011dfc:	bd70      	pop	{r4, r5, r6, pc}
 8011dfe:	466a      	mov	r2, sp
 8011e00:	f000 f848 	bl	8011e94 <_fstat_r>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	dbec      	blt.n	8011de2 <__swhatbuf_r+0x12>
 8011e08:	9901      	ldr	r1, [sp, #4]
 8011e0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011e0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011e12:	4259      	negs	r1, r3
 8011e14:	4159      	adcs	r1, r3
 8011e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e1a:	e7eb      	b.n	8011df4 <__swhatbuf_r+0x24>

08011e1c <__smakebuf_r>:
 8011e1c:	898b      	ldrh	r3, [r1, #12]
 8011e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e20:	079d      	lsls	r5, r3, #30
 8011e22:	4606      	mov	r6, r0
 8011e24:	460c      	mov	r4, r1
 8011e26:	d507      	bpl.n	8011e38 <__smakebuf_r+0x1c>
 8011e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	6123      	str	r3, [r4, #16]
 8011e30:	2301      	movs	r3, #1
 8011e32:	6163      	str	r3, [r4, #20]
 8011e34:	b002      	add	sp, #8
 8011e36:	bd70      	pop	{r4, r5, r6, pc}
 8011e38:	ab01      	add	r3, sp, #4
 8011e3a:	466a      	mov	r2, sp
 8011e3c:	f7ff ffc8 	bl	8011dd0 <__swhatbuf_r>
 8011e40:	9900      	ldr	r1, [sp, #0]
 8011e42:	4605      	mov	r5, r0
 8011e44:	4630      	mov	r0, r6
 8011e46:	f7fe febd 	bl	8010bc4 <_malloc_r>
 8011e4a:	b948      	cbnz	r0, 8011e60 <__smakebuf_r+0x44>
 8011e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e50:	059a      	lsls	r2, r3, #22
 8011e52:	d4ef      	bmi.n	8011e34 <__smakebuf_r+0x18>
 8011e54:	f023 0303 	bic.w	r3, r3, #3
 8011e58:	f043 0302 	orr.w	r3, r3, #2
 8011e5c:	81a3      	strh	r3, [r4, #12]
 8011e5e:	e7e3      	b.n	8011e28 <__smakebuf_r+0xc>
 8011e60:	89a3      	ldrh	r3, [r4, #12]
 8011e62:	6020      	str	r0, [r4, #0]
 8011e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e68:	81a3      	strh	r3, [r4, #12]
 8011e6a:	9b00      	ldr	r3, [sp, #0]
 8011e6c:	6163      	str	r3, [r4, #20]
 8011e6e:	9b01      	ldr	r3, [sp, #4]
 8011e70:	6120      	str	r0, [r4, #16]
 8011e72:	b15b      	cbz	r3, 8011e8c <__smakebuf_r+0x70>
 8011e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f000 f81d 	bl	8011eb8 <_isatty_r>
 8011e7e:	b128      	cbz	r0, 8011e8c <__smakebuf_r+0x70>
 8011e80:	89a3      	ldrh	r3, [r4, #12]
 8011e82:	f023 0303 	bic.w	r3, r3, #3
 8011e86:	f043 0301 	orr.w	r3, r3, #1
 8011e8a:	81a3      	strh	r3, [r4, #12]
 8011e8c:	89a3      	ldrh	r3, [r4, #12]
 8011e8e:	431d      	orrs	r5, r3
 8011e90:	81a5      	strh	r5, [r4, #12]
 8011e92:	e7cf      	b.n	8011e34 <__smakebuf_r+0x18>

08011e94 <_fstat_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	4d07      	ldr	r5, [pc, #28]	; (8011eb4 <_fstat_r+0x20>)
 8011e98:	2300      	movs	r3, #0
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	4608      	mov	r0, r1
 8011e9e:	4611      	mov	r1, r2
 8011ea0:	602b      	str	r3, [r5, #0]
 8011ea2:	f7f0 f874 	bl	8001f8e <_fstat>
 8011ea6:	1c43      	adds	r3, r0, #1
 8011ea8:	d102      	bne.n	8011eb0 <_fstat_r+0x1c>
 8011eaa:	682b      	ldr	r3, [r5, #0]
 8011eac:	b103      	cbz	r3, 8011eb0 <_fstat_r+0x1c>
 8011eae:	6023      	str	r3, [r4, #0]
 8011eb0:	bd38      	pop	{r3, r4, r5, pc}
 8011eb2:	bf00      	nop
 8011eb4:	200019e4 	.word	0x200019e4

08011eb8 <_isatty_r>:
 8011eb8:	b538      	push	{r3, r4, r5, lr}
 8011eba:	4d06      	ldr	r5, [pc, #24]	; (8011ed4 <_isatty_r+0x1c>)
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	4608      	mov	r0, r1
 8011ec2:	602b      	str	r3, [r5, #0]
 8011ec4:	f7f0 f873 	bl	8001fae <_isatty>
 8011ec8:	1c43      	adds	r3, r0, #1
 8011eca:	d102      	bne.n	8011ed2 <_isatty_r+0x1a>
 8011ecc:	682b      	ldr	r3, [r5, #0]
 8011ece:	b103      	cbz	r3, 8011ed2 <_isatty_r+0x1a>
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	200019e4 	.word	0x200019e4

08011ed8 <atan2>:
 8011ed8:	f000 b802 	b.w	8011ee0 <__ieee754_atan2>
 8011edc:	0000      	movs	r0, r0
	...

08011ee0 <__ieee754_atan2>:
 8011ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee4:	ec57 6b11 	vmov	r6, r7, d1
 8011ee8:	4273      	negs	r3, r6
 8011eea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8012068 <__ieee754_atan2+0x188>
 8011eee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011ef2:	4333      	orrs	r3, r6
 8011ef4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011ef8:	4543      	cmp	r3, r8
 8011efa:	ec51 0b10 	vmov	r0, r1, d0
 8011efe:	ee11 5a10 	vmov	r5, s2
 8011f02:	d80a      	bhi.n	8011f1a <__ieee754_atan2+0x3a>
 8011f04:	4244      	negs	r4, r0
 8011f06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f0a:	4304      	orrs	r4, r0
 8011f0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011f10:	4544      	cmp	r4, r8
 8011f12:	ee10 9a10 	vmov	r9, s0
 8011f16:	468e      	mov	lr, r1
 8011f18:	d907      	bls.n	8011f2a <__ieee754_atan2+0x4a>
 8011f1a:	4632      	mov	r2, r6
 8011f1c:	463b      	mov	r3, r7
 8011f1e:	f7ee f9dd 	bl	80002dc <__adddf3>
 8011f22:	ec41 0b10 	vmov	d0, r0, r1
 8011f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011f2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f32:	4334      	orrs	r4, r6
 8011f34:	d103      	bne.n	8011f3e <__ieee754_atan2+0x5e>
 8011f36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f3a:	f000 b899 	b.w	8012070 <atan>
 8011f3e:	17bc      	asrs	r4, r7, #30
 8011f40:	f004 0402 	and.w	r4, r4, #2
 8011f44:	ea53 0909 	orrs.w	r9, r3, r9
 8011f48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011f4c:	d107      	bne.n	8011f5e <__ieee754_atan2+0x7e>
 8011f4e:	2c02      	cmp	r4, #2
 8011f50:	d05f      	beq.n	8012012 <__ieee754_atan2+0x132>
 8011f52:	2c03      	cmp	r4, #3
 8011f54:	d1e5      	bne.n	8011f22 <__ieee754_atan2+0x42>
 8011f56:	a140      	add	r1, pc, #256	; (adr r1, 8012058 <__ieee754_atan2+0x178>)
 8011f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f5c:	e7e1      	b.n	8011f22 <__ieee754_atan2+0x42>
 8011f5e:	4315      	orrs	r5, r2
 8011f60:	d106      	bne.n	8011f70 <__ieee754_atan2+0x90>
 8011f62:	f1be 0f00 	cmp.w	lr, #0
 8011f66:	da5f      	bge.n	8012028 <__ieee754_atan2+0x148>
 8011f68:	a13d      	add	r1, pc, #244	; (adr r1, 8012060 <__ieee754_atan2+0x180>)
 8011f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f6e:	e7d8      	b.n	8011f22 <__ieee754_atan2+0x42>
 8011f70:	4542      	cmp	r2, r8
 8011f72:	d10f      	bne.n	8011f94 <__ieee754_atan2+0xb4>
 8011f74:	4293      	cmp	r3, r2
 8011f76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011f7a:	d107      	bne.n	8011f8c <__ieee754_atan2+0xac>
 8011f7c:	2c02      	cmp	r4, #2
 8011f7e:	d84c      	bhi.n	801201a <__ieee754_atan2+0x13a>
 8011f80:	4b33      	ldr	r3, [pc, #204]	; (8012050 <__ieee754_atan2+0x170>)
 8011f82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f8a:	e7ca      	b.n	8011f22 <__ieee754_atan2+0x42>
 8011f8c:	2c02      	cmp	r4, #2
 8011f8e:	d848      	bhi.n	8012022 <__ieee754_atan2+0x142>
 8011f90:	4b30      	ldr	r3, [pc, #192]	; (8012054 <__ieee754_atan2+0x174>)
 8011f92:	e7f6      	b.n	8011f82 <__ieee754_atan2+0xa2>
 8011f94:	4543      	cmp	r3, r8
 8011f96:	d0e4      	beq.n	8011f62 <__ieee754_atan2+0x82>
 8011f98:	1a9b      	subs	r3, r3, r2
 8011f9a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011f9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011fa2:	da1e      	bge.n	8011fe2 <__ieee754_atan2+0x102>
 8011fa4:	2f00      	cmp	r7, #0
 8011fa6:	da01      	bge.n	8011fac <__ieee754_atan2+0xcc>
 8011fa8:	323c      	adds	r2, #60	; 0x3c
 8011faa:	db1e      	blt.n	8011fea <__ieee754_atan2+0x10a>
 8011fac:	4632      	mov	r2, r6
 8011fae:	463b      	mov	r3, r7
 8011fb0:	f7ee fc74 	bl	800089c <__aeabi_ddiv>
 8011fb4:	ec41 0b10 	vmov	d0, r0, r1
 8011fb8:	f000 f9fa 	bl	80123b0 <fabs>
 8011fbc:	f000 f858 	bl	8012070 <atan>
 8011fc0:	ec51 0b10 	vmov	r0, r1, d0
 8011fc4:	2c01      	cmp	r4, #1
 8011fc6:	d013      	beq.n	8011ff0 <__ieee754_atan2+0x110>
 8011fc8:	2c02      	cmp	r4, #2
 8011fca:	d015      	beq.n	8011ff8 <__ieee754_atan2+0x118>
 8011fcc:	2c00      	cmp	r4, #0
 8011fce:	d0a8      	beq.n	8011f22 <__ieee754_atan2+0x42>
 8011fd0:	a317      	add	r3, pc, #92	; (adr r3, 8012030 <__ieee754_atan2+0x150>)
 8011fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd6:	f7ee f97f 	bl	80002d8 <__aeabi_dsub>
 8011fda:	a317      	add	r3, pc, #92	; (adr r3, 8012038 <__ieee754_atan2+0x158>)
 8011fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe0:	e014      	b.n	801200c <__ieee754_atan2+0x12c>
 8011fe2:	a117      	add	r1, pc, #92	; (adr r1, 8012040 <__ieee754_atan2+0x160>)
 8011fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fe8:	e7ec      	b.n	8011fc4 <__ieee754_atan2+0xe4>
 8011fea:	2000      	movs	r0, #0
 8011fec:	2100      	movs	r1, #0
 8011fee:	e7e9      	b.n	8011fc4 <__ieee754_atan2+0xe4>
 8011ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	e794      	b.n	8011f22 <__ieee754_atan2+0x42>
 8011ff8:	a30d      	add	r3, pc, #52	; (adr r3, 8012030 <__ieee754_atan2+0x150>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	f7ee f96b 	bl	80002d8 <__aeabi_dsub>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	a10c      	add	r1, pc, #48	; (adr r1, 8012038 <__ieee754_atan2+0x158>)
 8012008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801200c:	f7ee f964 	bl	80002d8 <__aeabi_dsub>
 8012010:	e787      	b.n	8011f22 <__ieee754_atan2+0x42>
 8012012:	a109      	add	r1, pc, #36	; (adr r1, 8012038 <__ieee754_atan2+0x158>)
 8012014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012018:	e783      	b.n	8011f22 <__ieee754_atan2+0x42>
 801201a:	a10b      	add	r1, pc, #44	; (adr r1, 8012048 <__ieee754_atan2+0x168>)
 801201c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012020:	e77f      	b.n	8011f22 <__ieee754_atan2+0x42>
 8012022:	2000      	movs	r0, #0
 8012024:	2100      	movs	r1, #0
 8012026:	e77c      	b.n	8011f22 <__ieee754_atan2+0x42>
 8012028:	a105      	add	r1, pc, #20	; (adr r1, 8012040 <__ieee754_atan2+0x160>)
 801202a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801202e:	e778      	b.n	8011f22 <__ieee754_atan2+0x42>
 8012030:	33145c07 	.word	0x33145c07
 8012034:	3ca1a626 	.word	0x3ca1a626
 8012038:	54442d18 	.word	0x54442d18
 801203c:	400921fb 	.word	0x400921fb
 8012040:	54442d18 	.word	0x54442d18
 8012044:	3ff921fb 	.word	0x3ff921fb
 8012048:	54442d18 	.word	0x54442d18
 801204c:	3fe921fb 	.word	0x3fe921fb
 8012050:	08012890 	.word	0x08012890
 8012054:	080128a8 	.word	0x080128a8
 8012058:	54442d18 	.word	0x54442d18
 801205c:	c00921fb 	.word	0xc00921fb
 8012060:	54442d18 	.word	0x54442d18
 8012064:	bff921fb 	.word	0xbff921fb
 8012068:	7ff00000 	.word	0x7ff00000
 801206c:	00000000 	.word	0x00000000

08012070 <atan>:
 8012070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	ec55 4b10 	vmov	r4, r5, d0
 8012078:	4bc3      	ldr	r3, [pc, #780]	; (8012388 <atan+0x318>)
 801207a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801207e:	429e      	cmp	r6, r3
 8012080:	46ab      	mov	fp, r5
 8012082:	dd18      	ble.n	80120b6 <atan+0x46>
 8012084:	4bc1      	ldr	r3, [pc, #772]	; (801238c <atan+0x31c>)
 8012086:	429e      	cmp	r6, r3
 8012088:	dc01      	bgt.n	801208e <atan+0x1e>
 801208a:	d109      	bne.n	80120a0 <atan+0x30>
 801208c:	b144      	cbz	r4, 80120a0 <atan+0x30>
 801208e:	4622      	mov	r2, r4
 8012090:	462b      	mov	r3, r5
 8012092:	4620      	mov	r0, r4
 8012094:	4629      	mov	r1, r5
 8012096:	f7ee f921 	bl	80002dc <__adddf3>
 801209a:	4604      	mov	r4, r0
 801209c:	460d      	mov	r5, r1
 801209e:	e006      	b.n	80120ae <atan+0x3e>
 80120a0:	f1bb 0f00 	cmp.w	fp, #0
 80120a4:	f300 8131 	bgt.w	801230a <atan+0x29a>
 80120a8:	a59b      	add	r5, pc, #620	; (adr r5, 8012318 <atan+0x2a8>)
 80120aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80120ae:	ec45 4b10 	vmov	d0, r4, r5
 80120b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b6:	4bb6      	ldr	r3, [pc, #728]	; (8012390 <atan+0x320>)
 80120b8:	429e      	cmp	r6, r3
 80120ba:	dc14      	bgt.n	80120e6 <atan+0x76>
 80120bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80120c0:	429e      	cmp	r6, r3
 80120c2:	dc0d      	bgt.n	80120e0 <atan+0x70>
 80120c4:	a396      	add	r3, pc, #600	; (adr r3, 8012320 <atan+0x2b0>)
 80120c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ca:	ee10 0a10 	vmov	r0, s0
 80120ce:	4629      	mov	r1, r5
 80120d0:	f7ee f904 	bl	80002dc <__adddf3>
 80120d4:	4baf      	ldr	r3, [pc, #700]	; (8012394 <atan+0x324>)
 80120d6:	2200      	movs	r2, #0
 80120d8:	f7ee fd46 	bl	8000b68 <__aeabi_dcmpgt>
 80120dc:	2800      	cmp	r0, #0
 80120de:	d1e6      	bne.n	80120ae <atan+0x3e>
 80120e0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80120e4:	e02b      	b.n	801213e <atan+0xce>
 80120e6:	f000 f963 	bl	80123b0 <fabs>
 80120ea:	4bab      	ldr	r3, [pc, #684]	; (8012398 <atan+0x328>)
 80120ec:	429e      	cmp	r6, r3
 80120ee:	ec55 4b10 	vmov	r4, r5, d0
 80120f2:	f300 80bf 	bgt.w	8012274 <atan+0x204>
 80120f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80120fa:	429e      	cmp	r6, r3
 80120fc:	f300 80a0 	bgt.w	8012240 <atan+0x1d0>
 8012100:	ee10 2a10 	vmov	r2, s0
 8012104:	ee10 0a10 	vmov	r0, s0
 8012108:	462b      	mov	r3, r5
 801210a:	4629      	mov	r1, r5
 801210c:	f7ee f8e6 	bl	80002dc <__adddf3>
 8012110:	4ba0      	ldr	r3, [pc, #640]	; (8012394 <atan+0x324>)
 8012112:	2200      	movs	r2, #0
 8012114:	f7ee f8e0 	bl	80002d8 <__aeabi_dsub>
 8012118:	2200      	movs	r2, #0
 801211a:	4606      	mov	r6, r0
 801211c:	460f      	mov	r7, r1
 801211e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012122:	4620      	mov	r0, r4
 8012124:	4629      	mov	r1, r5
 8012126:	f7ee f8d9 	bl	80002dc <__adddf3>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	4630      	mov	r0, r6
 8012130:	4639      	mov	r1, r7
 8012132:	f7ee fbb3 	bl	800089c <__aeabi_ddiv>
 8012136:	f04f 0a00 	mov.w	sl, #0
 801213a:	4604      	mov	r4, r0
 801213c:	460d      	mov	r5, r1
 801213e:	4622      	mov	r2, r4
 8012140:	462b      	mov	r3, r5
 8012142:	4620      	mov	r0, r4
 8012144:	4629      	mov	r1, r5
 8012146:	f7ee fa7f 	bl	8000648 <__aeabi_dmul>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	4680      	mov	r8, r0
 8012150:	4689      	mov	r9, r1
 8012152:	f7ee fa79 	bl	8000648 <__aeabi_dmul>
 8012156:	a374      	add	r3, pc, #464	; (adr r3, 8012328 <atan+0x2b8>)
 8012158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215c:	4606      	mov	r6, r0
 801215e:	460f      	mov	r7, r1
 8012160:	f7ee fa72 	bl	8000648 <__aeabi_dmul>
 8012164:	a372      	add	r3, pc, #456	; (adr r3, 8012330 <atan+0x2c0>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	f7ee f8b7 	bl	80002dc <__adddf3>
 801216e:	4632      	mov	r2, r6
 8012170:	463b      	mov	r3, r7
 8012172:	f7ee fa69 	bl	8000648 <__aeabi_dmul>
 8012176:	a370      	add	r3, pc, #448	; (adr r3, 8012338 <atan+0x2c8>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	f7ee f8ae 	bl	80002dc <__adddf3>
 8012180:	4632      	mov	r2, r6
 8012182:	463b      	mov	r3, r7
 8012184:	f7ee fa60 	bl	8000648 <__aeabi_dmul>
 8012188:	a36d      	add	r3, pc, #436	; (adr r3, 8012340 <atan+0x2d0>)
 801218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218e:	f7ee f8a5 	bl	80002dc <__adddf3>
 8012192:	4632      	mov	r2, r6
 8012194:	463b      	mov	r3, r7
 8012196:	f7ee fa57 	bl	8000648 <__aeabi_dmul>
 801219a:	a36b      	add	r3, pc, #428	; (adr r3, 8012348 <atan+0x2d8>)
 801219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a0:	f7ee f89c 	bl	80002dc <__adddf3>
 80121a4:	4632      	mov	r2, r6
 80121a6:	463b      	mov	r3, r7
 80121a8:	f7ee fa4e 	bl	8000648 <__aeabi_dmul>
 80121ac:	a368      	add	r3, pc, #416	; (adr r3, 8012350 <atan+0x2e0>)
 80121ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b2:	f7ee f893 	bl	80002dc <__adddf3>
 80121b6:	4642      	mov	r2, r8
 80121b8:	464b      	mov	r3, r9
 80121ba:	f7ee fa45 	bl	8000648 <__aeabi_dmul>
 80121be:	a366      	add	r3, pc, #408	; (adr r3, 8012358 <atan+0x2e8>)
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	4680      	mov	r8, r0
 80121c6:	4689      	mov	r9, r1
 80121c8:	4630      	mov	r0, r6
 80121ca:	4639      	mov	r1, r7
 80121cc:	f7ee fa3c 	bl	8000648 <__aeabi_dmul>
 80121d0:	a363      	add	r3, pc, #396	; (adr r3, 8012360 <atan+0x2f0>)
 80121d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d6:	f7ee f87f 	bl	80002d8 <__aeabi_dsub>
 80121da:	4632      	mov	r2, r6
 80121dc:	463b      	mov	r3, r7
 80121de:	f7ee fa33 	bl	8000648 <__aeabi_dmul>
 80121e2:	a361      	add	r3, pc, #388	; (adr r3, 8012368 <atan+0x2f8>)
 80121e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e8:	f7ee f876 	bl	80002d8 <__aeabi_dsub>
 80121ec:	4632      	mov	r2, r6
 80121ee:	463b      	mov	r3, r7
 80121f0:	f7ee fa2a 	bl	8000648 <__aeabi_dmul>
 80121f4:	a35e      	add	r3, pc, #376	; (adr r3, 8012370 <atan+0x300>)
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	f7ee f86d 	bl	80002d8 <__aeabi_dsub>
 80121fe:	4632      	mov	r2, r6
 8012200:	463b      	mov	r3, r7
 8012202:	f7ee fa21 	bl	8000648 <__aeabi_dmul>
 8012206:	a35c      	add	r3, pc, #368	; (adr r3, 8012378 <atan+0x308>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	f7ee f864 	bl	80002d8 <__aeabi_dsub>
 8012210:	4632      	mov	r2, r6
 8012212:	463b      	mov	r3, r7
 8012214:	f7ee fa18 	bl	8000648 <__aeabi_dmul>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	4640      	mov	r0, r8
 801221e:	4649      	mov	r1, r9
 8012220:	f7ee f85c 	bl	80002dc <__adddf3>
 8012224:	4622      	mov	r2, r4
 8012226:	462b      	mov	r3, r5
 8012228:	f7ee fa0e 	bl	8000648 <__aeabi_dmul>
 801222c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012230:	4602      	mov	r2, r0
 8012232:	460b      	mov	r3, r1
 8012234:	d14b      	bne.n	80122ce <atan+0x25e>
 8012236:	4620      	mov	r0, r4
 8012238:	4629      	mov	r1, r5
 801223a:	f7ee f84d 	bl	80002d8 <__aeabi_dsub>
 801223e:	e72c      	b.n	801209a <atan+0x2a>
 8012240:	ee10 0a10 	vmov	r0, s0
 8012244:	4b53      	ldr	r3, [pc, #332]	; (8012394 <atan+0x324>)
 8012246:	2200      	movs	r2, #0
 8012248:	4629      	mov	r1, r5
 801224a:	f7ee f845 	bl	80002d8 <__aeabi_dsub>
 801224e:	4b51      	ldr	r3, [pc, #324]	; (8012394 <atan+0x324>)
 8012250:	4606      	mov	r6, r0
 8012252:	460f      	mov	r7, r1
 8012254:	2200      	movs	r2, #0
 8012256:	4620      	mov	r0, r4
 8012258:	4629      	mov	r1, r5
 801225a:	f7ee f83f 	bl	80002dc <__adddf3>
 801225e:	4602      	mov	r2, r0
 8012260:	460b      	mov	r3, r1
 8012262:	4630      	mov	r0, r6
 8012264:	4639      	mov	r1, r7
 8012266:	f7ee fb19 	bl	800089c <__aeabi_ddiv>
 801226a:	f04f 0a01 	mov.w	sl, #1
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	e764      	b.n	801213e <atan+0xce>
 8012274:	4b49      	ldr	r3, [pc, #292]	; (801239c <atan+0x32c>)
 8012276:	429e      	cmp	r6, r3
 8012278:	da1d      	bge.n	80122b6 <atan+0x246>
 801227a:	ee10 0a10 	vmov	r0, s0
 801227e:	4b48      	ldr	r3, [pc, #288]	; (80123a0 <atan+0x330>)
 8012280:	2200      	movs	r2, #0
 8012282:	4629      	mov	r1, r5
 8012284:	f7ee f828 	bl	80002d8 <__aeabi_dsub>
 8012288:	4b45      	ldr	r3, [pc, #276]	; (80123a0 <atan+0x330>)
 801228a:	4606      	mov	r6, r0
 801228c:	460f      	mov	r7, r1
 801228e:	2200      	movs	r2, #0
 8012290:	4620      	mov	r0, r4
 8012292:	4629      	mov	r1, r5
 8012294:	f7ee f9d8 	bl	8000648 <__aeabi_dmul>
 8012298:	4b3e      	ldr	r3, [pc, #248]	; (8012394 <atan+0x324>)
 801229a:	2200      	movs	r2, #0
 801229c:	f7ee f81e 	bl	80002dc <__adddf3>
 80122a0:	4602      	mov	r2, r0
 80122a2:	460b      	mov	r3, r1
 80122a4:	4630      	mov	r0, r6
 80122a6:	4639      	mov	r1, r7
 80122a8:	f7ee faf8 	bl	800089c <__aeabi_ddiv>
 80122ac:	f04f 0a02 	mov.w	sl, #2
 80122b0:	4604      	mov	r4, r0
 80122b2:	460d      	mov	r5, r1
 80122b4:	e743      	b.n	801213e <atan+0xce>
 80122b6:	462b      	mov	r3, r5
 80122b8:	ee10 2a10 	vmov	r2, s0
 80122bc:	4939      	ldr	r1, [pc, #228]	; (80123a4 <atan+0x334>)
 80122be:	2000      	movs	r0, #0
 80122c0:	f7ee faec 	bl	800089c <__aeabi_ddiv>
 80122c4:	f04f 0a03 	mov.w	sl, #3
 80122c8:	4604      	mov	r4, r0
 80122ca:	460d      	mov	r5, r1
 80122cc:	e737      	b.n	801213e <atan+0xce>
 80122ce:	4b36      	ldr	r3, [pc, #216]	; (80123a8 <atan+0x338>)
 80122d0:	4e36      	ldr	r6, [pc, #216]	; (80123ac <atan+0x33c>)
 80122d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	f7ed fffd 	bl	80002d8 <__aeabi_dsub>
 80122de:	4622      	mov	r2, r4
 80122e0:	462b      	mov	r3, r5
 80122e2:	f7ed fff9 	bl	80002d8 <__aeabi_dsub>
 80122e6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80122ea:	4602      	mov	r2, r0
 80122ec:	460b      	mov	r3, r1
 80122ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80122f2:	f7ed fff1 	bl	80002d8 <__aeabi_dsub>
 80122f6:	f1bb 0f00 	cmp.w	fp, #0
 80122fa:	4604      	mov	r4, r0
 80122fc:	460d      	mov	r5, r1
 80122fe:	f6bf aed6 	bge.w	80120ae <atan+0x3e>
 8012302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012306:	461d      	mov	r5, r3
 8012308:	e6d1      	b.n	80120ae <atan+0x3e>
 801230a:	a51d      	add	r5, pc, #116	; (adr r5, 8012380 <atan+0x310>)
 801230c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012310:	e6cd      	b.n	80120ae <atan+0x3e>
 8012312:	bf00      	nop
 8012314:	f3af 8000 	nop.w
 8012318:	54442d18 	.word	0x54442d18
 801231c:	bff921fb 	.word	0xbff921fb
 8012320:	8800759c 	.word	0x8800759c
 8012324:	7e37e43c 	.word	0x7e37e43c
 8012328:	e322da11 	.word	0xe322da11
 801232c:	3f90ad3a 	.word	0x3f90ad3a
 8012330:	24760deb 	.word	0x24760deb
 8012334:	3fa97b4b 	.word	0x3fa97b4b
 8012338:	a0d03d51 	.word	0xa0d03d51
 801233c:	3fb10d66 	.word	0x3fb10d66
 8012340:	c54c206e 	.word	0xc54c206e
 8012344:	3fb745cd 	.word	0x3fb745cd
 8012348:	920083ff 	.word	0x920083ff
 801234c:	3fc24924 	.word	0x3fc24924
 8012350:	5555550d 	.word	0x5555550d
 8012354:	3fd55555 	.word	0x3fd55555
 8012358:	2c6a6c2f 	.word	0x2c6a6c2f
 801235c:	bfa2b444 	.word	0xbfa2b444
 8012360:	52defd9a 	.word	0x52defd9a
 8012364:	3fadde2d 	.word	0x3fadde2d
 8012368:	af749a6d 	.word	0xaf749a6d
 801236c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012370:	fe231671 	.word	0xfe231671
 8012374:	3fbc71c6 	.word	0x3fbc71c6
 8012378:	9998ebc4 	.word	0x9998ebc4
 801237c:	3fc99999 	.word	0x3fc99999
 8012380:	54442d18 	.word	0x54442d18
 8012384:	3ff921fb 	.word	0x3ff921fb
 8012388:	440fffff 	.word	0x440fffff
 801238c:	7ff00000 	.word	0x7ff00000
 8012390:	3fdbffff 	.word	0x3fdbffff
 8012394:	3ff00000 	.word	0x3ff00000
 8012398:	3ff2ffff 	.word	0x3ff2ffff
 801239c:	40038000 	.word	0x40038000
 80123a0:	3ff80000 	.word	0x3ff80000
 80123a4:	bff00000 	.word	0xbff00000
 80123a8:	080128e0 	.word	0x080128e0
 80123ac:	080128c0 	.word	0x080128c0

080123b0 <fabs>:
 80123b0:	ec51 0b10 	vmov	r0, r1, d0
 80123b4:	ee10 2a10 	vmov	r2, s0
 80123b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123bc:	ec43 2b10 	vmov	d0, r2, r3
 80123c0:	4770      	bx	lr
	...

080123c4 <_init>:
 80123c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c6:	bf00      	nop
 80123c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ca:	bc08      	pop	{r3}
 80123cc:	469e      	mov	lr, r3
 80123ce:	4770      	bx	lr

080123d0 <_fini>:
 80123d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d2:	bf00      	nop
 80123d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123d6:	bc08      	pop	{r3}
 80123d8:	469e      	mov	lr, r3
 80123da:	4770      	bx	lr
