
g431_withSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010278  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08010458  08010458  00020458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108e4  080108e4  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  080108e4  080108e4  000208e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108ec  080108ec  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108ec  080108ec  000208ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108f0  080108f0  000208f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080108f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d0  2000034c  08010c40  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  08010c40  00031a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020fff  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dc8  00000000  00000000  000513be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00056188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001356  00000000  00000000  00057af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002384e  00000000  00000000  00058e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e24  00000000  00000000  0007c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8540  00000000  00000000  0009e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007968  00000000  00000000  001669f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0016e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010440 	.word	0x08010440

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	08010440 	.word	0x08010440

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8000efe:	f107 030f 	add.w	r3, r7, #15
 8000f02:	2201      	movs	r2, #1
 8000f04:	9200      	str	r2, [sp, #0]
 8000f06:	2275      	movs	r2, #117	; 0x75
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f853 	bl	8000fb6 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b71      	cmp	r3, #113	; 0x71
 8000f14:	d129      	bne.n	8000f6a <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8000f16:	236b      	movs	r3, #107	; 0x6b
 8000f18:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000f1e:	f107 030d 	add.w	r3, r7, #13
 8000f22:	f107 020e 	add.w	r2, r7, #14
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f823 	bl	8000f74 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8000f2e:	236a      	movs	r3, #106	; 0x6a
 8000f30:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8000f32:	2310      	movs	r3, #16
 8000f34:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000f36:	f107 030d 	add.w	r3, r7, #13
 8000f3a:	f107 020e 	add.w	r2, r7, #14
 8000f3e:	6839      	ldr	r1, [r7, #0]
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f817 	bl	8000f74 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f86d 	bl	8001030 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f8cd 	bl	8001100 <MPU_writeGyroFullScaleRange>
        return 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <MPU_begin+0x78>
    }
    else
    {
        return 0;
 8000f6a:	2300      	movs	r3, #0
    }
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8000f82:	2100      	movs	r1, #0
 8000f84:	68b8      	ldr	r0, [r7, #8]
 8000f86:	f000 f83e 	bl	8001006 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	2201      	movs	r2, #1
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f005 fd83 	bl	8006a9e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f005 fd7c 	bl	8006a9e <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	68b8      	ldr	r0, [r7, #8]
 8000faa:	f000 f82c 	bl	8001006 <MPU_CS>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f000 f81c 	bl	8001006 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8000fd8:	f107 0117 	add.w	r1, r7, #23
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f005 fd5b 	bl	8006a9e <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8000fe8:	8c3a      	ldrh	r2, [r7, #32]
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	6839      	ldr	r1, [r7, #0]
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f005 fec9 	bl	8006d88 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f000 f804 	bl	8001006 <MPU_CS>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800101c:	b29b      	uxth	r3, r3
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	4619      	mov	r1, r3
 8001022:	f002 f843 	bl	80030ac <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800103e:	231c      	movs	r3, #28
 8001040:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d847      	bhi.n	80010d8 <MPU_writeAccFullScaleRange+0xa8>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <MPU_writeAccFullScaleRange+0x20>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001061 	.word	0x08001061
 8001054:	0800107f 	.word	0x0800107f
 8001058:	0800109d 	.word	0x0800109d
 800105c:	080010bb 	.word	0x080010bb
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001066:	60da      	str	r2, [r3, #12]
        val = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800106c:	f107 0316 	add.w	r3, r7, #22
 8001070:	f107 0217 	add.w	r2, r7, #23
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff ff7c 	bl	8000f74 <MPU_REG_WRITE>
        break;
 800107c:	e03b      	b.n	80010f6 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001084:	60da      	str	r2, [r3, #12]
        val = 0x08;
 8001086:	2308      	movs	r3, #8
 8001088:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800108a:	f107 0316 	add.w	r3, r7, #22
 800108e:	f107 0217 	add.w	r2, r7, #23
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ff6d 	bl	8000f74 <MPU_REG_WRITE>
        break;
 800109a:	e02c      	b.n	80010f6 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80010a2:	60da      	str	r2, [r3, #12]
        val = 0x10;
 80010a4:	2310      	movs	r3, #16
 80010a6:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80010a8:	f107 0316 	add.w	r3, r7, #22
 80010ac:	f107 0217 	add.w	r2, r7, #23
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ff5e 	bl	8000f74 <MPU_REG_WRITE>
        break;
 80010b8:	e01d      	b.n	80010f6 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80010c0:	60da      	str	r2, [r3, #12]
        val = 0x18;
 80010c2:	2318      	movs	r3, #24
 80010c4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80010c6:	f107 0316 	add.w	r3, r7, #22
 80010ca:	f107 0217 	add.w	r2, r7, #23
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff ff4f 	bl	8000f74 <MPU_REG_WRITE>
        break;
 80010d6:	e00e      	b.n	80010f6 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80010de:	60da      	str	r2, [r3, #12]
        val = 0x08;
 80010e0:	2308      	movs	r3, #8
 80010e2:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80010e4:	f107 0316 	add.w	r3, r7, #22
 80010e8:	f107 0217 	add.w	r2, r7, #23
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff ff40 	bl	8000f74 <MPU_REG_WRITE>
        break;
 80010f4:	bf00      	nop
    }
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop

08001100 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800110e:	231b      	movs	r3, #27
 8001110:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d843      	bhi.n	80011a0 <MPU_writeGyroFullScaleRange+0xa0>
 8001118:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <MPU_writeGyroFullScaleRange+0x20>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001131 	.word	0x08001131
 8001124:	0800114d 	.word	0x0800114d
 8001128:	08001169 	.word	0x08001169
 800112c:	08001185 	.word	0x08001185
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <MPU_writeGyroFullScaleRange+0xc4>)
 8001134:	611a      	str	r2, [r3, #16]
        val = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800113a:	f107 0316 	add.w	r3, r7, #22
 800113e:	f107 0217 	add.w	r2, r7, #23
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff ff15 	bl	8000f74 <MPU_REG_WRITE>
        break;
 800114a:	e037      	b.n	80011bc <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <MPU_writeGyroFullScaleRange+0xc8>)
 8001150:	611a      	str	r2, [r3, #16]
        val = 0x08;
 8001152:	2308      	movs	r3, #8
 8001154:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001156:	f107 0316 	add.w	r3, r7, #22
 800115a:	f107 0217 	add.w	r2, r7, #23
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff07 	bl	8000f74 <MPU_REG_WRITE>
        break;
 8001166:	e029      	b.n	80011bc <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <MPU_writeGyroFullScaleRange+0xcc>)
 800116c:	611a      	str	r2, [r3, #16]
        val = 0x10;
 800116e:	2310      	movs	r3, #16
 8001170:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001172:	f107 0316 	add.w	r3, r7, #22
 8001176:	f107 0217 	add.w	r2, r7, #23
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff fef9 	bl	8000f74 <MPU_REG_WRITE>
        break;
 8001182:	e01b      	b.n	80011bc <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MPU_writeGyroFullScaleRange+0xd0>)
 8001188:	611a      	str	r2, [r3, #16]
        val = 0x18;
 800118a:	2318      	movs	r3, #24
 800118c:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800118e:	f107 0316 	add.w	r3, r7, #22
 8001192:	f107 0217 	add.w	r2, r7, #23
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff feeb 	bl	8000f74 <MPU_REG_WRITE>
        break;
 800119e:	e00d      	b.n	80011bc <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <MPU_writeGyroFullScaleRange+0xc8>)
 80011a4:	611a      	str	r2, [r3, #16]
        val = 0x08;
 80011a6:	2308      	movs	r3, #8
 80011a8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011aa:	f107 0316 	add.w	r3, r7, #22
 80011ae:	f107 0217 	add.w	r2, r7, #23
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff fedd 	bl	8000f74 <MPU_REG_WRITE>
        break;
 80011ba:	bf00      	nop
    }
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	43030000 	.word	0x43030000
 80011c8:	42830000 	.word	0x42830000
 80011cc:	42033333 	.word	0x42033333
 80011d0:	41833333 	.word	0x41833333

080011d4 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, &buf[0], 14);
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	220e      	movs	r2, #14
 80011e4:	9200      	str	r2, [sp, #0]
 80011e6:	223b      	movs	r2, #59	; 0x3b
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fee3 	bl	8000fb6 <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 80011f0:	7a3b      	ldrb	r3, [r7, #8]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7a7b      	ldrb	r3, [r7, #9]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 8001202:	7abb      	ldrb	r3, [r7, #10]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 8001214:	7b3b      	ldrb	r3, [r7, #12]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	7b7b      	ldrb	r3, [r7, #13]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    pMPU9250->rawData.gx = buf[8] << 8 | buf[9];
 8001226:	7c3b      	ldrb	r3, [r7, #16]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	7c7b      	ldrb	r3, [r7, #17]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	80da      	strh	r2, [r3, #6]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 8001238:	7cbb      	ldrb	r3, [r7, #18]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7cfb      	ldrb	r3, [r7, #19]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 800124a:	7d3b      	ldrb	r3, [r7, #20]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7d7b      	ldrb	r3, [r7, #21]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	815a      	strh	r2, [r3, #10]
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001288:	2300      	movs	r3, #0
 800128a:	827b      	strh	r3, [r7, #18]
 800128c:	e01e      	b.n	80012cc <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff ff9f 	bl	80011d4 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800129c:	461a      	mov	r2, r3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	4413      	add	r3, r2
 80012a2:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012aa:	461a      	mov	r2, r3
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	4413      	add	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012b8:	461a      	mov	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4413      	add	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f001 f807 	bl	80022d4 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80012c6:	8a7b      	ldrh	r3, [r7, #18]
 80012c8:	3301      	adds	r3, #1
 80012ca:	827b      	strh	r3, [r7, #18]
 80012cc:	8a7a      	ldrh	r2, [r7, #18]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3dc      	bcc.n	800128e <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff46 	bl	80011d4 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	ed93 7a03 	vldr	s14, [r3, #12]
 800135c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	ed93 7a03 	vldr	s14, [r3, #12]
 800137a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	ed93 7a03 	vldr	s14, [r3, #12]
 8001398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	edc3 7a07 	vstr	s15, [r3, #28]

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	edd3 6a08 	vldr	s13, [r3, #32]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	ed93 7a04 	vldr	s14, [r3, #16]
 8001408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	ed93 7a04 	vldr	s14, [r3, #16]
 800141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	ed93 7a04 	vldr	s14, [r3, #16]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_DMA_Init+0x60>)
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_DMA_Init+0x60>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6493      	str	r3, [r2, #72]	; 0x48
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_DMA_Init+0x60>)
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_DMA_Init+0x60>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <MX_DMA_Init+0x60>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6493      	str	r3, [r2, #72]	; 0x48
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MX_DMA_Init+0x60>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	200b      	movs	r0, #11
 8001484:	f001 f823 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001488:	200b      	movs	r0, #11
 800148a:	f001 f83a 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	200c      	movs	r0, #12
 8001494:	f001 f81b 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001498:	200c      	movs	r0, #12
 800149a:	f001 f832 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <MX_FDCAN1_Init+0x88>)
 80014b4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014dc:	2210      	movs	r2, #16
 80014de:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_FDCAN1_Init+0x84>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_FDCAN1_Init+0x84>)
 8001500:	2201      	movs	r2, #1
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <MX_FDCAN1_Init+0x84>)
 8001506:	2201      	movs	r2, #1
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_FDCAN1_Init+0x84>)
 800150c:	2200      	movs	r2, #0
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_FDCAN1_Init+0x84>)
 8001512:	2200      	movs	r2, #0
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_FDCAN1_Init+0x84>)
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_FDCAN1_Init+0x84>)
 800151e:	f001 fa93 	bl	8002a48 <HAL_FDCAN_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001528:	f000 fb11 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000368 	.word	0x20000368
 8001534:	40006400 	.word	0x40006400

08001538 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b09a      	sub	sp, #104	; 0x68
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2244      	movs	r2, #68	; 0x44
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00c fe76 	bl	800e24a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <HAL_FDCAN_MspInit+0xac>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d138      	bne.n	80015da <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800156e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f004 fff5 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001584:	f000 fae3 	bl	8001b4e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_FDCAN_MspInit+0xb0>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <HAL_FDCAN_MspInit+0xb0>)
 800158e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001592:	6593      	str	r3, [r2, #88]	; 0x58
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_FDCAN_MspInit+0xb0>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_FDCAN_MspInit+0xb0>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_FDCAN_MspInit+0xb0>)
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_FDCAN_MspInit+0xb0>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015bc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015ca:	2309      	movs	r3, #9
 80015cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_FDCAN_MspInit+0xb4>)
 80015d6:	f001 fbe7 	bl	8002da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80015da:	bf00      	nop
 80015dc:	3768      	adds	r7, #104	; 0x68
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40006400 	.word	0x40006400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000400 	.word	0x48000400

080015f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <MX_GPIO_Init+0xd0>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_GPIO_Init+0xd0>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	4816      	ldr	r0, [pc, #88]	; (80016c4 <MX_GPIO_Init+0xd4>)
 800166c:	f001 fd1e 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <MX_GPIO_Init+0xd8>)
 8001678:	f001 fd18 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800167c:	2310      	movs	r3, #16
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	; (80016c4 <MX_GPIO_Init+0xd4>)
 8001694:	f001 fb88 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016a6:	2301      	movs	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_GPIO_Init+0xd8>)
 80016b2:	f001 fb79 	bl	8002da8 <HAL_GPIO_Init>

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000800 	.word	0x48000800
 80016c8:	48000400 	.word	0x48000400

080016cc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_I2C1_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <MX_I2C1_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60505F8C;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_I2C1_Init+0x74>)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <MX_I2C1_Init+0x7c>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_I2C1_Init+0x74>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_I2C1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_I2C1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_I2C1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_I2C1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <MX_I2C1_Init+0x74>)
 8001708:	f001 fce8 	bl	80030dc <HAL_I2C_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001712:	f000 fa1c 	bl	8001b4e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_I2C1_Init+0x74>)
 800171a:	f002 fb78 	bl	8003e0e <HAL_I2CEx_ConfigAnalogFilter>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001724:	f000 fa13 	bl	8001b4e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_I2C1_Init+0x74>)
 800172c:	f002 fbba 	bl	8003ea4 <HAL_I2CEx_ConfigDigitalFilter>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001736:	f000 fa0a 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200003cc 	.word	0x200003cc
 8001744:	40005400 	.word	0x40005400
 8001748:	60505f8c 	.word	0x60505f8c

0800174c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b09c      	sub	sp, #112	; 0x70
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	2244      	movs	r2, #68	; 0x44
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f00c fd6c 	bl	800e24a <memset>
  if(i2cHandle->Instance==I2C1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_I2C_MspInit+0x1a8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	f040 80b6 	bne.w	80018ea <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4618      	mov	r0, r3
 800178c:	f004 feec 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001796:	f000 f9da 	bl	8001b4e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a50      	ldr	r2, [pc, #320]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b4e      	ldr	r3, [pc, #312]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d0:	2312      	movs	r3, #18
 80017d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017dc:	2304      	movs	r3, #4
 80017de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f001 fadd 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f2:	2312      	movs	r3, #18
 80017f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fe:	2304      	movs	r3, #4
 8001800:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001806:	4619      	mov	r1, r3
 8001808:	483c      	ldr	r0, [pc, #240]	; (80018fc <HAL_I2C_MspInit+0x1b0>)
 800180a:	f001 facd 	bl	8002da8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a39      	ldr	r2, [pc, #228]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_I2C_MspInit+0x1ac>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001828:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_I2C_MspInit+0x1b8>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800182e:	2211      	movs	r2, #17
 8001830:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001834:	2210      	movs	r2, #16
 8001836:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800185c:	4828      	ldr	r0, [pc, #160]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 800185e:	f000 fe6b 	bl	8002538 <HAL_DMA_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001868:	f000 f971 	bl	8001b4e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_I2C_MspInit+0x1b4>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_I2C_MspInit+0x1c0>)
 800187c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 8001880:	2210      	movs	r2, #16
 8001882:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018ae:	4816      	ldr	r0, [pc, #88]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 80018b0:	f000 fe42 	bl	8002538 <HAL_DMA_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80018ba:	f000 f948 	bl	8001b4e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_I2C_MspInit+0x1bc>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201f      	movs	r0, #31
 80018d0:	f000 fdfd 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018d4:	201f      	movs	r0, #31
 80018d6:	f000 fe14 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2020      	movs	r0, #32
 80018e0:	f000 fdf5 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018e4:	2020      	movs	r0, #32
 80018e6:	f000 fe0c 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018ea:	bf00      	nop
 80018ec:	3770      	adds	r7, #112	; 0x70
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400
 8001900:	20000420 	.word	0x20000420
 8001904:	40020008 	.word	0x40020008
 8001908:	20000480 	.word	0x20000480
 800190c:	4002001c 	.word	0x4002001c

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b08e      	sub	sp, #56	; 0x38
 8001916:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */

	 MPU9250.settings.gFullScaleRange = GFSR_500DPS;
 8001918:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <main+0x17c>)
 800191a:	2201      	movs	r2, #1
 800191c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	  MPU9250.settings.aFullScaleRange = AFSR_4G;
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <main+0x17c>)
 8001922:	2201      	movs	r2, #1
 8001924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	  MPU9250.settings.CS_PIN = GPIO_PIN_4;
 8001928:	4b58      	ldr	r3, [pc, #352]	; (8001a8c <main+0x17c>)
 800192a:	2210      	movs	r2, #16
 800192c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	  MPU9250.settings.CS_PORT = GPIOC;
 8001930:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <main+0x17c>)
 8001932:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <main+0x180>)
 8001934:	651a      	str	r2, [r3, #80]	; 0x50
	  MPU9250.attitude.tau = 0.98;
 8001936:	4b55      	ldr	r3, [pc, #340]	; (8001a8c <main+0x17c>)
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <main+0x184>)
 800193a:	639a      	str	r2, [r3, #56]	; 0x38
	  MPU9250.attitude.dt = 0.004;
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <main+0x17c>)
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <main+0x188>)
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f000 fc56 	bl	80021f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f8b5 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f7ff fe51 	bl	80015f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800194e:	f7ff fd7b 	bl	8001448 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001952:	f7ff fdab 	bl	80014ac <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8001956:	f7ff feb9 	bl	80016cc <MX_I2C1_Init>
  MX_SPI1_Init();
 800195a:	f000 f8fd 	bl	8001b58 <MX_SPI1_Init>
  MX_SPI2_Init();
 800195e:	f000 f939 	bl	8001bd4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001962:	f000 fb71 	bl	8002048 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001966:	f00b f9db 	bl	800cd20 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  // Check if IMU configured properly and block if it didn't
   if (MPU_begin(&hspi1, &MPU9250) != TRUE)
 800196a:	4948      	ldr	r1, [pc, #288]	; (8001a8c <main+0x17c>)
 800196c:	484b      	ldr	r0, [pc, #300]	; (8001a9c <main+0x18c>)
 800196e:	f7ff fac1 	bl	8000ef4 <MPU_begin>
 8001972:	4603      	mov	r3, r0
 8001974:	2b01      	cmp	r3, #1
 8001976:	d008      	beq.n	800198a <main+0x7a>
   {
     sprintf((char *)serialBuf, "ERROR!\r\n");
 8001978:	4949      	ldr	r1, [pc, #292]	; (8001aa0 <main+0x190>)
 800197a:	484a      	ldr	r0, [pc, #296]	; (8001aa4 <main+0x194>)
 800197c:	f00c fc02 	bl	800e184 <siprintf>
     CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001980:	2164      	movs	r1, #100	; 0x64
 8001982:	4848      	ldr	r0, [pc, #288]	; (8001aa4 <main+0x194>)
 8001984:	f00b fa8a 	bl	800ce9c <CDC_Transmit_FS>
     while (1){}
 8001988:	e7fe      	b.n	8001988 <main+0x78>
   }


   // Calibrate the IMU
    sprintf((char *)serialBuf, "CALIBRATING...\r\n");
 800198a:	4947      	ldr	r1, [pc, #284]	; (8001aa8 <main+0x198>)
 800198c:	4845      	ldr	r0, [pc, #276]	; (8001aa4 <main+0x194>)
 800198e:	f00c fbf9 	bl	800e184 <siprintf>
    CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001992:	2164      	movs	r1, #100	; 0x64
 8001994:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <main+0x194>)
 8001996:	f00b fa81 	bl	800ce9c <CDC_Transmit_FS>
    MPU_calibrateGyro(&hspi1, &MPU9250, 1500);
 800199a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800199e:	493b      	ldr	r1, [pc, #236]	; (8001a8c <main+0x17c>)
 80019a0:	483e      	ldr	r0, [pc, #248]	; (8001a9c <main+0x18c>)
 80019a2:	f7ff fc5f 	bl	8001264 <MPU_calibrateGyro>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  MPU_readRawData(&hspi1, &MPU9250);
 80019a6:	4939      	ldr	r1, [pc, #228]	; (8001a8c <main+0x17c>)
 80019a8:	483c      	ldr	r0, [pc, #240]	; (8001a9c <main+0x18c>)
 80019aa:	f7ff fc13 	bl	80011d4 <MPU_readRawData>
	  sprintf((char *)serialBuf, "RAW DAT\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <main+0x17c>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	461c      	mov	r4, r3
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <main+0x17c>)
 80019b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019bc:	461d      	mov	r5, r3
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <main+0x17c>)
 80019c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c4:	461a      	mov	r2, r3
			  , MPU9250.rawData.gx, MPU9250.rawData.gy, MPU9250.rawData.gz);
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <main+0x17c>)
 80019c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	  sprintf((char *)serialBuf, "RAW DAT\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 80019cc:	4619      	mov	r1, r3
			  , MPU9250.rawData.gx, MPU9250.rawData.gy, MPU9250.rawData.gz);
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <main+0x17c>)
 80019d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	  sprintf((char *)serialBuf, "RAW DAT\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 80019d4:	4618      	mov	r0, r3
			  , MPU9250.rawData.gx, MPU9250.rawData.gy, MPU9250.rawData.gz);
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <main+0x17c>)
 80019d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	  sprintf((char *)serialBuf, "RAW DAT\n\rAccel: x=%d y=%d z=%d\n\rGyro: x=%d y=%d z=%d\n\r", MPU9250.rawData.ax,  MPU9250.rawData.ay, MPU9250.rawData.az
 80019dc:	9303      	str	r3, [sp, #12]
 80019de:	9002      	str	r0, [sp, #8]
 80019e0:	9101      	str	r1, [sp, #4]
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4930      	ldr	r1, [pc, #192]	; (8001aac <main+0x19c>)
 80019ea:	482e      	ldr	r0, [pc, #184]	; (8001aa4 <main+0x194>)
 80019ec:	f00c fbca 	bl	800e184 <siprintf>
	  CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 80019f0:	2164      	movs	r1, #100	; 0x64
 80019f2:	482c      	ldr	r0, [pc, #176]	; (8001aa4 <main+0x194>)
 80019f4:	f00b fa52 	bl	800ce9c <CDC_Transmit_FS>

	  MPU_readProcessedData(&hspi1, &MPU9250);
 80019f8:	4924      	ldr	r1, [pc, #144]	; (8001a8c <main+0x17c>)
 80019fa:	4828      	ldr	r0, [pc, #160]	; (8001a9c <main+0x18c>)
 80019fc:	f7ff fc9b 	bl	8001336 <MPU_readProcessedData>
	  sprintf((char *)serialBuf, "PROCSSED DAT\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <main+0x17c>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fdc7 	bl	8000598 <__aeabi_f2d>
 8001a0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <main+0x17c>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdc0 	bl	8000598 <__aeabi_f2d>
 8001a18:	4604      	mov	r4, r0
 8001a1a:	460d      	mov	r5, r1
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <main+0x17c>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fdb9 	bl	8000598 <__aeabi_f2d>
 8001a26:	4680      	mov	r8, r0
 8001a28:	4689      	mov	r9, r1
	  			  , MPU9250.sensorData.gx, MPU9250.sensorData.gy, MPU9250.sensorData.gz);
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <main+0x17c>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
	  sprintf((char *)serialBuf, "PROCSSED DAT\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fdb2 	bl	8000598 <__aeabi_f2d>
 8001a34:	4682      	mov	sl, r0
 8001a36:	468b      	mov	fp, r1
	  			  , MPU9250.sensorData.gx, MPU9250.sensorData.gy, MPU9250.sensorData.gz);
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <main+0x17c>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  sprintf((char *)serialBuf, "PROCSSED DAT\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fdab 	bl	8000598 <__aeabi_f2d>
 8001a42:	e9c7 0100 	strd	r0, r1, [r7]
	  			  , MPU9250.sensorData.gx, MPU9250.sensorData.gy, MPU9250.sensorData.gz);
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <main+0x17c>)
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	  sprintf((char *)serialBuf, "PROCSSED DAT\n\rA: x=%f y=%f z=%f\n\rGyro: x=%f y=%f z=%f\n\n\r", MPU9250.sensorData.ax,  MPU9250.sensorData.ay, MPU9250.sensorData.az
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fda4 	bl	8000598 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a58:	ed97 7b00 	vldr	d7, [r7]
 8001a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a60:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a64:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a68:	e9cd 4500 	strd	r4, r5, [sp]
 8001a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a70:	490f      	ldr	r1, [pc, #60]	; (8001ab0 <main+0x1a0>)
 8001a72:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <main+0x194>)
 8001a74:	f00c fb86 	bl	800e184 <siprintf>
	  CDC_Transmit_FS(serialBuf, sizeof(serialBuf));
 8001a78:	2164      	movs	r1, #100	; 0x64
 8001a7a:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <main+0x194>)
 8001a7c:	f00b fa0e 	bl	800ce9c <CDC_Transmit_FS>

	  HAL_Delay(5000);
 8001a80:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a84:	f000 fc26 	bl	80022d4 <HAL_Delay>
	  MPU_readRawData(&hspi1, &MPU9250);
 8001a88:	e78d      	b.n	80019a6 <main+0x96>
 8001a8a:	bf00      	nop
 8001a8c:	20000544 	.word	0x20000544
 8001a90:	48000800 	.word	0x48000800
 8001a94:	3f7ae148 	.word	0x3f7ae148
 8001a98:	3b83126f 	.word	0x3b83126f
 8001a9c:	2000059c 	.word	0x2000059c
 8001aa0:	08010458 	.word	0x08010458
 8001aa4:	200004e0 	.word	0x200004e0
 8001aa8:	08010464 	.word	0x08010464
 8001aac:	08010478 	.word	0x08010478
 8001ab0:	080104b0 	.word	0x080104b0

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	; 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	2238      	movs	r2, #56	; 0x38
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00c fbc1 	bl	800e24a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f003 ff64 	bl	80059a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001adc:	2322      	movs	r3, #34	; 0x22
 8001ade:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001aea:	2301      	movs	r3, #1
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aee:	2302      	movs	r3, #2
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af2:	2302      	movs	r3, #2
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001af6:	2303      	movs	r3, #3
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 63;
 8001afa:	233f      	movs	r3, #63	; 0x3f
 8001afc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fffc 	bl	8005b0c <HAL_RCC_OscConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b1a:	f000 f818 	bl	8001b4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1e:	230f      	movs	r3, #15
 8001b20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b22:	2303      	movs	r3, #3
 8001b24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2104      	movs	r1, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fafa 	bl	8006130 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b42:	f000 f804 	bl	8001b4e <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b52:	b672      	cpsid	i
}
 8001b54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <Error_Handler+0x8>

08001b58 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <MX_SPI1_Init+0x78>)
 8001b60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b8e:	2218      	movs	r2, #24
 8001b90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_SPI1_Init+0x74>)
 8001bb8:	f004 fec6 	bl	8006948 <HAL_SPI_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bc2:	f7ff ffc4 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000059c 	.word	0x2000059c
 8001bd0:	40013000 	.word	0x40013000

08001bd4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <MX_SPI2_Init+0x78>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001bee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bf2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c0a:	2218      	movs	r2, #24
 8001c0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c22:	2207      	movs	r2, #7
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c2e:	2208      	movs	r2, #8
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_SPI2_Init+0x74>)
 8001c34:	f004 fe88 	bl	8006948 <HAL_SPI_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f7ff ff86 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000600 	.word	0x20000600
 8001c4c:	40003800 	.word	0x40003800

08001c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <HAL_SPI_MspInit+0xfc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d131      	bne.n	8001cd6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a36      	ldr	r2, [pc, #216]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a30      	ldr	r2, [pc, #192]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca2:	23e0      	movs	r3, #224	; 0xe0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f001 f872 	bl	8002da8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2023      	movs	r0, #35	; 0x23
 8001cca:	f000 fc00 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cce:	2023      	movs	r0, #35	; 0x23
 8001cd0:	f000 fc17 	bl	8002502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cd4:	e035      	b.n	8001d42 <HAL_SPI_MspInit+0xf2>
  else if(spiHandle->Instance==SPI2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_SPI_MspInit+0x104>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d130      	bne.n	8001d42 <HAL_SPI_MspInit+0xf2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_SPI_MspInit+0x100>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d22:	2305      	movs	r3, #5
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480a      	ldr	r0, [pc, #40]	; (8001d58 <HAL_SPI_MspInit+0x108>)
 8001d2e:	f001 f83b 	bl	8002da8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2024      	movs	r0, #36	; 0x24
 8001d38:	f000 fbc9 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d3c:	2024      	movs	r0, #36	; 0x24
 8001d3e:	f000 fbe0 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40003800 	.word	0x40003800
 8001d58:	48000400 	.word	0x48000400

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_MspInit+0x44>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_MspInit+0x44>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_MspInit+0x44>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_MspInit+0x44>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_MspInit+0x44>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_MspInit+0x44>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d92:	f003 feab 	bl	8005aec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 fa52 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Channel1_IRQHandler+0x10>)
 8001dfe:	f000 fd03 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000420 	.word	0x20000420

08001e0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA1_Channel2_IRQHandler+0x10>)
 8001e12:	f000 fcf9 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000480 	.word	0x20000480

08001e20 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <USB_LP_IRQHandler+0x10>)
 8001e26:	f002 f979 	bl	800411c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200013d4 	.word	0x200013d4

08001e34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <I2C1_EV_IRQHandler+0x10>)
 8001e3a:	f001 f9ea 	bl	8003212 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003cc 	.word	0x200003cc

08001e48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <I2C1_ER_IRQHandler+0x10>)
 8001e4e:	f001 f9fa 	bl	8003246 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200003cc 	.word	0x200003cc

08001e5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <SPI1_IRQHandler+0x10>)
 8001e62:	f005 faeb 	bl	800743c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000059c 	.word	0x2000059c

08001e70 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <SPI2_IRQHandler+0x10>)
 8001e76:	f005 fae1 	bl	800743c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000600 	.word	0x20000600

08001e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <USART1_IRQHandler+0x10>)
 8001e8a:	f005 fdf7 	bl	8007a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000668 	.word	0x20000668

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_kill>:

int _kill(int pid, int sig)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb2:	f00c fa1d 	bl	800e2f0 <__errno>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2216      	movs	r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
  return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_exit>:

void _exit (int status)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eda:	e7fe      	b.n	8001eda <_exit+0x12>

08001edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eee:	f3af 8000 	nop.w
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf0      	blt.n	8001eee <_read+0x12>
  }

  return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e009      	b.n	8001f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf1      	blt.n	8001f28 <_write+0x12>
  }
  return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_close>:

int _close(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	605a      	str	r2, [r3, #4]
  return 0;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_isatty>:

int _isatty(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f00c f982 	bl	800e2f0 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20008000 	.word	0x20008000
 8002018:	00000400 	.word	0x00000400
 800201c:	20000664 	.word	0x20000664
 8002020:	20001a20 	.word	0x20001a20

08002024 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 800204e:	4a23      	ldr	r2, [pc, #140]	; (80020dc <MX_USART1_UART_Init+0x94>)
 8002050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002090:	4811      	ldr	r0, [pc, #68]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 8002092:	f005 fca3 	bl	80079dc <HAL_UART_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800209c:	f7ff fd57 	bl	8001b4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a0:	2100      	movs	r1, #0
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 80020a4:	f006 fdb1 	bl	8008c0a <HAL_UARTEx_SetTxFifoThreshold>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020ae:	f7ff fd4e 	bl	8001b4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b2:	2100      	movs	r1, #0
 80020b4:	4808      	ldr	r0, [pc, #32]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 80020b6:	f006 fde6 	bl	8008c86 <HAL_UARTEx_SetRxFifoThreshold>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020c0:	f7ff fd45 	bl	8001b4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <MX_USART1_UART_Init+0x90>)
 80020c6:	f006 fd67 	bl	8008b98 <HAL_UARTEx_DisableFifoMode>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020d0:	f7ff fd3d 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000668 	.word	0x20000668
 80020dc:	40013800 	.word	0x40013800

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b09a      	sub	sp, #104	; 0x68
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	2244      	movs	r2, #68	; 0x44
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f00c f8a2 	bl	800e24a <memset>
  if(uartHandle->Instance==USART1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a23      	ldr	r2, [pc, #140]	; (8002198 <HAL_UART_MspInit+0xb8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d13f      	bne.n	8002190 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fa23 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002128:	f7ff fd11 	bl	8001b4e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_UART_MspInit+0xbc>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_UART_MspInit+0xbc>)
 8002132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002136:	6613      	str	r3, [r2, #96]	; 0x60
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_UART_MspInit+0xbc>)
 800213a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_UART_MspInit+0xbc>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_UART_MspInit+0xbc>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_UART_MspInit+0xbc>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002160:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216e:	2307      	movs	r3, #7
 8002170:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	f000 fe14 	bl	8002da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2025      	movs	r0, #37	; 0x25
 8002186:	f000 f9a2 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800218a:	2025      	movs	r0, #37	; 0x25
 800218c:	f000 f9b9 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002190:	bf00      	nop
 8002192:	3768      	adds	r7, #104	; 0x68
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40013800 	.word	0x40013800
 800219c:	40021000 	.word	0x40021000

080021a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a4:	f7ff ff3e 	bl	8002024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <LoopForever+0x6>)
  ldr r1, =_edata
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <LoopForever+0xe>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c0:	4c0a      	ldr	r4, [pc, #40]	; (80021ec <LoopForever+0x16>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f00c f895 	bl	800e2fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021d2:	f7ff fb9d 	bl	8001910 <main>

080021d6 <LoopForever>:

LoopForever:
    b LoopForever
 80021d6:	e7fe      	b.n	80021d6 <LoopForever>
  ldr   r0, =_estack
 80021d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80021e4:	080108f4 	.word	0x080108f4
  ldr r2, =_sbss
 80021e8:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80021ec:	20001a1c 	.word	0x20001a1c

080021f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC1_2_IRQHandler>

080021f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f95b 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002202:	200f      	movs	r0, #15
 8002204:	f000 f80e 	bl	8002224 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	e001      	b.n	8002218 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002214:	f7ff fda2 	bl	8001d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002218:	79fb      	ldrb	r3, [r7, #7]

}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_InitTick+0x68>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d022      	beq.n	800227e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_InitTick+0x6c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_InitTick+0x68>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002244:	fbb1 f3f3 	udiv	r3, r1, r3
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f966 	bl	800251e <HAL_SYSTICK_Config>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10f      	bne.n	8002278 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b0f      	cmp	r3, #15
 800225c:	d809      	bhi.n	8002272 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225e:	2200      	movs	r2, #0
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002266:	f000 f932 	bl	80024ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_InitTick+0x70>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e007      	b.n	8002282 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e004      	b.n	8002282 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000008 	.word	0x20000008
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_IncTick+0x1c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_IncTick+0x20>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <HAL_IncTick+0x1c>)
 80022a8:	6013      	str	r3, [r2, #0]
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	200006fc 	.word	0x200006fc
 80022b8:	20000008 	.word	0x20000008

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200006fc 	.word	0x200006fc

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff ffee 	bl	80022bc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ec:	d004      	beq.n	80022f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_Delay+0x40>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f8:	bf00      	nop
 80022fa:	f7ff ffdf 	bl	80022bc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	d8f7      	bhi.n	80022fa <HAL_Delay+0x26>
  {
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000008 	.word	0x20000008

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff40 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff90 	bl	800240c <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5f 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff33 	bl	800237c <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa4 	bl	8002474 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e08d      	b.n	8002666 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_DMA_Init+0x138>)
 8002552:	429a      	cmp	r2, r3
 8002554:	d80f      	bhi.n	8002576 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <HAL_DMA_Init+0x13c>)
 800255e:	4413      	add	r3, r2
 8002560:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_DMA_Init+0x140>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_DMA_Init+0x144>)
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
 8002574:	e00e      	b.n	8002594 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_DMA_Init+0x148>)
 800257e:	4413      	add	r3, r2
 8002580:	4a3d      	ldr	r2, [pc, #244]	; (8002678 <HAL_DMA_Init+0x140>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a3c      	ldr	r2, [pc, #240]	; (8002684 <HAL_DMA_Init+0x14c>)
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f9cc 	bl	8002984 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f4:	d102      	bne.n	80025fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002610:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_DMA_Init+0x104>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d80c      	bhi.n	800263c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f9ec 	bl	8002a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	e008      	b.n	800264e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40020407 	.word	0x40020407
 8002674:	bffdfff8 	.word	0xbffdfff8
 8002678:	cccccccd 	.word	0xcccccccd
 800267c:	40020000 	.word	0x40020000
 8002680:	bffdfbf8 	.word	0xbffdfbf8
 8002684:	40020400 	.word	0x40020400

08002688 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d005      	beq.n	80026ac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e037      	b.n	800271c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ca:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026f8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800271a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d00d      	beq.n	800276e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e047      	b.n	80027fe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020e 	bic.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800279c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
    }
  }
  return status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2204      	movs	r2, #4
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d026      	beq.n	8002882 <HAL_DMA_IRQHandler+0x7a>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d021      	beq.n	8002882 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2104      	movs	r1, #4
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	2b00      	cmp	r3, #0
 8002876:	d071      	beq.n	800295c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002880:	e06c      	b.n	800295c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2202      	movs	r2, #2
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d02e      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d029      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 020a 	bic.w	r2, r2, #10
 80028bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2102      	movs	r1, #2
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d038      	beq.n	800295c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028f2:	e033      	b.n	800295c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2208      	movs	r2, #8
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02a      	beq.n	800295e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d025      	beq.n	800295e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020e 	bic.w	r2, r2, #14
 8002920:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800295c:	bf00      	nop
 800295e:	bf00      	nop
}
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002974:	b2db      	uxtb	r3, r3
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002994:	429a      	cmp	r2, r3
 8002996:	d802      	bhi.n	800299e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e001      	b.n	80029a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3b08      	subs	r3, #8
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2201      	movs	r2, #1
 80029d8:	409a      	lsls	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40020407 	.word	0x40020407
 80029f0:	40020800 	.word	0x40020800
 80029f4:	40020820 	.word	0x40020820
 80029f8:	cccccccd 	.word	0xcccccccd
 80029fc:	40020880 	.word	0x40020880

08002a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	1000823f 	.word	0x1000823f
 8002a44:	40020940 	.word	0x40020940

08002a48 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e147      	b.n	8002cea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fd62 	bl	8001538 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0210 	bic.w	r2, r2, #16
 8002a82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a84:	f7ff fc1a 	bl	80022bc <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a8a:	e012      	b.n	8002ab2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a8c:	f7ff fc16 	bl	80022bc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b0a      	cmp	r3, #10
 8002a98:	d90b      	bls.n	8002ab2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e11b      	b.n	8002cea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d0e5      	beq.n	8002a8c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad0:	f7ff fbf4 	bl	80022bc <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ad6:	e012      	b.n	8002afe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ad8:	f7ff fbf0 	bl	80022bc <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b0a      	cmp	r3, #10
 8002ae4:	d90b      	bls.n	8002afe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0f5      	b.n	8002cea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0e5      	beq.n	8002ad8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0202 	orr.w	r2, r2, #2
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a74      	ldr	r2, [pc, #464]	; (8002cf4 <HAL_FDCAN_Init+0x2ac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d103      	bne.n	8002b2e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b26:	4a74      	ldr	r2, [pc, #464]	; (8002cf8 <HAL_FDCAN_Init+0x2b0>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7c1b      	ldrb	r3, [r3, #16]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	619a      	str	r2, [r3, #24]
 8002b46:	e007      	b.n	8002b58 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b56:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7c5b      	ldrb	r3, [r3, #17]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d108      	bne.n	8002b72 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b6e:	619a      	str	r2, [r3, #24]
 8002b70:	e007      	b.n	8002b82 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b80:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7c9b      	ldrb	r3, [r3, #18]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d108      	bne.n	8002b9c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b98:	619a      	str	r2, [r3, #24]
 8002b9a:	e007      	b.n	8002bac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002baa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002bd0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0210 	bic.w	r2, r2, #16
 8002be0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0204 	orr.w	r2, r2, #4
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e02c      	b.n	8002c56 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d028      	beq.n	8002c56 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d01c      	beq.n	8002c46 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c1a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0210 	orr.w	r2, r2, #16
 8002c2a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d110      	bne.n	8002c56 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0220 	orr.w	r2, r2, #32
 8002c42:	619a      	str	r2, [r3, #24]
 8002c44:	e007      	b.n	8002c56 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c66:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c6e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c7e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c80:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c8a:	d115      	bne.n	8002cb8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	3b01      	subs	r3, #1
 8002c98:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c9a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	3b01      	subs	r3, #1
 8002cae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cb4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cb6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f814 	bl	8002cfc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40006400 	.word	0x40006400
 8002cf8:	40006500 	.word	0x40006500

08002cfc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002d06:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d16:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	061a      	lsls	r2, r3, #24
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e005      	b.n	8002d8a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3304      	adds	r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3f3      	bcc.n	8002d7e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	4000a400 	.word	0x4000a400

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002db6:	e15a      	b.n	800306e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 814c 	beq.w	8003068 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d005      	beq.n	8002de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d130      	bne.n	8002e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e1e:	2201      	movs	r2, #1
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 0201 	and.w	r2, r3, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d017      	beq.n	8002e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d123      	bne.n	8002eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	08da      	lsrs	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3208      	adds	r2, #8
 8002e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	6939      	ldr	r1, [r7, #16]
 8002ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0203 	and.w	r2, r3, #3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80a6 	beq.w	8003068 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1c:	4b5b      	ldr	r3, [pc, #364]	; (800308c <HAL_GPIO_Init+0x2e4>)
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	4a5a      	ldr	r2, [pc, #360]	; (800308c <HAL_GPIO_Init+0x2e4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6613      	str	r3, [r2, #96]	; 0x60
 8002f28:	4b58      	ldr	r3, [pc, #352]	; (800308c <HAL_GPIO_Init+0x2e4>)
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f34:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f5e:	d01f      	beq.n	8002fa0 <HAL_GPIO_Init+0x1f8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a4c      	ldr	r2, [pc, #304]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d019      	beq.n	8002f9c <HAL_GPIO_Init+0x1f4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_GPIO_Init+0x2f0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_GPIO_Init+0x1f0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a4a      	ldr	r2, [pc, #296]	; (800309c <HAL_GPIO_Init+0x2f4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00d      	beq.n	8002f94 <HAL_GPIO_Init+0x1ec>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a49      	ldr	r2, [pc, #292]	; (80030a0 <HAL_GPIO_Init+0x2f8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <HAL_GPIO_Init+0x1e8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a48      	ldr	r2, [pc, #288]	; (80030a4 <HAL_GPIO_Init+0x2fc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_GPIO_Init+0x1e4>
 8002f88:	2305      	movs	r3, #5
 8002f8a:	e00a      	b.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	e008      	b.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e006      	b.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f94:	2303      	movs	r3, #3
 8002f96:	e004      	b.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e002      	b.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb2:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe4:	4a30      	ldr	r2, [pc, #192]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fea:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_GPIO_Init+0x300>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003062:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f ae9d 	bne.w	8002db8 <HAL_GPIO_Init+0x10>
  }
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000
 8003090:	40010000 	.word	0x40010000
 8003094:	48000400 	.word	0x48000400
 8003098:	48000800 	.word	0x48000800
 800309c:	48000c00 	.word	0x48000c00
 80030a0:	48001000 	.word	0x48001000
 80030a4:	48001400 	.word	0x48001400
 80030a8:	40010400 	.word	0x40010400

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c8:	e002      	b.n	80030d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e08d      	b.n	800320a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fb22 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800312c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	e006      	b.n	8003164 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003162:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d108      	bne.n	800317e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e007      	b.n	800318e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800319c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
  }
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00f      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003286:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00f      	beq.n	80032b2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f043 0208 	orr.w	r2, r3, #8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 030b 	and.w	r3, r3, #11
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032ec:	68f9      	ldr	r1, [r7, #12]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fbd6 	bl	8003aa0 <I2C_ITError>
  }
}
 80032f4:	bf00      	nop
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
 8003330:	4613      	mov	r3, r2
 8003332:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <I2C_Slave_ISR_IT+0x24>
 800339c:	2302      	movs	r3, #2
 800339e:	e0e2      	b.n	8003566 <I2C_Slave_ISR_IT+0x1ea>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033bc:	6939      	ldr	r1, [r7, #16]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f9b6 	bl	8003730 <I2C_ITSlaveCplt>
 80033c4:	e0ca      	b.n	800355c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04b      	beq.n	8003468 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d046      	beq.n	8003468 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d128      	bne.n	8003436 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b28      	cmp	r3, #40	; 0x28
 80033ee:	d108      	bne.n	8003402 <I2C_Slave_ISR_IT+0x86>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033f6:	d104      	bne.n	8003402 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033f8:	6939      	ldr	r1, [r7, #16]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fafc 	bl	80039f8 <I2C_ITListenCplt>
 8003400:	e031      	b.n	8003466 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b29      	cmp	r3, #41	; 0x29
 800340c:	d10e      	bne.n	800342c <I2C_Slave_ISR_IT+0xb0>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003414:	d00a      	beq.n	800342c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2210      	movs	r2, #16
 800341c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fc55 	bl	8003cce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f926 	bl	8003676 <I2C_ITSlaveSeqCplt>
 800342a:	e01c      	b.n	8003466 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2210      	movs	r2, #16
 8003432:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003434:	e08f      	b.n	8003556 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2210      	movs	r2, #16
 800343c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <I2C_Slave_ISR_IT+0xdc>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003456:	d17e      	bne.n	8003556 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	4619      	mov	r1, r3
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fb1e 	bl	8003aa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003464:	e077      	b.n	8003556 <I2C_Slave_ISR_IT+0x1da>
 8003466:	e076      	b.n	8003556 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02f      	beq.n	80034d2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02a      	beq.n	80034d2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d14b      	bne.n	800355a <I2C_Slave_ISR_IT+0x1de>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d047      	beq.n	800355a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8d3 	bl	8003676 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034d0:	e043      	b.n	800355a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034e6:	6939      	ldr	r1, [r7, #16]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f840 	bl	800356e <I2C_ITAddrCplt>
 80034ee:	e035      	b.n	800355c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d030      	beq.n	800355c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02b      	beq.n	800355c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
 800353e:	e00d      	b.n	800355c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003546:	d002      	beq.n	800354e <I2C_Slave_ISR_IT+0x1d2>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f891 	bl	8003676 <I2C_ITSlaveSeqCplt>
 8003554:	e002      	b.n	800355c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800355a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003584:	2b28      	cmp	r3, #40	; 0x28
 8003586:	d16a      	bne.n	800365e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035a6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035c2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d138      	bne.n	800363e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	09db      	lsrs	r3, r3, #7
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	89bb      	ldrh	r3, [r7, #12]
 80035d4:	4053      	eors	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f003 0306 	and.w	r3, r3, #6
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11c      	bne.n	800361a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d13b      	bne.n	800366e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800360c:	89ba      	ldrh	r2, [r7, #12]
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fe86 	bl	8003324 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003618:	e029      	b.n	800366e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800361a:	893b      	ldrh	r3, [r7, #8]
 800361c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800361e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fb95 	bl	8003d52 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003630:	89ba      	ldrh	r2, [r7, #12]
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fe74 	bl	8003324 <HAL_I2C_AddrCallback>
}
 800363c:	e017      	b.n	800366e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800363e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fb85 	bl	8003d52 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003650:	89ba      	ldrh	r2, [r7, #12]
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fe64 	bl	8003324 <HAL_I2C_AddrCallback>
}
 800365c:	e007      	b.n	800366e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2208      	movs	r2, #8
 8003664:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e00c      	b.n	80036c4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b29      	cmp	r3, #41	; 0x29
 80036ce:	d112      	bne.n	80036f6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2228      	movs	r2, #40	; 0x28
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2221      	movs	r2, #33	; 0x21
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036de:	2101      	movs	r1, #1
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb36 	bl	8003d52 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fe04 	bl	80032fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036f4:	e017      	b.n	8003726 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003700:	d111      	bne.n	8003726 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2228      	movs	r2, #40	; 0x28
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2222      	movs	r2, #34	; 0x22
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003710:	2102      	movs	r1, #2
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fb1d 	bl	8003d52 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fdf5 	bl	8003310 <HAL_I2C_SlaveRxCpltCallback>
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003752:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2220      	movs	r2, #32
 800375a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800375c:	7afb      	ldrb	r3, [r7, #11]
 800375e:	2b21      	cmp	r3, #33	; 0x21
 8003760:	d002      	beq.n	8003768 <I2C_ITSlaveCplt+0x38>
 8003762:	7afb      	ldrb	r3, [r7, #11]
 8003764:	2b29      	cmp	r3, #41	; 0x29
 8003766:	d108      	bne.n	800377a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003768:	f248 0101 	movw	r1, #32769	; 0x8001
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faf0 	bl	8003d52 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2221      	movs	r2, #33	; 0x21
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
 8003778:	e019      	b.n	80037ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	2b22      	cmp	r3, #34	; 0x22
 800377e:	d002      	beq.n	8003786 <I2C_ITSlaveCplt+0x56>
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	2b2a      	cmp	r3, #42	; 0x2a
 8003784:	d108      	bne.n	8003798 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003786:	f248 0102 	movw	r1, #32770	; 0x8002
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fae1 	bl	8003d52 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2222      	movs	r2, #34	; 0x22
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
 8003796:	e00a      	b.n	80037ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003798:	7afb      	ldrb	r3, [r7, #11]
 800379a:	2b28      	cmp	r3, #40	; 0x28
 800379c:	d107      	bne.n	80037ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800379e:	f248 0103 	movw	r1, #32771	; 0x8003
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fad5 	bl	8003d52 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b89      	ldr	r3, [pc, #548]	; (80039f0 <I2C_ITSlaveCplt+0x2c0>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa7d 	bl	8003cce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d013      	beq.n	8003806 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01f      	beq.n	8003836 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003804:	e017      	b.n	8003836 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800381e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0304 	bic.w	r3, r3, #4
 8003846:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d049      	beq.n	8003936 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d044      	beq.n	8003936 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d128      	bne.n	8003908 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b28      	cmp	r3, #40	; 0x28
 80038c0:	d108      	bne.n	80038d4 <I2C_ITSlaveCplt+0x1a4>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c8:	d104      	bne.n	80038d4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80038ca:	6979      	ldr	r1, [r7, #20]
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f893 	bl	80039f8 <I2C_ITListenCplt>
 80038d2:	e030      	b.n	8003936 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b29      	cmp	r3, #41	; 0x29
 80038de:	d10e      	bne.n	80038fe <I2C_ITSlaveCplt+0x1ce>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038e6:	d00a      	beq.n	80038fe <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9ec 	bl	8003cce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff febd 	bl	8003676 <I2C_ITSlaveSeqCplt>
 80038fc:	e01b      	b.n	8003936 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2210      	movs	r2, #16
 8003904:	61da      	str	r2, [r3, #28]
 8003906:	e016      	b.n	8003936 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2210      	movs	r2, #16
 800390e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0204 	orr.w	r2, r3, #4
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <I2C_ITSlaveCplt+0x1fa>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003928:	d105      	bne.n	8003936 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8b5 	bl	8003aa0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	2b00      	cmp	r3, #0
 800394a:	d010      	beq.n	800396e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8a4 	bl	8003aa0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b28      	cmp	r3, #40	; 0x28
 8003962:	d141      	bne.n	80039e8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f846 	bl	80039f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800396c:	e03c      	b.n	80039e8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003976:	d014      	beq.n	80039a2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fe7c 	bl	8003676 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <I2C_ITSlaveCplt+0x2c4>)
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fcd0 	bl	8003340 <HAL_I2C_ListenCpltCallback>
}
 80039a0:	e022      	b.n	80039e8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	d10e      	bne.n	80039cc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fca3 	bl	8003310 <HAL_I2C_SlaveRxCpltCallback>
}
 80039ca:	e00d      	b.n	80039e8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fc8a 	bl	80032fc <HAL_I2C_SlaveTxCpltCallback>
}
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	fe00e800 	.word	0xfe00e800
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <I2C_ITListenCplt+0xa4>)
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d022      	beq.n	8003a74 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d012      	beq.n	8003a74 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f043 0204 	orr.w	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a74:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f96a 	bl	8003d52 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2210      	movs	r2, #16
 8003a84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fc56 	bl	8003340 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	ffff0000 	.word	0xffff0000

08003aa0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a6d      	ldr	r2, [pc, #436]	; (8003c74 <I2C_ITError+0x1d4>)
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b28      	cmp	r3, #40	; 0x28
 8003ad6:	d005      	beq.n	8003ae4 <I2C_ITError+0x44>
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b29      	cmp	r3, #41	; 0x29
 8003adc:	d002      	beq.n	8003ae4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae2:	d10b      	bne.n	8003afc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ae4:	2103      	movs	r1, #3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f933 	bl	8003d52 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2228      	movs	r2, #40	; 0x28
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <I2C_ITError+0x1d8>)
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34
 8003afa:	e030      	b.n	8003b5e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003afc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f926 	bl	8003d52 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8e1 	bl	8003cce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d01f      	beq.n	8003b58 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d114      	bne.n	8003b58 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d109      	bne.n	8003b50 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2210      	movs	r2, #16
 8003b42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2220      	movs	r2, #32
 8003b56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d039      	beq.n	8003be0 <I2C_ITError+0x140>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b11      	cmp	r3, #17
 8003b70:	d002      	beq.n	8003b78 <I2C_ITError+0xd8>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b21      	cmp	r3, #33	; 0x21
 8003b76:	d133      	bne.n	8003be0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b86:	d107      	bne.n	8003b98 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fee2 	bl	8002966 <HAL_DMA_GetState>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d017      	beq.n	8003bd8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	4a33      	ldr	r2, [pc, #204]	; (8003c7c <I2C_ITError+0x1dc>)
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fdbc 	bl	800273a <HAL_DMA_Abort_IT>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d04d      	beq.n	8003c64 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bd6:	e045      	b.n	8003c64 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f851 	bl	8003c80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bde:	e041      	b.n	8003c64 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d039      	beq.n	8003c5c <I2C_ITError+0x1bc>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b12      	cmp	r3, #18
 8003bec:	d002      	beq.n	8003bf4 <I2C_ITError+0x154>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b22      	cmp	r3, #34	; 0x22
 8003bf2:	d133      	bne.n	8003c5c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c02:	d107      	bne.n	8003c14 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fea4 	bl	8002966 <HAL_DMA_GetState>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d017      	beq.n	8003c54 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <I2C_ITError+0x1dc>)
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fd7e 	bl	800273a <HAL_DMA_Abort_IT>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d011      	beq.n	8003c68 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c52:	e009      	b.n	8003c68 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f813 	bl	8003c80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c5a:	e005      	b.n	8003c68 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f80f 	bl	8003c80 <I2C_TreatErrorCallback>
  }
}
 8003c62:	e002      	b.n	8003c6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c64:	bf00      	nop
 8003c66:	e000      	b.n	8003c6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c68:	bf00      	nop
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	ffff0000 	.word	0xffff0000
 8003c78:	0800337d 	.word	0x0800337d
 8003c7c:	08003d17 	.word	0x08003d17

08003c80 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d10e      	bne.n	8003cb2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fb5c 	bl	8003368 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb0:	e009      	b.n	8003cc6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fb47 	bl	8003354 <HAL_I2C_ErrorCallback>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d103      	bne.n	8003cec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d007      	beq.n	8003d0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	619a      	str	r2, [r3, #24]
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	2200      	movs	r2, #0
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	2200      	movs	r2, #0
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff ff9b 	bl	8003c80 <I2C_TreatErrorCallback>
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d80:	2b28      	cmp	r3, #40	; 0x28
 8003d82:	d003      	beq.n	8003d8c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00f      	beq.n	8003db6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003daa:	2b28      	cmp	r3, #40	; 0x28
 8003dac:	d003      	beq.n	8003db6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003db4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003db6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da03      	bge.n	8003dc6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003dc6:	887b      	ldrh	r3, [r7, #2]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d103      	bne.n	8003dd4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003dd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d103      	bne.n	8003de2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d103      	bne.n	8003df0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43da      	mvns	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	400a      	ands	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d138      	bne.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e032      	b.n	8003e98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2224      	movs	r2, #36	; 0x24
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e60:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d139      	bne.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e033      	b.n	8003f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0c0      	b.n	80040d0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f009 f8e2 	bl	800d12c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f004 ff2a 	bl	8008dce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e03e      	b.n	8003ffe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3311      	adds	r3, #17
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3310      	adds	r3, #16
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3313      	adds	r3, #19
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	3320      	adds	r3, #32
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	3324      	adds	r3, #36	; 0x24
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3bb      	bcc.n	8003f80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e044      	b.n	8004098 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	440b      	add	r3, r1
 8004032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	440b      	add	r3, r1
 8004048:	f203 1353 	addw	r3, r3, #339	; 0x153
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	3301      	adds	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	791b      	ldrb	r3, [r3, #4]
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3b5      	bcc.n	800400e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80040ae:	f004 fea9 	bl	8008e04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7a9b      	ldrb	r3, [r3, #10]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f001 fc41 	bl	8005950 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_PCD_Start+0x16>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e012      	b.n	8004114 <HAL_PCD_Start+0x3c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f004 fe50 	bl	8008da0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f007 f910 	bl	800b32a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f007 f915 	bl	800b358 <USB_ReadInterrupts>
 800412e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fb04 	bl	8004748 <PCD_EP_ISR_Handler>

    return;
 8004140:	e110      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	b292      	uxth	r2, r2
 8004160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f009 f872 	bl	800d24e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800416a:	2100      	movs	r1, #0
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f8fc 	bl	800436a <HAL_PCD_SetAddress>

    return;
 8004172:	e0f7      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004190:	b292      	uxth	r2, r2
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004196:	e0e5      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b4:	b292      	uxth	r2, r2
 80041b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80041ba:	e0d3      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d034      	beq.n	8004230 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0204 	bic.w	r2, r2, #4
 80041d8:	b292      	uxth	r2, r2
 80041da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0208 	bic.w	r2, r2, #8
 80041f0:	b292      	uxth	r2, r2
 80041f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004208:	2100      	movs	r1, #0
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f009 fa12 	bl	800d634 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f009 f855 	bl	800d2c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004228:	b292      	uxth	r2, r2
 800422a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800422e:	e099      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004236:	2b00      	cmp	r3, #0
 8004238:	d027      	beq.n	800428a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0208 	orr.w	r2, r2, #8
 800424c:	b292      	uxth	r2, r2
 800424e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004264:	b292      	uxth	r2, r2
 8004266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0204 	orr.w	r2, r2, #4
 800427c:	b292      	uxth	r2, r2
 800427e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f009 f802 	bl	800d28c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004288:	e06c      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d040      	beq.n	8004316 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a6:	b292      	uxth	r2, r2
 80042a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d12b      	bne.n	800430e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0204 	orr.w	r2, r2, #4
 80042c8:	b292      	uxth	r2, r2
 80042ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0208 	orr.w	r2, r2, #8
 80042e0:	b292      	uxth	r2, r2
 80042e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004304:	2101      	movs	r1, #1
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f009 f994 	bl	800d634 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800430c:	e02a      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f008 ffbc 	bl	800d28c <HAL_PCD_SuspendCallback>
    return;
 8004314:	e026      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00f      	beq.n	8004340 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004332:	b292      	uxth	r2, r2
 8004334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f008 ff7a 	bl	800d232 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800433e:	e011      	b.n	8004364 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800435c:	b292      	uxth	r2, r2
 800435e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004362:	bf00      	nop
  }
}
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_PCD_SetAddress+0x1a>
 8004380:	2302      	movs	r3, #2
 8004382:	e012      	b.n	80043aa <HAL_PCD_SetAddress+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f006 ffb1 	bl	800b302 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	461a      	mov	r2, r3
 80043c0:	4603      	mov	r3, r0
 80043c2:	70fb      	strb	r3, [r7, #3]
 80043c4:	460b      	mov	r3, r1
 80043c6:	803b      	strh	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da0e      	bge.n	80043f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 0207 	and.w	r2, r3, #7
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	3310      	adds	r3, #16
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	4413      	add	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	705a      	strb	r2, [r3, #1]
 80043f4:	e00e      	b.n	8004414 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 0207 	and.w	r2, r3, #7
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004420:	883a      	ldrh	r2, [r7, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	78ba      	ldrb	r2, [r7, #2]
 800442a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800442c:	78bb      	ldrb	r3, [r7, #2]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d102      	bne.n	8004438 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_PCD_EP_Open+0x94>
 8004442:	2302      	movs	r3, #2
 8004444:	e00e      	b.n	8004464 <HAL_PCD_EP_Open+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f004 fcf3 	bl	8008e40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004462:	7afb      	ldrb	r3, [r7, #11]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	da0e      	bge.n	800449e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 0207 	and.w	r2, r3, #7
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	3310      	adds	r3, #16
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	705a      	strb	r2, [r3, #1]
 800449c:	e00e      	b.n	80044bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 0207 	and.w	r2, r3, #7
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_PCD_EP_Close+0x6a>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e00e      	b.n	80044f4 <HAL_PCD_EP_Close+0x88>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f005 f86f 	bl	80095c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	f003 0207 	and.w	r2, r3, #7
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2200      	movs	r2, #0
 8004534:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453c:	7afb      	ldrb	r3, [r7, #11]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	b2da      	uxtb	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	4618      	mov	r0, r3
 8004550:	f005 fa27 	bl	80099a2 <USB_EPStartXfer>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	f003 0207 	and.w	r2, r3, #7
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004580:	681b      	ldr	r3, [r3, #0]
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	460b      	mov	r3, r1
 800459c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	f003 0207 	and.w	r2, r3, #7
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	3310      	adds	r3, #16
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2200      	movs	r2, #0
 80045d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2201      	movs	r2, #1
 80045d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6979      	ldr	r1, [r7, #20]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f005 f9d8 	bl	80099a2 <USB_EPStartXfer>

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	7912      	ldrb	r2, [r2, #4]
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03e      	b.n	8004698 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800461a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da0e      	bge.n	8004640 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 0207 	and.w	r2, r3, #7
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3310      	adds	r3, #16
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	705a      	strb	r2, [r3, #1]
 800463e:	e00c      	b.n	800465a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_PCD_EP_SetStall+0x7e>
 8004676:	2302      	movs	r3, #2
 8004678:	e00e      	b.n	8004698 <HAL_PCD_EP_SetStall+0x9c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	f006 fd3b 	bl	800b104 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	7912      	ldrb	r2, [r2, #4]
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e040      	b.n	8004740 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da0e      	bge.n	80046e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	f003 0207 	and.w	r2, r3, #7
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	3310      	adds	r3, #16
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	705a      	strb	r2, [r3, #1]
 80046e2:	e00e      	b.n	8004702 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 0207 	and.w	r2, r3, #7
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	b2da      	uxtb	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_PCD_EP_ClrStall+0x82>
 800471e:	2302      	movs	r3, #2
 8004720:	e00e      	b.n	8004740 <HAL_PCD_EP_ClrStall+0xa0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	4618      	mov	r0, r3
 8004732:	f006 fd38 	bl	800b1a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b096      	sub	sp, #88	; 0x58
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004750:	e3ae      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800475a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800475e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800476c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 8170 	bne.w	8004a56 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	d14d      	bne.n	800481e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	81fb      	strh	r3, [r7, #14]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800479e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3310      	adds	r3, #16
 80047aa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	4413      	add	r3, r2
 80047c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	441a      	add	r2, r3
 80047de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047e2:	2100      	movs	r1, #0
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f008 fd0a 	bl	800d1fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7b1b      	ldrb	r3, [r3, #12]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 835d 	beq.w	8004eb0 <PCD_EP_ISR_Handler+0x768>
 80047f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 8358 	bne.w	8004eb0 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7b1b      	ldrb	r3, [r3, #12]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800480a:	b2da      	uxtb	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	b292      	uxth	r2, r2
 8004812:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	731a      	strb	r2, [r3, #12]
 800481c:	e348      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004824:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004830:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004838:	2b00      	cmp	r3, #0
 800483a:	d032      	beq.n	80048a2 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	4413      	add	r3, r2
 8004856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004862:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004870:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004874:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004876:	b29b      	uxth	r3, r3
 8004878:	f006 fdc0 	bl	800b3fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29a      	uxth	r2, r3
 8004884:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004888:	4013      	ands	r3, r2
 800488a:	823b      	strh	r3, [r7, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	8a3a      	ldrh	r2, [r7, #16]
 8004892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004896:	b292      	uxth	r2, r2
 8004898:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f008 fc82 	bl	800d1a4 <HAL_PCD_SetupStageCallback>
 80048a0:	e306      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f280 8302 	bge.w	8004eb0 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048b8:	4013      	ands	r3, r2
 80048ba:	83fb      	strh	r3, [r7, #30]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	8bfa      	ldrh	r2, [r7, #30]
 80048c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048c6:	b292      	uxth	r2, r2
 80048c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4413      	add	r3, r2
 80048e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d019      	beq.n	800492e <PCD_EP_ISR_Handler+0x1e6>
 80048fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d015      	beq.n	800492e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004908:	6959      	ldr	r1, [r3, #20]
 800490a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004912:	b29b      	uxth	r3, r3
 8004914:	f006 fd72 	bl	800b3fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	441a      	add	r2, r3
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004926:	2100      	movs	r1, #0
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f008 fc4d 	bl	800d1c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004938:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800493c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 82b5 	bne.w	8004eb0 <PCD_EP_ISR_Handler+0x768>
 8004946:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800494a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800494e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004952:	f000 82ad 	beq.w	8004eb0 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004964:	b29b      	uxth	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004980:	b29a      	uxth	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b3e      	cmp	r3, #62	; 0x3e
 800498c:	d91d      	bls.n	80049ca <PCD_EP_ISR_Handler+0x282>
 800498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
 8004996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <PCD_EP_ISR_Handler+0x260>
 80049a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a4:	3b01      	subs	r3, #1
 80049a6:	647b      	str	r3, [r7, #68]	; 0x44
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e026      	b.n	8004a18 <PCD_EP_ISR_Handler+0x2d0>
 80049ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <PCD_EP_ISR_Handler+0x2a0>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e017      	b.n	8004a18 <PCD_EP_ISR_Handler+0x2d0>
 80049e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
 80049f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <PCD_EP_ISR_Handler+0x2ba>
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	3301      	adds	r3, #1
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	029b      	lsls	r3, r3, #10
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	827b      	strh	r3, [r7, #18]
 8004a2a:	8a7b      	ldrh	r3, [r7, #18]
 8004a2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a30:	827b      	strh	r3, [r7, #18]
 8004a32:	8a7b      	ldrh	r3, [r7, #18]
 8004a34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a38:	827b      	strh	r3, [r7, #18]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	8a7b      	ldrh	r3, [r7, #18]
 8004a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	8013      	strh	r3, [r2, #0]
 8004a54:	e22c      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a6a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f280 80f6 	bge.w	8004c60 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa6:	b292      	uxth	r2, r2
 8004aa8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004aaa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac2:	7b1b      	ldrb	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d123      	bne.n	8004b10 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 808e 	beq.w	8004c16 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b00:	6959      	ldr	r1, [r3, #20]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b04:	88da      	ldrh	r2, [r3, #6]
 8004b06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b0a:	f006 fc77 	bl	800b3fc <USB_ReadPMA>
 8004b0e:	e082      	b.n	8004c16 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b12:	78db      	ldrb	r3, [r3, #3]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d10a      	bne.n	8004b2e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f9d3 	bl	8004ecc <HAL_PCD_EP_DB_Receive>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004b2c:	e073      	b.n	8004c16 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d022      	beq.n	8004bd2 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004bb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02c      	beq.n	8004c16 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc2:	6959      	ldr	r1, [r3, #20]
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc6:	891a      	ldrh	r2, [r3, #8]
 8004bc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bcc:	f006 fc16 	bl	800b3fc <USB_ReadPMA>
 8004bd0:	e021      	b.n	8004c16 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	4413      	add	r3, r2
 8004bec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004bfa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c08:	6959      	ldr	r1, [r3, #20]
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0c:	895a      	ldrh	r2, [r3, #10]
 8004c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c12:	f006 fbf3 	bl	800b3fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c1e:	441a      	add	r2, r3
 8004c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c2c:	441a      	add	r2, r3
 8004c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c30:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <PCD_EP_ISR_Handler+0x4fe>
 8004c3a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d206      	bcs.n	8004c54 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f008 fabb 	bl	800d1c8 <HAL_PCD_DataOutStageCallback>
 8004c52:	e005      	b.n	8004c60 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 fea1 	bl	80099a2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8121 	beq.w	8004eb0 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c6e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	3310      	adds	r3, #16
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc0:	78db      	ldrb	r3, [r3, #3]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	f040 80a2 	bne.w	8004e0c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cca:	2200      	movs	r2, #0
 8004ccc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8093 	beq.w	8004dfe <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d046      	beq.n	8004d72 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d126      	bne.n	8004d3a <PCD_EP_ISR_Handler+0x5f2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	4413      	add	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	00da      	lsls	r2, r3, #3
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	e061      	b.n	8004dfe <PCD_EP_ISR_Handler+0x6b6>
 8004d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d15d      	bne.n	8004dfe <PCD_EP_ISR_Handler+0x6b6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	4413      	add	r3, r2
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	00da      	lsls	r2, r3, #3
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	4413      	add	r3, r2
 8004d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e045      	b.n	8004dfe <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d126      	bne.n	8004dce <PCD_EP_ISR_Handler+0x686>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	4413      	add	r3, r2
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
 8004d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	00da      	lsls	r2, r3, #3
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	4413      	add	r3, r2
 8004da2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	e017      	b.n	8004dfe <PCD_EP_ISR_Handler+0x6b6>
 8004dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d113      	bne.n	8004dfe <PCD_EP_ISR_Handler+0x6b6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	4413      	add	r3, r2
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	00da      	lsls	r2, r3, #3
 8004dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df0:	4413      	add	r3, r2
 8004df2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f008 f9fa 	bl	800d1fe <HAL_PCD_DataInStageCallback>
 8004e0a:	e051      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004e0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d144      	bne.n	8004ea2 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d907      	bls.n	8004e5c <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e58:	619a      	str	r2, [r3, #24]
 8004e5a:	e002      	b.n	8004e62 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5e:	2200      	movs	r2, #0
 8004e60:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f008 f9c4 	bl	800d1fe <HAL_PCD_DataInStageCallback>
 8004e76:	e01b      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e80:	441a      	add	r2, r3
 8004e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e84:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e8e:	441a      	add	r2, r3
 8004e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 fd81 	bl	80099a2 <USB_EPStartXfer>
 8004ea0:	e006      	b.n	8004eb0 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ea2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f917 	bl	80050de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b21b      	sxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f6ff ac48 	blt.w	8004752 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3758      	adds	r7, #88	; 0x58
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d07c      	beq.n	8004fde <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	4413      	add	r3, r2
 8004efe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	8b7b      	ldrh	r3, [r7, #26]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d306      	bcc.n	8004f22 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	8b7b      	ldrh	r3, [r7, #26]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	619a      	str	r2, [r3, #24]
 8004f20:	e002      	b.n	8004f28 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2200      	movs	r2, #0
 8004f26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d123      	bne.n	8004f78 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	833b      	strh	r3, [r7, #24]
 8004f4c:	8b3b      	ldrh	r3, [r7, #24]
 8004f4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f52:	833b      	strh	r3, [r7, #24]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	8b3b      	ldrh	r3, [r7, #24]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01f      	beq.n	8004fc2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	82fb      	strh	r3, [r7, #22]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8afb      	ldrh	r3, [r7, #22]
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fc2:	8b7b      	ldrh	r3, [r7, #26]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8085 	beq.w	80050d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6959      	ldr	r1, [r3, #20]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	891a      	ldrh	r2, [r3, #8]
 8004fd6:	8b7b      	ldrh	r3, [r7, #26]
 8004fd8:	f006 fa10 	bl	800b3fc <USB_ReadPMA>
 8004fdc:	e07a      	b.n	80050d4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005002:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	8b7b      	ldrh	r3, [r7, #26]
 800500a:	429a      	cmp	r2, r3
 800500c:	d306      	bcc.n	800501c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	8b7b      	ldrh	r3, [r7, #26]
 8005014:	1ad2      	subs	r2, r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	619a      	str	r2, [r3, #24]
 800501a:	e002      	b.n	8005022 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d123      	bne.n	8005072 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	83fb      	strh	r3, [r7, #30]
 8005046:	8bfb      	ldrh	r3, [r7, #30]
 8005048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800504c:	83fb      	strh	r3, [r7, #30]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	8bfb      	ldrh	r3, [r7, #30]
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d11f      	bne.n	80050bc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	83bb      	strh	r3, [r7, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8bbb      	ldrh	r3, [r7, #28]
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050bc:	8b7b      	ldrh	r3, [r7, #26]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6959      	ldr	r1, [r3, #20]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	895a      	ldrh	r2, [r3, #10]
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	f006 f994 	bl	800b3fc <USB_ReadPMA>
    }
  }

  return count;
 80050d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b0a4      	sub	sp, #144	; 0x90
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 81db 	beq.w	80054ae <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005100:	b29b      	uxth	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4413      	add	r3, r2
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	4413      	add	r3, r2
 8005112:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800511c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005128:	429a      	cmp	r2, r3
 800512a:	d907      	bls.n	800513c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	699a      	ldr	r2, [r3, #24]
 8005130:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	619a      	str	r2, [r3, #24]
 800513a:	e002      	b.n	8005142 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f040 80b9 	bne.w	80052be <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d126      	bne.n	80051a2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	4413      	add	r3, r2
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	00da      	lsls	r2, r3, #3
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	4413      	add	r3, r2
 8005176:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005186:	b29a      	uxth	r2, r3
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519a:	b29a      	uxth	r2, r3
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	e01a      	b.n	80051d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d116      	bne.n	80051d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	4413      	add	r3, r2
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	00da      	lsls	r2, r3, #3
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d126      	bne.n	8005234 <HAL_PCD_EP_DB_Transmit+0x156>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	00da      	lsls	r2, r3, #3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005218:	b29a      	uxth	r2, r3
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522c:	b29a      	uxth	r2, r3
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e017      	b.n	8005264 <HAL_PCD_EP_DB_Transmit+0x186>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d113      	bne.n	8005264 <HAL_PCD_EP_DB_Transmit+0x186>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	4413      	add	r3, r2
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	00da      	lsls	r2, r3, #3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	4413      	add	r3, r2
 8005258:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2200      	movs	r2, #0
 8005262:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f007 ffc7 	bl	800d1fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 82fa 	beq.w	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	82fb      	strh	r3, [r7, #22]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	8afb      	ldrh	r3, [r7, #22]
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
 80052bc:	e2d8      	b.n	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d021      	beq.n	800530c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005312:	2b01      	cmp	r3, #1
 8005314:	f040 82ac 	bne.w	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005320:	441a      	add	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800532e:	441a      	add	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d30b      	bcc.n	8005358 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	621a      	str	r2, [r3, #32]
 8005356:	e017      	b.n	8005388 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005360:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005370:	e00a      	b.n	8005388 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2200      	movs	r2, #0
 8005386:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d165      	bne.n	800545c <HAL_PCD_EP_DB_Transmit+0x37e>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a4:	4413      	add	r3, r2
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	00da      	lsls	r2, r3, #3
 80053ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b0:	4413      	add	r3, r2
 80053b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053cc:	2b3e      	cmp	r3, #62	; 0x3e
 80053ce:	d91d      	bls.n	800540c <HAL_PCD_EP_DB_Transmit+0x32e>
 80053d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <HAL_PCD_EP_DB_Transmit+0x30c>
 80053e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e6:	3b01      	subs	r3, #1
 80053e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005404:	b29a      	uxth	r2, r3
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	e044      	b.n	8005496 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800540c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <HAL_PCD_EP_DB_Transmit+0x34c>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005422:	b29a      	uxth	r2, r3
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e035      	b.n	8005496 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800542a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	64bb      	str	r3, [r7, #72]	; 0x48
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_PCD_EP_DB_Transmit+0x366>
 800543e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005440:	3301      	adds	r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	; 0x48
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29a      	uxth	r2, r3
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	b29b      	uxth	r3, r3
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	b29b      	uxth	r3, r3
 8005452:	4313      	orrs	r3, r2
 8005454:	b29a      	uxth	r2, r3
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	e01c      	b.n	8005496 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d118      	bne.n	8005496 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005478:	4413      	add	r3, r2
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	00da      	lsls	r2, r3, #3
 8005482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005484:	4413      	add	r3, r2
 8005486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800548a:	643b      	str	r3, [r7, #64]	; 0x40
 800548c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005490:	b29a      	uxth	r2, r3
 8005492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005494:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6959      	ldr	r1, [r3, #20]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	891a      	ldrh	r2, [r3, #8]
 80054a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f005 ff66 	bl	800b378 <USB_WritePMA>
 80054ac:	e1e0      	b.n	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054de:	429a      	cmp	r2, r3
 80054e0:	d307      	bcc.n	80054f2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	619a      	str	r2, [r3, #24]
 80054f0:	e002      	b.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2200      	movs	r2, #0
 80054f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 80c0 	bne.w	8005682 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d126      	bne.n	8005558 <HAL_PCD_EP_DB_Transmit+0x47a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800551e:	4413      	add	r3, r2
 8005520:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	00da      	lsls	r2, r3, #3
 8005528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800552a:	4413      	add	r3, r2
 800552c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005530:	67bb      	str	r3, [r7, #120]	; 0x78
 8005532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553c:	b29a      	uxth	r2, r3
 800553e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005550:	b29a      	uxth	r2, r3
 8005552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e01a      	b.n	800558e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d116      	bne.n	800558e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	667b      	str	r3, [r7, #100]	; 0x64
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005574:	4413      	add	r3, r2
 8005576:	667b      	str	r3, [r7, #100]	; 0x64
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	00da      	lsls	r2, r3, #3
 800557e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005580:	4413      	add	r3, r2
 8005582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005586:	663b      	str	r3, [r7, #96]	; 0x60
 8005588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800558a:	2200      	movs	r2, #0
 800558c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	677b      	str	r3, [r7, #116]	; 0x74
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d12b      	bne.n	80055f4 <HAL_PCD_EP_DB_Transmit+0x516>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	4413      	add	r3, r2
 80055b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	00da      	lsls	r2, r3, #3
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	4413      	add	r3, r2
 80055be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055d8:	801a      	strh	r2, [r3, #0]
 80055da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e017      	b.n	8005624 <HAL_PCD_EP_DB_Transmit+0x546>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d113      	bne.n	8005624 <HAL_PCD_EP_DB_Transmit+0x546>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560a:	4413      	add	r3, r2
 800560c:	677b      	str	r3, [r7, #116]	; 0x74
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	00da      	lsls	r2, r3, #3
 8005614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005616:	4413      	add	r3, r2
 8005618:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800561c:	673b      	str	r3, [r7, #112]	; 0x70
 800561e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005620:	2200      	movs	r2, #0
 8005622:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f007 fde7 	bl	800d1fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005636:	2b00      	cmp	r3, #0
 8005638:	f040 811a 	bne.w	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800566c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]
 8005680:	e0f6      	b.n	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d121      	bne.n	80056d0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	f040 80ca 	bne.w	8005870 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	695a      	ldr	r2, [r3, #20]
 80056e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80056e4:	441a      	add	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80056f2:	441a      	add	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d30b      	bcc.n	800571c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	621a      	str	r2, [r3, #32]
 800571a:	e017      	b.n	800574c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005724:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005734:	e00a      	b.n	800574c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2200      	movs	r2, #0
 8005742:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	657b      	str	r3, [r7, #84]	; 0x54
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d165      	bne.n	8005826 <HAL_PCD_EP_DB_Transmit+0x748>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005768:	b29b      	uxth	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576e:	4413      	add	r3, r2
 8005770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	00da      	lsls	r2, r3, #3
 8005778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577a:	4413      	add	r3, r2
 800577c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005780:	65bb      	str	r3, [r7, #88]	; 0x58
 8005782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578c:	b29a      	uxth	r2, r3
 800578e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005796:	2b3e      	cmp	r3, #62	; 0x3e
 8005798:	d91d      	bls.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800579a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80057ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057b0:	3b01      	subs	r3, #1
 80057b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e041      	b.n	800585a <HAL_PCD_EP_DB_Transmit+0x77c>
 80057d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_PCD_EP_DB_Transmit+0x716>
 80057de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e032      	b.n	800585a <HAL_PCD_EP_DB_Transmit+0x77c>
 80057f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_PCD_EP_DB_Transmit+0x730>
 8005808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800580a:	3301      	adds	r3, #1
 800580c:	66bb      	str	r3, [r7, #104]	; 0x68
 800580e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29a      	uxth	r2, r3
 8005814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005816:	b29b      	uxth	r3, r3
 8005818:	029b      	lsls	r3, r3, #10
 800581a:	b29b      	uxth	r3, r3
 800581c:	4313      	orrs	r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	e019      	b.n	800585a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d115      	bne.n	800585a <HAL_PCD_EP_DB_Transmit+0x77c>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800583c:	4413      	add	r3, r2
 800583e:	657b      	str	r3, [r7, #84]	; 0x54
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	00da      	lsls	r2, r3, #3
 8005846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005848:	4413      	add	r3, r2
 800584a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800584e:	653b      	str	r3, [r7, #80]	; 0x50
 8005850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005854:	b29a      	uxth	r2, r3
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6959      	ldr	r1, [r3, #20]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	895a      	ldrh	r2, [r3, #10]
 8005866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800586a:	b29b      	uxth	r3, r3
 800586c:	f005 fd84 	bl	800b378 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588a:	82bb      	strh	r3, [r7, #20]
 800588c:	8abb      	ldrh	r3, [r7, #20]
 800588e:	f083 0310 	eor.w	r3, r3, #16
 8005892:	82bb      	strh	r3, [r7, #20]
 8005894:	8abb      	ldrh	r3, [r7, #20]
 8005896:	f083 0320 	eor.w	r3, r3, #32
 800589a:	82bb      	strh	r3, [r7, #20]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	8abb      	ldrh	r3, [r7, #20]
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3790      	adds	r7, #144	; 0x90
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	817b      	strh	r3, [r7, #10]
 80058d8:	4613      	mov	r3, r2
 80058da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058dc:	897b      	ldrh	r3, [r7, #10]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e8:	897b      	ldrh	r3, [r7, #10]
 80058ea:	f003 0207 	and.w	r2, r3, #7
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	3310      	adds	r3, #16
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	e009      	b.n	8005914 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005900:	897a      	ldrh	r2, [r7, #10]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005914:	893b      	ldrh	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2200      	movs	r2, #0
 800591e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	b29a      	uxth	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	80da      	strh	r2, [r3, #6]
 8005928:	e00b      	b.n	8005942 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2201      	movs	r2, #1
 800592e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	b29a      	uxth	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	b29a      	uxth	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005974:	b29b      	uxth	r3, r3
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005988:	b29b      	uxth	r3, r3
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d141      	bne.n	8005a36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059b2:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059be:	d131      	bne.n	8005a24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c0:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c6:	4a46      	ldr	r2, [pc, #280]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059d0:	4b43      	ldr	r3, [pc, #268]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059d8:	4a41      	ldr	r2, [pc, #260]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059e0:	4b40      	ldr	r3, [pc, #256]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2232      	movs	r2, #50	; 0x32
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	4a3f      	ldr	r2, [pc, #252]	; (8005ae8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	0c9b      	lsrs	r3, r3, #18
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059f6:	e002      	b.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059fe:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0a:	d102      	bne.n	8005a12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f2      	bne.n	80059f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a12:	4b33      	ldr	r3, [pc, #204]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	d158      	bne.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e057      	b.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a24:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a34:	e04d      	b.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3c:	d141      	bne.n	8005ac2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a3e:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4a:	d131      	bne.n	8005ab0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a4c:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a5c:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2232      	movs	r2, #50	; 0x32
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	0c9b      	lsrs	r3, r3, #18
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a82:	e002      	b.n	8005a8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a96:	d102      	bne.n	8005a9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f2      	bne.n	8005a84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d112      	bne.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e011      	b.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ac0:	e007      	b.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aca:	4a05      	ldr	r2, [pc, #20]	; (8005ae0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40007000 	.word	0x40007000
 8005ae4:	20000000 	.word	0x20000000
 8005ae8:	431bde83 	.word	0x431bde83

08005aec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005afa:	6093      	str	r3, [r2, #8]
}
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40007000 	.word	0x40007000

08005b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e2fe      	b.n	800611c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d075      	beq.n	8005c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2a:	4b97      	ldr	r3, [pc, #604]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b34:	4b94      	ldr	r3, [pc, #592]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b0c      	cmp	r3, #12
 8005b42:	d102      	bne.n	8005b4a <HAL_RCC_OscConfig+0x3e>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d002      	beq.n	8005b50 <HAL_RCC_OscConfig+0x44>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05b      	beq.n	8005c14 <HAL_RCC_OscConfig+0x108>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d157      	bne.n	8005c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e2d9      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_OscConfig+0x74>
 8005b72:	4b85      	ldr	r3, [pc, #532]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a84      	ldr	r2, [pc, #528]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e01d      	b.n	8005bbc <HAL_RCC_OscConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x98>
 8005b8a:	4b7f      	ldr	r3, [pc, #508]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a7e      	ldr	r2, [pc, #504]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b7c      	ldr	r3, [pc, #496]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7b      	ldr	r2, [pc, #492]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCC_OscConfig+0xb0>
 8005ba4:	4b78      	ldr	r3, [pc, #480]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a77      	ldr	r2, [pc, #476]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a74      	ldr	r2, [pc, #464]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc4:	f7fc fb7a 	bl	80022bc <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fc fb76 	bl	80022bc <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e29e      	b.n	800611c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bde:	4b6a      	ldr	r3, [pc, #424]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0xc0>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc fb66 	bl	80022bc <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fc fb62 	bl	80022bc <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e28a      	b.n	800611c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c06:	4b60      	ldr	r3, [pc, #384]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xe8>
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d075      	beq.n	8005d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b59      	ldr	r3, [pc, #356]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c2c:	4b56      	ldr	r3, [pc, #344]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCC_OscConfig+0x136>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d002      	beq.n	8005c48 <HAL_RCC_OscConfig+0x13c>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11f      	bne.n	8005c88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c48:	4b4f      	ldr	r3, [pc, #316]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_OscConfig+0x154>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e25d      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b49      	ldr	r3, [pc, #292]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	4946      	ldr	r1, [pc, #280]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c74:	4b45      	ldr	r3, [pc, #276]	; (8005d8c <HAL_RCC_OscConfig+0x280>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fc fad3 	bl	8002224 <HAL_InitTick>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d043      	beq.n	8005d0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e249      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d023      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c90:	4b3d      	ldr	r3, [pc, #244]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a3c      	ldr	r2, [pc, #240]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fc fb0e 	bl	80022bc <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca4:	f7fc fb0a 	bl	80022bc <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e232      	b.n	800611c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc2:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	061b      	lsls	r3, r3, #24
 8005cd0:	492d      	ldr	r1, [pc, #180]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	604b      	str	r3, [r1, #4]
 8005cd6:	e01a      	b.n	8005d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd8:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fc faea 	bl	80022bc <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fc fae6 	bl	80022bc <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e20e      	b.n	800611c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cfe:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1e0>
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d041      	beq.n	8005d9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01c      	beq.n	8005d5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d22:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d28:	4a17      	ldr	r2, [pc, #92]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fc fac3 	bl	80022bc <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d3a:	f7fc fabf 	bl	80022bc <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e1e7      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ef      	beq.n	8005d3a <HAL_RCC_OscConfig+0x22e>
 8005d5a:	e020      	b.n	8005d9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d62:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <HAL_RCC_OscConfig+0x27c>)
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fc faa6 	bl	80022bc <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d72:	e00d      	b.n	8005d90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d74:	f7fc faa2 	bl	80022bc <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d906      	bls.n	8005d90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e1ca      	b.n	800611c <HAL_RCC_OscConfig+0x610>
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d90:	4b8c      	ldr	r3, [pc, #560]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ea      	bne.n	8005d74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80a6 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dac:	2300      	movs	r3, #0
 8005dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005db0:	4b84      	ldr	r3, [pc, #528]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x2b4>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCC_OscConfig+0x2b6>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc6:	4b7f      	ldr	r3, [pc, #508]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	4a7e      	ldr	r2, [pc, #504]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd2:	4b7c      	ldr	r3, [pc, #496]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005dde:	2301      	movs	r3, #1
 8005de0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005de2:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <HAL_RCC_OscConfig+0x4bc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d118      	bne.n	8005e20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dee:	4b76      	ldr	r3, [pc, #472]	; (8005fc8 <HAL_RCC_OscConfig+0x4bc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a75      	ldr	r2, [pc, #468]	; (8005fc8 <HAL_RCC_OscConfig+0x4bc>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfa:	f7fc fa5f 	bl	80022bc <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e02:	f7fc fa5b 	bl	80022bc <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e183      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e14:	4b6c      	ldr	r3, [pc, #432]	; (8005fc8 <HAL_RCC_OscConfig+0x4bc>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_RCC_OscConfig+0x32e>
 8005e28:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e38:	e024      	b.n	8005e84 <HAL_RCC_OscConfig+0x378>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d110      	bne.n	8005e64 <HAL_RCC_OscConfig+0x358>
 8005e42:	4b60      	ldr	r3, [pc, #384]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e48:	4a5e      	ldr	r2, [pc, #376]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e52:	4b5c      	ldr	r3, [pc, #368]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	4a5a      	ldr	r2, [pc, #360]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e62:	e00f      	b.n	8005e84 <HAL_RCC_OscConfig+0x378>
 8005e64:	4b57      	ldr	r3, [pc, #348]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e74:	4b53      	ldr	r3, [pc, #332]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	4a52      	ldr	r2, [pc, #328]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d016      	beq.n	8005eba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fc fa16 	bl	80022bc <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e92:	e00a      	b.n	8005eaa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e94:	f7fc fa12 	bl	80022bc <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e138      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eaa:	4b46      	ldr	r3, [pc, #280]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0ed      	beq.n	8005e94 <HAL_RCC_OscConfig+0x388>
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eba:	f7fc f9ff 	bl	80022bc <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ec0:	e00a      	b.n	8005ed8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f7fc f9fb 	bl	80022bc <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e121      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1ed      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eec:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef0:	4a34      	ldr	r2, [pc, #208]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d03c      	beq.n	8005f7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f12:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1c:	f7fc f9ce 	bl	80022bc <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f24:	f7fc f9ca 	bl	80022bc <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e0f2      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f36:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ef      	beq.n	8005f24 <HAL_RCC_OscConfig+0x418>
 8005f44:	e01b      	b.n	8005f7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fc f9b1 	bl	80022bc <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5e:	f7fc f9ad 	bl	80022bc <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e0d5      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ef      	bne.n	8005f5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80c9 	beq.w	800611a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f88:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 030c 	and.w	r3, r3, #12
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	f000 8083 	beq.w	800609c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d15e      	bne.n	800605c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <HAL_RCC_OscConfig+0x4b8>)
 8005fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fc f987 	bl	80022bc <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb0:	e00c      	b.n	8005fcc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb2:	f7fc f983 	bl	80022bc <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d905      	bls.n	8005fcc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e0ab      	b.n	800611c <HAL_RCC_OscConfig+0x610>
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fcc:	4b55      	ldr	r3, [pc, #340]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ec      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd8:	4b52      	ldr	r3, [pc, #328]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	4b52      	ldr	r3, [pc, #328]	; (8006128 <HAL_RCC_OscConfig+0x61c>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6a11      	ldr	r1, [r2, #32]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	0112      	lsls	r2, r2, #4
 8005fec:	4311      	orrs	r1, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005ff2:	0212      	lsls	r2, r2, #8
 8005ff4:	4311      	orrs	r1, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ffa:	0852      	lsrs	r2, r2, #1
 8005ffc:	3a01      	subs	r2, #1
 8005ffe:	0552      	lsls	r2, r2, #21
 8006000:	4311      	orrs	r1, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006006:	0852      	lsrs	r2, r2, #1
 8006008:	3a01      	subs	r2, #1
 800600a:	0652      	lsls	r2, r2, #25
 800600c:	4311      	orrs	r1, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006012:	06d2      	lsls	r2, r2, #27
 8006014:	430a      	orrs	r2, r1
 8006016:	4943      	ldr	r1, [pc, #268]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006018:	4313      	orrs	r3, r2
 800601a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a40      	ldr	r2, [pc, #256]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006026:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006028:	4b3e      	ldr	r3, [pc, #248]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4a3d      	ldr	r2, [pc, #244]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 800602e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006032:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fc f942 	bl	80022bc <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603c:	f7fc f93e 	bl	80022bc <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e066      	b.n	800611c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800604e:	4b35      	ldr	r3, [pc, #212]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0x530>
 800605a:	e05e      	b.n	800611a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605c:	4b31      	ldr	r3, [pc, #196]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a30      	ldr	r2, [pc, #192]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fc f928 	bl	80022bc <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006070:	f7fc f924 	bl	80022bc <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e04c      	b.n	800611c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006082:	4b28      	ldr	r3, [pc, #160]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800608e:	4b25      	ldr	r3, [pc, #148]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	4924      	ldr	r1, [pc, #144]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <HAL_RCC_OscConfig+0x620>)
 8006096:	4013      	ands	r3, r2
 8006098:	60cb      	str	r3, [r1, #12]
 800609a:	e03e      	b.n	800611a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e039      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_RCC_OscConfig+0x618>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f003 0203 	and.w	r2, r3, #3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d12c      	bne.n	8006116 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	3b01      	subs	r3, #1
 80060c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d123      	bne.n	8006116 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060da:	429a      	cmp	r2, r3
 80060dc:	d11b      	bne.n	8006116 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d113      	bne.n	8006116 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	3b01      	subs	r3, #1
 80060fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d109      	bne.n	8006116 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d001      	beq.n	800611a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40021000 	.word	0x40021000
 8006128:	019f800c 	.word	0x019f800c
 800612c:	feeefffc 	.word	0xfeeefffc

08006130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e11e      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006148:	4b91      	ldr	r3, [pc, #580]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d910      	bls.n	8006178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006156:	4b8e      	ldr	r3, [pc, #568]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 020f 	bic.w	r2, r3, #15
 800615e:	498c      	ldr	r1, [pc, #560]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4313      	orrs	r3, r2
 8006164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	4b8a      	ldr	r3, [pc, #552]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e106      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d073      	beq.n	800626c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d129      	bne.n	80061e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618c:	4b81      	ldr	r3, [pc, #516]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0f4      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800619c:	f000 f99e 	bl	80064dc <RCC_GetSysClockFreqFromPLLSource>
 80061a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4a7c      	ldr	r2, [pc, #496]	; (8006398 <HAL_RCC_ClockConfig+0x268>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d93f      	bls.n	800622a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061aa:	4b7a      	ldr	r3, [pc, #488]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d033      	beq.n	800622a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d12f      	bne.n	800622a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061ca:	4b72      	ldr	r3, [pc, #456]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d2:	4a70      	ldr	r2, [pc, #448]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80061d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e024      	b.n	800622a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d107      	bne.n	80061f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061e8:	4b6a      	ldr	r3, [pc, #424]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0c6      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061f8:	4b66      	ldr	r3, [pc, #408]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0be      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006208:	f000 f8ce 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800620c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4a61      	ldr	r2, [pc, #388]	; (8006398 <HAL_RCC_ClockConfig+0x268>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d909      	bls.n	800622a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006216:	4b5f      	ldr	r3, [pc, #380]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621e:	4a5d      	ldr	r2, [pc, #372]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800622a:	4b5a      	ldr	r3, [pc, #360]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f023 0203 	bic.w	r2, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4957      	ldr	r1, [pc, #348]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800623c:	f7fc f83e 	bl	80022bc <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006242:	e00a      	b.n	800625a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006244:	f7fc f83a 	bl	80022bc <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e095      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	4b4e      	ldr	r3, [pc, #312]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 020c 	and.w	r2, r3, #12
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	429a      	cmp	r2, r3
 800626a:	d1eb      	bne.n	8006244 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d023      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006284:	4b43      	ldr	r3, [pc, #268]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a42      	ldr	r2, [pc, #264]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 800628a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800628e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800629c:	4b3d      	ldr	r3, [pc, #244]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062a4:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80062a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4936      	ldr	r1, [pc, #216]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
 80062be:	e008      	b.n	80062d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d105      	bne.n	80062d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062c6:	4b33      	ldr	r3, [pc, #204]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4a32      	ldr	r2, [pc, #200]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 80062cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062d2:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d21d      	bcs.n	800631c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e0:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f023 020f 	bic.w	r2, r3, #15
 80062e8:	4929      	ldr	r1, [pc, #164]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062f0:	f7fb ffe4 	bl	80022bc <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	e00a      	b.n	800630e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f8:	f7fb ffe0 	bl	80022bc <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	; 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e03b      	b.n	8006386 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d1ed      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4917      	ldr	r1, [pc, #92]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006336:	4313      	orrs	r3, r2
 8006338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	490f      	ldr	r1, [pc, #60]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800635a:	f000 f825 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800635e:	4602      	mov	r2, r0
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <HAL_RCC_ClockConfig+0x264>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	490c      	ldr	r1, [pc, #48]	; (800639c <HAL_RCC_ClockConfig+0x26c>)
 800636c:	5ccb      	ldrb	r3, [r1, r3]
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x270>)
 8006378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <HAL_RCC_ClockConfig+0x274>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fb ff50 	bl	8002224 <HAL_InitTick>
 8006384:	4603      	mov	r3, r0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40022000 	.word	0x40022000
 8006394:	40021000 	.word	0x40021000
 8006398:	04c4b400 	.word	0x04c4b400
 800639c:	08010534 	.word	0x08010534
 80063a0:	20000000 	.word	0x20000000
 80063a4:	20000004 	.word	0x20000004

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d102      	bne.n	80063c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063ba:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e047      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80063c0:	4b27      	ldr	r3, [pc, #156]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 030c 	and.w	r3, r3, #12
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d102      	bne.n	80063d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063cc:	4b26      	ldr	r3, [pc, #152]	; (8006468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e03e      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80063d2:	4b23      	ldr	r3, [pc, #140]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d136      	bne.n	800644c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063de:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	3301      	adds	r3, #1
 80063f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d10c      	bne.n	8006416 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063fc:	4a1a      	ldr	r2, [pc, #104]	; (8006468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	4a16      	ldr	r2, [pc, #88]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006406:	68d2      	ldr	r2, [r2, #12]
 8006408:	0a12      	lsrs	r2, r2, #8
 800640a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	617b      	str	r3, [r7, #20]
      break;
 8006414:	e00c      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	4a10      	ldr	r2, [pc, #64]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	0a12      	lsrs	r2, r2, #8
 8006424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	617b      	str	r3, [r7, #20]
      break;
 800642e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	0e5b      	lsrs	r3, r3, #25
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	3301      	adds	r3, #1
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e001      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006450:	693b      	ldr	r3, [r7, #16]
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40021000 	.word	0x40021000
 8006464:	00f42400 	.word	0x00f42400
 8006468:	007a1200 	.word	0x007a1200

0800646c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006470:	4b03      	ldr	r3, [pc, #12]	; (8006480 <HAL_RCC_GetHCLKFreq+0x14>)
 8006472:	681b      	ldr	r3, [r3, #0]
}
 8006474:	4618      	mov	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000000 	.word	0x20000000

08006484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006488:	f7ff fff0 	bl	800646c <HAL_RCC_GetHCLKFreq>
 800648c:	4602      	mov	r2, r0
 800648e:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	4904      	ldr	r1, [pc, #16]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800649a:	5ccb      	ldrb	r3, [r1, r3]
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40021000 	.word	0x40021000
 80064ac:	08010544 	.word	0x08010544

080064b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064b4:	f7ff ffda 	bl	800646c <HAL_RCC_GetHCLKFreq>
 80064b8:	4602      	mov	r2, r0
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	0adb      	lsrs	r3, r3, #11
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	4904      	ldr	r1, [pc, #16]	; (80064d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064c6:	5ccb      	ldrb	r3, [r1, r3]
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40021000 	.word	0x40021000
 80064d8:	08010544 	.word	0x08010544

080064dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064e2:	4b1e      	ldr	r3, [pc, #120]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	091b      	lsrs	r3, r3, #4
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d10c      	bne.n	800651a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006500:	4a17      	ldr	r2, [pc, #92]	; (8006560 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	4a14      	ldr	r2, [pc, #80]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800650a:	68d2      	ldr	r2, [r2, #12]
 800650c:	0a12      	lsrs	r2, r2, #8
 800650e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006512:	fb02 f303 	mul.w	r3, r2, r3
 8006516:	617b      	str	r3, [r7, #20]
    break;
 8006518:	e00c      	b.n	8006534 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800651a:	4a12      	ldr	r2, [pc, #72]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	4a0e      	ldr	r2, [pc, #56]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006524:	68d2      	ldr	r2, [r2, #12]
 8006526:	0a12      	lsrs	r2, r2, #8
 8006528:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
    break;
 8006532:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	0e5b      	lsrs	r3, r3, #25
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	3301      	adds	r3, #1
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800654e:	687b      	ldr	r3, [r7, #4]
}
 8006550:	4618      	mov	r0, r3
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40021000 	.word	0x40021000
 8006560:	007a1200 	.word	0x007a1200
 8006564:	00f42400 	.word	0x00f42400

08006568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006570:	2300      	movs	r3, #0
 8006572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006574:	2300      	movs	r3, #0
 8006576:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8098 	beq.w	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006586:	2300      	movs	r3, #0
 8006588:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800658a:	4b43      	ldr	r3, [pc, #268]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006596:	4b40      	ldr	r3, [pc, #256]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659a:	4a3f      	ldr	r2, [pc, #252]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a0:	6593      	str	r3, [r2, #88]	; 0x58
 80065a2:	4b3d      	ldr	r3, [pc, #244]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ae:	2301      	movs	r3, #1
 80065b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065b2:	4b3a      	ldr	r3, [pc, #232]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a39      	ldr	r2, [pc, #228]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065be:	f7fb fe7d 	bl	80022bc <HAL_GetTick>
 80065c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065c4:	e009      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c6:	f7fb fe79 	bl	80022bc <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d902      	bls.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	74fb      	strb	r3, [r7, #19]
        break;
 80065d8:	e005      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ef      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d159      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01e      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d019      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006608:	4b23      	ldr	r3, [pc, #140]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006614:	4b20      	ldr	r3, [pc, #128]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	4a1f      	ldr	r2, [pc, #124]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006624:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	4a1b      	ldr	r2, [pc, #108]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800662c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006634:	4a18      	ldr	r2, [pc, #96]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fb fe39 	bl	80022bc <HAL_GetTick>
 800664a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800664c:	e00b      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7fb fe35 	bl	80022bc <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	; 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d902      	bls.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	74fb      	strb	r3, [r7, #19]
            break;
 8006664:	e006      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006666:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ec      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800667c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	4903      	ldr	r1, [pc, #12]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006690:	e008      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006692:	7cfb      	ldrb	r3, [r7, #19]
 8006694:	74bb      	strb	r3, [r7, #18]
 8006696:	e005      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006698:	40021000 	.word	0x40021000
 800669c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	7cfb      	ldrb	r3, [r7, #19]
 80066a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066a4:	7c7b      	ldrb	r3, [r7, #17]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d105      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066aa:	4ba6      	ldr	r3, [pc, #664]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ae:	4aa5      	ldr	r2, [pc, #660]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066c2:	4ba0      	ldr	r3, [pc, #640]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	f023 0203 	bic.w	r2, r3, #3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	499c      	ldr	r1, [pc, #624]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066e4:	4b97      	ldr	r3, [pc, #604]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f023 020c 	bic.w	r2, r3, #12
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4994      	ldr	r1, [pc, #592]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006706:	4b8f      	ldr	r3, [pc, #572]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	498b      	ldr	r1, [pc, #556]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006728:	4b86      	ldr	r3, [pc, #536]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	4983      	ldr	r1, [pc, #524]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800674a:	4b7e      	ldr	r3, [pc, #504]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	497a      	ldr	r1, [pc, #488]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800676c:	4b75      	ldr	r3, [pc, #468]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	4972      	ldr	r1, [pc, #456]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800678e:	4b6d      	ldr	r3, [pc, #436]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	4969      	ldr	r1, [pc, #420]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067b0:	4b64      	ldr	r3, [pc, #400]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	4961      	ldr	r1, [pc, #388]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067d2:	4b5c      	ldr	r3, [pc, #368]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	4958      	ldr	r1, [pc, #352]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d015      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	4950      	ldr	r1, [pc, #320]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006812:	d105      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006814:	4b4b      	ldr	r3, [pc, #300]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4a4a      	ldr	r2, [pc, #296]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800681a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800681e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006828:	2b00      	cmp	r3, #0
 800682a:	d015      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800682c:	4b45      	ldr	r3, [pc, #276]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	4942      	ldr	r1, [pc, #264]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800684a:	d105      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800684c:	4b3d      	ldr	r3, [pc, #244]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4a3c      	ldr	r2, [pc, #240]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006856:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d015      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006864:	4b37      	ldr	r3, [pc, #220]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	4934      	ldr	r1, [pc, #208]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006882:	d105      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006884:	4b2f      	ldr	r3, [pc, #188]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4a2e      	ldr	r2, [pc, #184]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800688a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d015      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800689c:	4b29      	ldr	r3, [pc, #164]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	4926      	ldr	r1, [pc, #152]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ba:	d105      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068bc:	4b21      	ldr	r3, [pc, #132]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	4a20      	ldr	r2, [pc, #128]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d015      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068d4:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	4918      	ldr	r1, [pc, #96]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068f2:	d105      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068f4:	4b13      	ldr	r3, [pc, #76]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4a12      	ldr	r2, [pc, #72]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d015      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691a:	490a      	ldr	r1, [pc, #40]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692a:	d105      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	4a04      	ldr	r2, [pc, #16]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006936:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006938:	7cbb      	ldrb	r3, [r7, #18]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40021000 	.word	0x40021000

08006948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e09d      	b.n	8006a96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d108      	bne.n	8006974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696a:	d009      	beq.n	8006980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	61da      	str	r2, [r3, #28]
 8006972:	e005      	b.n	8006980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fb f958 	bl	8001c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069c0:	d902      	bls.n	80069c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e002      	b.n	80069ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069d6:	d007      	beq.n	80069e8 <HAL_SPI_Init+0xa0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2a:	ea42 0103 	orr.w	r1, r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	f003 0204 	and.w	r2, r3, #4
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a64:	ea42 0103 	orr.w	r1, r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b088      	sub	sp, #32
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	603b      	str	r3, [r7, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_SPI_Transmit+0x22>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e15f      	b.n	8006d80 <HAL_SPI_Transmit+0x2e2>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ac8:	f7fb fbf8 	bl	80022bc <HAL_GetTick>
 8006acc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d002      	beq.n	8006ae4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ae2:	e148      	b.n	8006d76 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_SPI_Transmit+0x52>
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006af4:	e13f      	b.n	8006d76 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2203      	movs	r2, #3
 8006afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b40:	d10f      	bne.n	8006b62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d007      	beq.n	8006b80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b88:	d94f      	bls.n	8006c2a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Transmit+0xfa>
 8006b92:	8afb      	ldrh	r3, [r7, #22]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d142      	bne.n	8006c1e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	881a      	ldrh	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bbc:	e02f      	b.n	8006c1e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d112      	bne.n	8006bf2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	881a      	ldrh	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bf0:	e015      	b.n	8006c1e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf2:	f7fb fb63 	bl	80022bc <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d803      	bhi.n	8006c0a <HAL_SPI_Transmit+0x16c>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c08:	d102      	bne.n	8006c10 <HAL_SPI_Transmit+0x172>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c1c:	e0ab      	b.n	8006d76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ca      	bne.n	8006bbe <HAL_SPI_Transmit+0x120>
 8006c28:	e080      	b.n	8006d2c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0x19a>
 8006c32:	8afb      	ldrh	r3, [r7, #22]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d174      	bne.n	8006d22 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d912      	bls.n	8006c68 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	881a      	ldrh	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b02      	subs	r3, #2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c66:	e05c      	b.n	8006d22 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	7812      	ldrb	r2, [r2, #0]
 8006c74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c8e:	e048      	b.n	8006d22 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d12b      	bne.n	8006cf6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d912      	bls.n	8006cce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	881a      	ldrh	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	1c9a      	adds	r2, r3, #2
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b02      	subs	r3, #2
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ccc:	e029      	b.n	8006d22 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cf4:	e015      	b.n	8006d22 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf6:	f7fb fae1 	bl	80022bc <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d803      	bhi.n	8006d0e <HAL_SPI_Transmit+0x270>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d0c:	d102      	bne.n	8006d14 <HAL_SPI_Transmit+0x276>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d20:	e029      	b.n	8006d76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1b1      	bne.n	8006c90 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fe0d 	bl	8007950 <SPI_EndRxTxTransaction>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e003      	b.n	8006d76 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
 8006daa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006dac:	e11a      	b.n	8006fe4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db6:	d112      	bne.n	8006dde <HAL_SPI_Receive+0x56>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10e      	bne.n	8006dde <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f90e 	bl	8006ff6 <HAL_SPI_TransmitReceive>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	e107      	b.n	8006fee <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_SPI_Receive+0x64>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e100      	b.n	8006fee <HAL_SPI_Receive+0x266>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df4:	f7fb fa62 	bl	80022bc <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_SPI_Receive+0x7e>
 8006e00:	88fb      	ldrh	r3, [r7, #6]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e0a:	e0eb      	b.n	8006fe4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e56:	d908      	bls.n	8006e6a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e66:	605a      	str	r2, [r3, #4]
 8006e68:	e007      	b.n	8006e7a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e78:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e82:	d10f      	bne.n	8006ea4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ea2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d007      	beq.n	8006ec2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eca:	d86f      	bhi.n	8006fac <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ecc:	e034      	b.n	8006f38 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d117      	bne.n	8006f0c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f103 020c 	add.w	r2, r3, #12
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f0a:	e015      	b.n	8006f38 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f0c:	f7fb f9d6 	bl	80022bc <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d803      	bhi.n	8006f24 <HAL_SPI_Receive+0x19c>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f22:	d102      	bne.n	8006f2a <HAL_SPI_Receive+0x1a2>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006f36:	e055      	b.n	8006fe4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1c4      	bne.n	8006ece <HAL_SPI_Receive+0x146>
 8006f44:	e038      	b.n	8006fb8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d115      	bne.n	8006f80 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	1c9a      	adds	r2, r3, #2
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f7e:	e015      	b.n	8006fac <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f80:	f7fb f99c 	bl	80022bc <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d803      	bhi.n	8006f98 <HAL_SPI_Receive+0x210>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f96:	d102      	bne.n	8006f9e <HAL_SPI_Receive+0x216>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006faa:	e01b      	b.n	8006fe4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1c6      	bne.n	8006f46 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fc6f 	bl	80078a0 <SPI_EndRxTransaction>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]
 8006fda:	e003      	b.n	8006fe4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b08a      	sub	sp, #40	; 0x28
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007004:	2301      	movs	r3, #1
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_SPI_TransmitReceive+0x26>
 8007018:	2302      	movs	r3, #2
 800701a:	e20a      	b.n	8007432 <HAL_SPI_TransmitReceive+0x43c>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007024:	f7fb f94a 	bl	80022bc <HAL_GetTick>
 8007028:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007030:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800703c:	887b      	ldrh	r3, [r7, #2]
 800703e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007040:	7efb      	ldrb	r3, [r7, #27]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d00e      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x6e>
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800704c:	d106      	bne.n	800705c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <HAL_SPI_TransmitReceive+0x66>
 8007056:	7efb      	ldrb	r3, [r7, #27]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d003      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007062:	e1e0      	b.n	8007426 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_SPI_TransmitReceive+0x80>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_SPI_TransmitReceive+0x80>
 8007070:	887b      	ldrh	r3, [r7, #2]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d103      	bne.n	800707e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800707c:	e1d3      	b.n	8007426 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b04      	cmp	r3, #4
 8007088:	d003      	beq.n	8007092 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2205      	movs	r2, #5
 800708e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	887a      	ldrh	r2, [r7, #2]
 80070a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	887a      	ldrh	r2, [r7, #2]
 80070aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	887a      	ldrh	r2, [r7, #2]
 80070b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	887a      	ldrh	r2, [r7, #2]
 80070be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070d4:	d802      	bhi.n	80070dc <HAL_SPI_TransmitReceive+0xe6>
 80070d6:	8a3b      	ldrh	r3, [r7, #16]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d908      	bls.n	80070ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ea:	605a      	str	r2, [r3, #4]
 80070ec:	e007      	b.n	80070fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	d007      	beq.n	800711c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800711a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007124:	f240 8081 	bls.w	800722a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <HAL_SPI_TransmitReceive+0x140>
 8007130:	8a7b      	ldrh	r3, [r7, #18]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d16d      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800715a:	e05a      	b.n	8007212 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d11b      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x1ac>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d016      	beq.n	80071a2 <HAL_SPI_TransmitReceive+0x1ac>
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	2b01      	cmp	r3, #1
 8007178:	d113      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	881a      	ldrh	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	1c9a      	adds	r2, r3, #2
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d11c      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x1f4>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d016      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	b292      	uxth	r2, r2
 80071c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	1c9a      	adds	r2, r3, #2
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071e6:	2301      	movs	r3, #1
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071ea:	f7fb f867 	bl	80022bc <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d80b      	bhi.n	8007212 <HAL_SPI_TransmitReceive+0x21c>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007200:	d007      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007210:	e109      	b.n	8007426 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d19f      	bne.n	800715c <HAL_SPI_TransmitReceive+0x166>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d199      	bne.n	800715c <HAL_SPI_TransmitReceive+0x166>
 8007228:	e0e3      	b.n	80073f2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_SPI_TransmitReceive+0x244>
 8007232:	8a7b      	ldrh	r3, [r7, #18]
 8007234:	2b01      	cmp	r3, #1
 8007236:	f040 80cf 	bne.w	80073d8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d912      	bls.n	800726a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	1c9a      	adds	r2, r3, #2
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b02      	subs	r3, #2
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007268:	e0b6      	b.n	80073d8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007290:	e0a2      	b.n	80073d8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b02      	cmp	r3, #2
 800729e:	d134      	bne.n	800730a <HAL_SPI_TransmitReceive+0x314>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d02f      	beq.n	800730a <HAL_SPI_TransmitReceive+0x314>
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d12c      	bne.n	800730a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d912      	bls.n	80072e0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	881a      	ldrh	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b02      	subs	r3, #2
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072de:	e012      	b.n	8007306 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d148      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x3b4>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d042      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d923      	bls.n	8007378 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	b292      	uxth	r2, r2
 800733c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	1c9a      	adds	r2, r3, #2
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b02      	subs	r3, #2
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b01      	cmp	r3, #1
 8007364:	d81f      	bhi.n	80073a6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	e016      	b.n	80073a6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f103 020c 	add.w	r2, r3, #12
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a6:	2301      	movs	r3, #1
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073aa:	f7fa ff87 	bl	80022bc <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d803      	bhi.n	80073c2 <HAL_SPI_TransmitReceive+0x3cc>
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c0:	d102      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x3d2>
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d107      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80073d6:	e026      	b.n	8007426 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f47f af57 	bne.w	8007292 <HAL_SPI_TransmitReceive+0x29c>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f47f af50 	bne.w	8007292 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 faaa 	bl	8007950 <SPI_EndRxTxTransaction>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741c:	e003      	b.n	8007426 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800742e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007432:	4618      	mov	r0, r3
 8007434:	3728      	adds	r7, #40	; 0x28
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10e      	bne.n	800747c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
    return;
 800747a:	e0ce      	b.n	800761a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <HAL_SPI_IRQHandler+0x5e>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
    return;
 8007498:	e0bf      	b.n	800761a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10a      	bne.n	80074ba <HAL_SPI_IRQHandler+0x7e>
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 80b0 	beq.w	800761a <HAL_SPI_IRQHandler+0x1de>
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80aa 	beq.w	800761a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d023      	beq.n	8007518 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d011      	beq.n	8007500 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e0:	f043 0204 	orr.w	r2, r3, #4
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	e00b      	b.n	8007518 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007500:	2300      	movs	r3, #0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	693b      	ldr	r3, [r7, #16]
        return;
 8007516:	e080      	b.n	800761a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d014      	beq.n	800754c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007526:	f043 0201 	orr.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00c      	beq.n	8007570 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	f043 0208 	orr.w	r2, r3, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007574:	2b00      	cmp	r3, #0
 8007576:	d04f      	beq.n	8007618 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007586:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <HAL_SPI_IRQHandler+0x168>
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d034      	beq.n	800760e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0203 	bic.w	r2, r2, #3
 80075b2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d011      	beq.n	80075e0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c0:	4a17      	ldr	r2, [pc, #92]	; (8007620 <HAL_SPI_IRQHandler+0x1e4>)
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fb f8b6 	bl	800273a <HAL_DMA_Abort_IT>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d016      	beq.n	8007616 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ec:	4a0c      	ldr	r2, [pc, #48]	; (8007620 <HAL_SPI_IRQHandler+0x1e4>)
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fb f8a0 	bl	800273a <HAL_DMA_Abort_IT>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007604:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800760c:	e003      	b.n	8007616 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f808 	bl	8007624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007614:	e000      	b.n	8007618 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007616:	bf00      	nop
    return;
 8007618:	bf00      	nop
  }
}
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08007639 	.word	0x08007639

08007624 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff ffe5 	bl	8007624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007674:	f7fa fe22 	bl	80022bc <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4413      	add	r3, r2
 8007682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007684:	f7fa fe1a 	bl	80022bc <HAL_GetTick>
 8007688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800768a:	4b39      	ldr	r3, [pc, #228]	; (8007770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	015b      	lsls	r3, r3, #5
 8007690:	0d1b      	lsrs	r3, r3, #20
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800769a:	e054      	b.n	8007746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a2:	d050      	beq.n	8007746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076a4:	f7fa fe0a 	bl	80022bc <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d902      	bls.n	80076ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d13d      	bne.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d2:	d111      	bne.n	80076f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076dc:	d004      	beq.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e6:	d107      	bne.n	80076f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007700:	d10f      	bne.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e017      	b.n	8007766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	3b01      	subs	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4013      	ands	r3, r2
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	429a      	cmp	r2, r3
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	429a      	cmp	r2, r3
 8007762:	d19b      	bne.n	800769c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000000 	.word	0x20000000

08007774 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007786:	f7fa fd99 	bl	80022bc <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	4413      	add	r3, r2
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007796:	f7fa fd91 	bl	80022bc <HAL_GetTick>
 800779a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	330c      	adds	r3, #12
 80077a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077a4:	4b3d      	ldr	r3, [pc, #244]	; (800789c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	00da      	lsls	r2, r3, #3
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	0d1b      	lsrs	r3, r3, #20
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077bc:	e060      	b.n	8007880 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077c4:	d107      	bne.n	80077d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077dc:	d050      	beq.n	8007880 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077de:	f7fa fd6d 	bl	80022bc <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d902      	bls.n	80077f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d13d      	bne.n	8007870 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007802:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780c:	d111      	bne.n	8007832 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007816:	d004      	beq.n	8007822 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007820:	d107      	bne.n	8007832 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007830:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783a:	d10f      	bne.n	800785c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800785a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e010      	b.n	8007892 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	3b01      	subs	r3, #1
 800787e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4013      	ands	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d196      	bne.n	80077be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3728      	adds	r7, #40	; 0x28
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000000 	.word	0x20000000

080078a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b4:	d111      	bne.n	80078da <SPI_EndRxTransaction+0x3a>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	d004      	beq.n	80078ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d107      	bne.n	80078da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	2180      	movs	r1, #128	; 0x80
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff febd 	bl	8007664 <SPI_WaitFlagStateUntilTimeout>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d007      	beq.n	8007900 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e023      	b.n	8007948 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007908:	d11d      	bne.n	8007946 <SPI_EndRxTransaction+0xa6>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007912:	d004      	beq.n	800791e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800791c:	d113      	bne.n	8007946 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff ff22 	bl	8007774 <SPI_WaitFifoStateUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d007      	beq.n	8007946 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793a:	f043 0220 	orr.w	r2, r3, #32
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e000      	b.n	8007948 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff ff03 	bl	8007774 <SPI_WaitFifoStateUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007978:	f043 0220 	orr.w	r2, r3, #32
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e027      	b.n	80079d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	2180      	movs	r1, #128	; 0x80
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f7ff fe68 	bl	8007664 <SPI_WaitFlagStateUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e014      	b.n	80079d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fedc 	bl	8007774 <SPI_WaitFifoStateUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c6:	f043 0220 	orr.w	r2, r3, #32
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e000      	b.n	80079d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e042      	b.n	8007a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fa fb6d 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2224      	movs	r2, #36	; 0x24
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fe38 	bl	800869c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb69 	bl	8008104 <UART_SetConfig>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e01b      	b.n	8007a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 feb7 	bl	80087e0 <UART_CheckIdleState>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b0ba      	sub	sp, #232	; 0xe8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007aa6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007aaa:	4013      	ands	r3, r2
 8007aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11b      	bne.n	8007af0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d009      	beq.n	8007af0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 82e3 	beq.w	80080ac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
      }
      return;
 8007aee:	e2dd      	b.n	80080ac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8123 	beq.w	8007d40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007afa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007afe:	4b8d      	ldr	r3, [pc, #564]	; (8007d34 <HAL_UART_IRQHandler+0x2b8>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b0a:	4b8b      	ldr	r3, [pc, #556]	; (8007d38 <HAL_UART_IRQHandler+0x2bc>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8116 	beq.w	8007d40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d011      	beq.n	8007b44 <HAL_UART_IRQHandler+0xc8>
 8007b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00b      	beq.n	8007b44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2201      	movs	r2, #1
 8007b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3a:	f043 0201 	orr.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d011      	beq.n	8007b74 <HAL_UART_IRQHandler+0xf8>
 8007b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2202      	movs	r2, #2
 8007b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6a:	f043 0204 	orr.w	r2, r3, #4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d011      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x128>
 8007b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2204      	movs	r2, #4
 8007b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9a:	f043 0202 	orr.w	r2, r3, #2
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d017      	beq.n	8007be0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bc0:	4b5c      	ldr	r3, [pc, #368]	; (8007d34 <HAL_UART_IRQHandler+0x2b8>)
 8007bc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2208      	movs	r2, #8
 8007bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	f043 0208 	orr.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d012      	beq.n	8007c12 <HAL_UART_IRQHandler+0x196>
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00c      	beq.n	8007c12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f043 0220 	orr.w	r2, r3, #32
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8249 	beq.w	80080b0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d013      	beq.n	8007c52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d105      	bne.n	8007c42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d005      	beq.n	8007c76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d054      	beq.n	8007d20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fec9 	bl	8008a0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d146      	bne.n	8007d18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1d9      	bne.n	8007c8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d017      	beq.n	8007d10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce6:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <HAL_UART_IRQHandler+0x2c0>)
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fa fd22 	bl	800273a <HAL_DMA_Abort_IT>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d019      	beq.n	8007d30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0e:	e00f      	b.n	8007d30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f9e1 	bl	80080d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d16:	e00b      	b.n	8007d30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9dd 	bl	80080d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	e007      	b.n	8007d30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9d9 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007d2e:	e1bf      	b.n	80080b0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d30:	bf00      	nop
    return;
 8007d32:	e1bd      	b.n	80080b0 <HAL_UART_IRQHandler+0x634>
 8007d34:	10000001 	.word	0x10000001
 8007d38:	04000120 	.word	0x04000120
 8007d3c:	08008adb 	.word	0x08008adb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	f040 8153 	bne.w	8007ff0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 814c 	beq.w	8007ff0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 8145 	beq.w	8007ff0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2210      	movs	r2, #16
 8007d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	f040 80bb 	bne.w	8007ef4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 818f 	beq.w	80080b4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da0:	429a      	cmp	r2, r3
 8007da2:	f080 8187 	bcs.w	80080b4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 8087 	bne.w	8007ed2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007df2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1da      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e1      	bne.n	8007e0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e3      	bne.n	8007e4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea0:	f023 0310 	bic.w	r3, r3, #16
 8007ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e4      	bne.n	8007e90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fa fbdb 	bl	8002688 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f8fd 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ef2:	e0df      	b.n	80080b4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80d1 	beq.w	80080b8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80cc 	beq.w	80080b8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f42:	647b      	str	r3, [r7, #68]	; 0x44
 8007f44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e4      	bne.n	8007f20 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	623b      	str	r3, [r7, #32]
   return(result);
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e1      	bne.n	8007f56 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0310 	bic.w	r3, r3, #16
 8007fba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	69b9      	ldr	r1, [r7, #24]
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e4      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f87f 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fee:	e063      	b.n	80080b8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00e      	beq.n	800801a <HAL_UART_IRQHandler+0x59e>
 8007ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d008      	beq.n	800801a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fda2 	bl	8008b5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008018:	e051      	b.n	80080be <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b00      	cmp	r3, #0
 8008024:	d014      	beq.n	8008050 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008042:	2b00      	cmp	r3, #0
 8008044:	d03a      	beq.n	80080bc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
    }
    return;
 800804e:	e035      	b.n	80080bc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d009      	beq.n	8008070 <HAL_UART_IRQHandler+0x5f4>
 800805c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fd4c 	bl	8008b06 <UART_EndTransmit_IT>
    return;
 800806e:	e026      	b.n	80080be <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <HAL_UART_IRQHandler+0x614>
 800807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fd7b 	bl	8008b84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800808e:	e016      	b.n	80080be <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d010      	beq.n	80080be <HAL_UART_IRQHandler+0x642>
 800809c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	da0c      	bge.n	80080be <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fd63 	bl	8008b70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080aa:	e008      	b.n	80080be <HAL_UART_IRQHandler+0x642>
      return;
 80080ac:	bf00      	nop
 80080ae:	e006      	b.n	80080be <HAL_UART_IRQHandler+0x642>
    return;
 80080b0:	bf00      	nop
 80080b2:	e004      	b.n	80080be <HAL_UART_IRQHandler+0x642>
      return;
 80080b4:	bf00      	nop
 80080b6:	e002      	b.n	80080be <HAL_UART_IRQHandler+0x642>
      return;
 80080b8:	bf00      	nop
 80080ba:	e000      	b.n	80080be <HAL_UART_IRQHandler+0x642>
    return;
 80080bc:	bf00      	nop
  }
}
 80080be:	37e8      	adds	r7, #232	; 0xe8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008108:	b08c      	sub	sp, #48	; 0x30
 800810a:	af00      	add	r7, sp, #0
 800810c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	431a      	orrs	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	431a      	orrs	r2, r3
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4313      	orrs	r3, r2
 800812a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4bab      	ldr	r3, [pc, #684]	; (80083e0 <UART_SetConfig+0x2dc>)
 8008134:	4013      	ands	r3, r2
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800813c:	430b      	orrs	r3, r1
 800813e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4aa0      	ldr	r2, [pc, #640]	; (80083e4 <UART_SetConfig+0x2e0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d004      	beq.n	8008170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800816c:	4313      	orrs	r3, r2
 800816e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800817a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008184:	430b      	orrs	r3, r1
 8008186:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	f023 010f 	bic.w	r1, r3, #15
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a91      	ldr	r2, [pc, #580]	; (80083e8 <UART_SetConfig+0x2e4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d125      	bne.n	80081f4 <UART_SetConfig+0xf0>
 80081a8:	4b90      	ldr	r3, [pc, #576]	; (80083ec <UART_SetConfig+0x2e8>)
 80081aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d81a      	bhi.n	80081ec <UART_SetConfig+0xe8>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <UART_SetConfig+0xb8>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081dd 	.word	0x080081dd
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	2301      	movs	r3, #1
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d2:	e0d6      	b.n	8008382 <UART_SetConfig+0x27e>
 80081d4:	2302      	movs	r3, #2
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081da:	e0d2      	b.n	8008382 <UART_SetConfig+0x27e>
 80081dc:	2304      	movs	r3, #4
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e2:	e0ce      	b.n	8008382 <UART_SetConfig+0x27e>
 80081e4:	2308      	movs	r3, #8
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ea:	e0ca      	b.n	8008382 <UART_SetConfig+0x27e>
 80081ec:	2310      	movs	r3, #16
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f2:	e0c6      	b.n	8008382 <UART_SetConfig+0x27e>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a7d      	ldr	r2, [pc, #500]	; (80083f0 <UART_SetConfig+0x2ec>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d138      	bne.n	8008270 <UART_SetConfig+0x16c>
 80081fe:	4b7b      	ldr	r3, [pc, #492]	; (80083ec <UART_SetConfig+0x2e8>)
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008204:	f003 030c 	and.w	r3, r3, #12
 8008208:	2b0c      	cmp	r3, #12
 800820a:	d82d      	bhi.n	8008268 <UART_SetConfig+0x164>
 800820c:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <UART_SetConfig+0x110>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008249 	.word	0x08008249
 8008218:	08008269 	.word	0x08008269
 800821c:	08008269 	.word	0x08008269
 8008220:	08008269 	.word	0x08008269
 8008224:	08008259 	.word	0x08008259
 8008228:	08008269 	.word	0x08008269
 800822c:	08008269 	.word	0x08008269
 8008230:	08008269 	.word	0x08008269
 8008234:	08008251 	.word	0x08008251
 8008238:	08008269 	.word	0x08008269
 800823c:	08008269 	.word	0x08008269
 8008240:	08008269 	.word	0x08008269
 8008244:	08008261 	.word	0x08008261
 8008248:	2300      	movs	r3, #0
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e098      	b.n	8008382 <UART_SetConfig+0x27e>
 8008250:	2302      	movs	r3, #2
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e094      	b.n	8008382 <UART_SetConfig+0x27e>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	e090      	b.n	8008382 <UART_SetConfig+0x27e>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008266:	e08c      	b.n	8008382 <UART_SetConfig+0x27e>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826e:	e088      	b.n	8008382 <UART_SetConfig+0x27e>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a5f      	ldr	r2, [pc, #380]	; (80083f4 <UART_SetConfig+0x2f0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d125      	bne.n	80082c6 <UART_SetConfig+0x1c2>
 800827a:	4b5c      	ldr	r3, [pc, #368]	; (80083ec <UART_SetConfig+0x2e8>)
 800827c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008280:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008284:	2b30      	cmp	r3, #48	; 0x30
 8008286:	d016      	beq.n	80082b6 <UART_SetConfig+0x1b2>
 8008288:	2b30      	cmp	r3, #48	; 0x30
 800828a:	d818      	bhi.n	80082be <UART_SetConfig+0x1ba>
 800828c:	2b20      	cmp	r3, #32
 800828e:	d00a      	beq.n	80082a6 <UART_SetConfig+0x1a2>
 8008290:	2b20      	cmp	r3, #32
 8008292:	d814      	bhi.n	80082be <UART_SetConfig+0x1ba>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <UART_SetConfig+0x19a>
 8008298:	2b10      	cmp	r3, #16
 800829a:	d008      	beq.n	80082ae <UART_SetConfig+0x1aa>
 800829c:	e00f      	b.n	80082be <UART_SetConfig+0x1ba>
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a4:	e06d      	b.n	8008382 <UART_SetConfig+0x27e>
 80082a6:	2302      	movs	r3, #2
 80082a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ac:	e069      	b.n	8008382 <UART_SetConfig+0x27e>
 80082ae:	2304      	movs	r3, #4
 80082b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b4:	e065      	b.n	8008382 <UART_SetConfig+0x27e>
 80082b6:	2308      	movs	r3, #8
 80082b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082bc:	e061      	b.n	8008382 <UART_SetConfig+0x27e>
 80082be:	2310      	movs	r3, #16
 80082c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c4:	e05d      	b.n	8008382 <UART_SetConfig+0x27e>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a4b      	ldr	r2, [pc, #300]	; (80083f8 <UART_SetConfig+0x2f4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d125      	bne.n	800831c <UART_SetConfig+0x218>
 80082d0:	4b46      	ldr	r3, [pc, #280]	; (80083ec <UART_SetConfig+0x2e8>)
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082da:	2bc0      	cmp	r3, #192	; 0xc0
 80082dc:	d016      	beq.n	800830c <UART_SetConfig+0x208>
 80082de:	2bc0      	cmp	r3, #192	; 0xc0
 80082e0:	d818      	bhi.n	8008314 <UART_SetConfig+0x210>
 80082e2:	2b80      	cmp	r3, #128	; 0x80
 80082e4:	d00a      	beq.n	80082fc <UART_SetConfig+0x1f8>
 80082e6:	2b80      	cmp	r3, #128	; 0x80
 80082e8:	d814      	bhi.n	8008314 <UART_SetConfig+0x210>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <UART_SetConfig+0x1f0>
 80082ee:	2b40      	cmp	r3, #64	; 0x40
 80082f0:	d008      	beq.n	8008304 <UART_SetConfig+0x200>
 80082f2:	e00f      	b.n	8008314 <UART_SetConfig+0x210>
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e042      	b.n	8008382 <UART_SetConfig+0x27e>
 80082fc:	2302      	movs	r3, #2
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e03e      	b.n	8008382 <UART_SetConfig+0x27e>
 8008304:	2304      	movs	r3, #4
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830a:	e03a      	b.n	8008382 <UART_SetConfig+0x27e>
 800830c:	2308      	movs	r3, #8
 800830e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008312:	e036      	b.n	8008382 <UART_SetConfig+0x27e>
 8008314:	2310      	movs	r3, #16
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831a:	e032      	b.n	8008382 <UART_SetConfig+0x27e>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a30      	ldr	r2, [pc, #192]	; (80083e4 <UART_SetConfig+0x2e0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d12a      	bne.n	800837c <UART_SetConfig+0x278>
 8008326:	4b31      	ldr	r3, [pc, #196]	; (80083ec <UART_SetConfig+0x2e8>)
 8008328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008334:	d01a      	beq.n	800836c <UART_SetConfig+0x268>
 8008336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800833a:	d81b      	bhi.n	8008374 <UART_SetConfig+0x270>
 800833c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008340:	d00c      	beq.n	800835c <UART_SetConfig+0x258>
 8008342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008346:	d815      	bhi.n	8008374 <UART_SetConfig+0x270>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <UART_SetConfig+0x250>
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008350:	d008      	beq.n	8008364 <UART_SetConfig+0x260>
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0x270>
 8008354:	2300      	movs	r3, #0
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835a:	e012      	b.n	8008382 <UART_SetConfig+0x27e>
 800835c:	2302      	movs	r3, #2
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008362:	e00e      	b.n	8008382 <UART_SetConfig+0x27e>
 8008364:	2304      	movs	r3, #4
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836a:	e00a      	b.n	8008382 <UART_SetConfig+0x27e>
 800836c:	2308      	movs	r3, #8
 800836e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008372:	e006      	b.n	8008382 <UART_SetConfig+0x27e>
 8008374:	2310      	movs	r3, #16
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837a:	e002      	b.n	8008382 <UART_SetConfig+0x27e>
 800837c:	2310      	movs	r3, #16
 800837e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a17      	ldr	r2, [pc, #92]	; (80083e4 <UART_SetConfig+0x2e0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	f040 80a8 	bne.w	80084de <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800838e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008392:	2b08      	cmp	r3, #8
 8008394:	d834      	bhi.n	8008400 <UART_SetConfig+0x2fc>
 8008396:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0x298>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080083c1 	.word	0x080083c1
 80083a0:	08008401 	.word	0x08008401
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	08008401 	.word	0x08008401
 80083ac:	080083cf 	.word	0x080083cf
 80083b0:	08008401 	.word	0x08008401
 80083b4:	08008401 	.word	0x08008401
 80083b8:	08008401 	.word	0x08008401
 80083bc:	080083d7 	.word	0x080083d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c0:	f7fe f860 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 80083c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c6:	e021      	b.n	800840c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c8:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <UART_SetConfig+0x2f8>)
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083cc:	e01e      	b.n	800840c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ce:	f7fd ffeb 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80083d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d4:	e01a      	b.n	800840c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083dc:	e016      	b.n	800840c <UART_SetConfig+0x308>
 80083de:	bf00      	nop
 80083e0:	cfff69f3 	.word	0xcfff69f3
 80083e4:	40008000 	.word	0x40008000
 80083e8:	40013800 	.word	0x40013800
 80083ec:	40021000 	.word	0x40021000
 80083f0:	40004400 	.word	0x40004400
 80083f4:	40004800 	.word	0x40004800
 80083f8:	40004c00 	.word	0x40004c00
 80083fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800840a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 812a 	beq.w	8008668 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	4a9e      	ldr	r2, [pc, #632]	; (8008694 <UART_SetConfig+0x590>)
 800841a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800841e:	461a      	mov	r2, r3
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	fbb3 f3f2 	udiv	r3, r3, r2
 8008426:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	4413      	add	r3, r2
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	429a      	cmp	r2, r3
 8008436:	d305      	bcc.n	8008444 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	429a      	cmp	r2, r3
 8008442:	d903      	bls.n	800844c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800844a:	e10d      	b.n	8008668 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	2200      	movs	r2, #0
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	60fa      	str	r2, [r7, #12]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	4a8e      	ldr	r2, [pc, #568]	; (8008694 <UART_SetConfig+0x590>)
 800845a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800845e:	b29b      	uxth	r3, r3
 8008460:	2200      	movs	r2, #0
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800846e:	f7f8 fbc3 	bl	8000bf8 <__aeabi_uldivmod>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	f04f 0200 	mov.w	r2, #0
 800847e:	f04f 0300 	mov.w	r3, #0
 8008482:	020b      	lsls	r3, r1, #8
 8008484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008488:	0202      	lsls	r2, r0, #8
 800848a:	6979      	ldr	r1, [r7, #20]
 800848c:	6849      	ldr	r1, [r1, #4]
 800848e:	0849      	lsrs	r1, r1, #1
 8008490:	2000      	movs	r0, #0
 8008492:	460c      	mov	r4, r1
 8008494:	4605      	mov	r5, r0
 8008496:	eb12 0804 	adds.w	r8, r2, r4
 800849a:	eb43 0905 	adc.w	r9, r3, r5
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	469a      	mov	sl, r3
 80084a6:	4693      	mov	fp, r2
 80084a8:	4652      	mov	r2, sl
 80084aa:	465b      	mov	r3, fp
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f8 fba2 	bl	8000bf8 <__aeabi_uldivmod>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4613      	mov	r3, r2
 80084ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084c2:	d308      	bcc.n	80084d6 <UART_SetConfig+0x3d2>
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ca:	d204      	bcs.n	80084d6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	60da      	str	r2, [r3, #12]
 80084d4:	e0c8      	b.n	8008668 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084dc:	e0c4      	b.n	8008668 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e6:	d167      	bne.n	80085b8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80084e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d828      	bhi.n	8008542 <UART_SetConfig+0x43e>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <UART_SetConfig+0x3f4>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008525 	.word	0x08008525
 8008500:	0800852d 	.word	0x0800852d
 8008504:	08008543 	.word	0x08008543
 8008508:	08008533 	.word	0x08008533
 800850c:	08008543 	.word	0x08008543
 8008510:	08008543 	.word	0x08008543
 8008514:	08008543 	.word	0x08008543
 8008518:	0800853b 	.word	0x0800853b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800851c:	f7fd ffb2 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 8008520:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008522:	e014      	b.n	800854e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008524:	f7fd ffc4 	bl	80064b0 <HAL_RCC_GetPCLK2Freq>
 8008528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800852a:	e010      	b.n	800854e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800852c:	4b5a      	ldr	r3, [pc, #360]	; (8008698 <UART_SetConfig+0x594>)
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008530:	e00d      	b.n	800854e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008532:	f7fd ff39 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008538:	e009      	b.n	800854e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800853a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008540:	e005      	b.n	800854e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800854c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 8089 	beq.w	8008668 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	4a4e      	ldr	r2, [pc, #312]	; (8008694 <UART_SetConfig+0x590>)
 800855c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008560:	461a      	mov	r2, r3
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	fbb3 f3f2 	udiv	r3, r3, r2
 8008568:	005a      	lsls	r2, r3, #1
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	085b      	lsrs	r3, r3, #1
 8008570:	441a      	add	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	fbb2 f3f3 	udiv	r3, r2, r3
 800857a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	2b0f      	cmp	r3, #15
 8008580:	d916      	bls.n	80085b0 <UART_SetConfig+0x4ac>
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008588:	d212      	bcs.n	80085b0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f023 030f 	bic.w	r3, r3, #15
 8008592:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	085b      	lsrs	r3, r3, #1
 8008598:	b29b      	uxth	r3, r3
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	b29a      	uxth	r2, r3
 80085a0:	8bfb      	ldrh	r3, [r7, #30]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	8bfa      	ldrh	r2, [r7, #30]
 80085ac:	60da      	str	r2, [r3, #12]
 80085ae:	e05b      	b.n	8008668 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085b6:	e057      	b.n	8008668 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d828      	bhi.n	8008612 <UART_SetConfig+0x50e>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <UART_SetConfig+0x4c4>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	080085f5 	.word	0x080085f5
 80085d0:	080085fd 	.word	0x080085fd
 80085d4:	08008613 	.word	0x08008613
 80085d8:	08008603 	.word	0x08008603
 80085dc:	08008613 	.word	0x08008613
 80085e0:	08008613 	.word	0x08008613
 80085e4:	08008613 	.word	0x08008613
 80085e8:	0800860b 	.word	0x0800860b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ec:	f7fd ff4a 	bl	8006484 <HAL_RCC_GetPCLK1Freq>
 80085f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085f2:	e014      	b.n	800861e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085f4:	f7fd ff5c 	bl	80064b0 <HAL_RCC_GetPCLK2Freq>
 80085f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085fa:	e010      	b.n	800861e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085fc:	4b26      	ldr	r3, [pc, #152]	; (8008698 <UART_SetConfig+0x594>)
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008600:	e00d      	b.n	800861e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008602:	f7fd fed1 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8008606:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008608:	e009      	b.n	800861e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800860a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008610:	e005      	b.n	800861e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800861c:	bf00      	nop
    }

    if (pclk != 0U)
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d021      	beq.n	8008668 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <UART_SetConfig+0x590>)
 800862a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862e:	461a      	mov	r2, r3
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	fbb3 f2f2 	udiv	r2, r3, r2
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	441a      	add	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	fbb2 f3f3 	udiv	r3, r2, r3
 8008646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	2b0f      	cmp	r3, #15
 800864c:	d909      	bls.n	8008662 <UART_SetConfig+0x55e>
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008654:	d205      	bcs.n	8008662 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	b29a      	uxth	r2, r3
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60da      	str	r2, [r3, #12]
 8008660:	e002      	b.n	8008668 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2201      	movs	r2, #1
 800866c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2201      	movs	r2, #1
 8008674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2200      	movs	r2, #0
 800867c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2200      	movs	r2, #0
 8008682:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008684:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008688:	4618      	mov	r0, r3
 800868a:	3730      	adds	r7, #48	; 0x30
 800868c:	46bd      	mov	sp, r7
 800868e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008692:	bf00      	nop
 8008694:	0801054c 	.word	0x0801054c
 8008698:	00f42400 	.word	0x00f42400

0800869c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01a      	beq.n	80087b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800879a:	d10a      	bne.n	80087b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	605a      	str	r2, [r3, #4]
  }
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b098      	sub	sp, #96	; 0x60
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f0:	f7f9 fd64 	bl	80022bc <HAL_GetTick>
 80087f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b08      	cmp	r3, #8
 8008802:	d12f      	bne.n	8008864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800880c:	2200      	movs	r2, #0
 800880e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f88e 	bl	8008934 <UART_WaitOnFlagUntilTimeout>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d022      	beq.n	8008864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008832:	653b      	str	r3, [r7, #80]	; 0x50
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800883c:	647b      	str	r3, [r7, #68]	; 0x44
 800883e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e6      	bne.n	800881e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e063      	b.n	800892c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b04      	cmp	r3, #4
 8008870:	d149      	bne.n	8008906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800887a:	2200      	movs	r2, #0
 800887c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f857 	bl	8008934 <UART_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d03c      	beq.n	8008906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	623b      	str	r3, [r7, #32]
   return(result);
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088aa:	633b      	str	r3, [r7, #48]	; 0x30
 80088ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f023 0301 	bic.w	r3, r3, #1
 80088d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088de:	61fa      	str	r2, [r7, #28]
 80088e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	69b9      	ldr	r1, [r7, #24]
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	617b      	str	r3, [r7, #20]
   return(result);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e5      	bne.n	80088be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e012      	b.n	800892c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3758      	adds	r7, #88	; 0x58
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	4613      	mov	r3, r2
 8008942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008944:	e04f      	b.n	80089e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800894c:	d04b      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800894e:	f7f9 fcb5 	bl	80022bc <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	429a      	cmp	r2, r3
 800895c:	d302      	bcc.n	8008964 <UART_WaitOnFlagUntilTimeout+0x30>
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e04e      	b.n	8008a06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d037      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b80      	cmp	r3, #128	; 0x80
 800897a:	d034      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d031      	beq.n	80089e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b08      	cmp	r3, #8
 800898e:	d110      	bne.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2208      	movs	r2, #8
 8008996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f838 	bl	8008a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2208      	movs	r2, #8
 80089a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e029      	b.n	8008a06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c0:	d111      	bne.n	80089e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f81e 	bl	8008a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e00f      	b.n	8008a06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4013      	ands	r3, r2
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	bf0c      	ite	eq
 80089f6:	2301      	moveq	r3, #1
 80089f8:	2300      	movne	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	461a      	mov	r2, r3
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d0a0      	beq.n	8008946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b095      	sub	sp, #84	; 0x54
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1e:	e853 3f00 	ldrex	r3, [r3]
 8008a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a34:	643b      	str	r3, [r7, #64]	; 0x40
 8008a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e6      	bne.n	8008a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a5e:	f023 0301 	bic.w	r3, r3, #1
 8008a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e3      	bne.n	8008a48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d118      	bne.n	8008aba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f023 0310 	bic.w	r3, r3, #16
 8008a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa6:	61bb      	str	r3, [r7, #24]
 8008aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6979      	ldr	r1, [r7, #20]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008ace:	bf00      	nop
 8008ad0:	3754      	adds	r7, #84	; 0x54
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff faed 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b088      	sub	sp, #32
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff fab8 	bl	80080c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b54:	bf00      	nop
 8008b56:	3720      	adds	r7, #32
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_UARTEx_DisableFifoMode+0x16>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e027      	b.n	8008bfe <HAL_UARTEx_DisableFifoMode+0x66>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2224      	movs	r2, #36	; 0x24
 8008bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0201 	bic.w	r2, r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e02d      	b.n	8008c7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2224      	movs	r2, #36	; 0x24
 8008c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 0201 	bic.w	r2, r2, #1
 8008c48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f850 	bl	8008d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d101      	bne.n	8008c9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e02d      	b.n	8008cfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2224      	movs	r2, #36	; 0x24
 8008caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0201 	bic.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f812 	bl	8008d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d108      	bne.n	8008d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d24:	e031      	b.n	8008d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d26:	2308      	movs	r3, #8
 8008d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	0e5b      	lsrs	r3, r3, #25
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	0f5b      	lsrs	r3, r3, #29
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	7b3a      	ldrb	r2, [r7, #12]
 8008d52:	4911      	ldr	r1, [pc, #68]	; (8008d98 <UARTEx_SetNbDataToProcess+0x94>)
 8008d54:	5c8a      	ldrb	r2, [r1, r2]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d5a:	7b3a      	ldrb	r2, [r7, #12]
 8008d5c:	490f      	ldr	r1, [pc, #60]	; (8008d9c <UARTEx_SetNbDataToProcess+0x98>)
 8008d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	7b7a      	ldrb	r2, [r7, #13]
 8008d70:	4909      	ldr	r1, [pc, #36]	; (8008d98 <UARTEx_SetNbDataToProcess+0x94>)
 8008d72:	5c8a      	ldrb	r2, [r1, r2]
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d78:	7b7a      	ldrb	r2, [r7, #13]
 8008d7a:	4908      	ldr	r1, [pc, #32]	; (8008d9c <UARTEx_SetNbDataToProcess+0x98>)
 8008d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	08010564 	.word	0x08010564
 8008d9c:	0801056c 	.word	0x0801056c

08008da0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008db0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008db4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008dd6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008dda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	43db      	mvns	r3, r3
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4013      	ands	r3, r2
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	1d3b      	adds	r3, r7, #4
 8008e0e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b09d      	sub	sp, #116	; 0x74
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	78db      	ldrb	r3, [r3, #3]
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d81f      	bhi.n	8008eb2 <USB_ActivateEndpoint+0x72>
 8008e72:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <USB_ActivateEndpoint+0x38>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ebb 	.word	0x08008ebb
 8008e84:	08008e97 	.word	0x08008e97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e94:	e012      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008ea2:	e00b      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008eb0:	e004      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008eb8:	e000      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>
      break;
 8008eba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	b21b      	sxth	r3, r3
 8008eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	b21a      	sxth	r2, r3
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b21b      	sxth	r3, r3
 8008f02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	7b1b      	ldrb	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8178 	bne.w	8009222 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	785b      	ldrb	r3, [r3, #1]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8084 	beq.w	8009044 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	00da      	lsls	r2, r3, #3
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	827b      	strh	r3, [r7, #18]
 8008f7e:	8a7b      	ldrh	r3, [r7, #18]
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01b      	beq.n	8008fc0 <USB_ActivateEndpoint+0x180>
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	823b      	strh	r3, [r7, #16]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8a3b      	ldrh	r3, [r7, #16]
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	78db      	ldrb	r3, [r3, #3]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d020      	beq.n	800900a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fde:	81bb      	strh	r3, [r7, #12]
 8008fe0:	89bb      	ldrh	r3, [r7, #12]
 8008fe2:	f083 0320 	eor.w	r3, r3, #32
 8008fe6:	81bb      	strh	r3, [r7, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	441a      	add	r2, r3
 8008ff2:	89bb      	ldrh	r3, [r7, #12]
 8008ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009004:	b29b      	uxth	r3, r3
 8009006:	8013      	strh	r3, [r2, #0]
 8009008:	e2d5      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009020:	81fb      	strh	r3, [r7, #14]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	441a      	add	r2, r3
 800902c:	89fb      	ldrh	r3, [r7, #14]
 800902e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	b29b      	uxth	r3, r3
 8009040:	8013      	strh	r3, [r2, #0]
 8009042:	e2b8      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	633b      	str	r3, [r7, #48]	; 0x30
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800904e:	b29b      	uxth	r3, r3
 8009050:	461a      	mov	r2, r3
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	4413      	add	r3, r2
 8009056:	633b      	str	r3, [r7, #48]	; 0x30
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	00da      	lsls	r2, r3, #3
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	4413      	add	r3, r2
 8009062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	b29b      	uxth	r3, r3
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009082:	b29b      	uxth	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	4413      	add	r3, r2
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	00da      	lsls	r2, r3, #3
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	4413      	add	r3, r2
 8009096:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	801a      	strh	r2, [r3, #0]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	2b3e      	cmp	r3, #62	; 0x3e
 80090b2:	d91d      	bls.n	80090f0 <USB_ActivateEndpoint+0x2b0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	095b      	lsrs	r3, r3, #5
 80090ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <USB_ActivateEndpoint+0x28e>
 80090c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090ca:	3b01      	subs	r3, #1
 80090cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4313      	orrs	r3, r2
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	e026      	b.n	800913e <USB_ActivateEndpoint+0x2fe>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <USB_ActivateEndpoint+0x2ce>
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009106:	b29a      	uxth	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e017      	b.n	800913e <USB_ActivateEndpoint+0x2fe>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	085b      	lsrs	r3, r3, #1
 8009114:	66bb      	str	r3, [r7, #104]	; 0x68
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <USB_ActivateEndpoint+0x2e8>
 8009122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009124:	3301      	adds	r3, #1
 8009126:	66bb      	str	r3, [r7, #104]	; 0x68
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	b29a      	uxth	r2, r3
 800912e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009130:	b29b      	uxth	r3, r3
 8009132:	029b      	lsls	r3, r3, #10
 8009134:	b29b      	uxth	r3, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	b29a      	uxth	r2, r3
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	847b      	strh	r3, [r7, #34]	; 0x22
 800914c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800914e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d01b      	beq.n	800918e <USB_ActivateEndpoint+0x34e>
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916c:	843b      	strh	r3, [r7, #32]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	441a      	add	r2, r3
 8009178:	8c3b      	ldrh	r3, [r7, #32]
 800917a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918a:	b29b      	uxth	r3, r3
 800918c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d124      	bne.n	80091e0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	83bb      	strh	r3, [r7, #28]
 80091ae:	8bbb      	ldrh	r3, [r7, #28]
 80091b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80091b4:	83bb      	strh	r3, [r7, #28]
 80091b6:	8bbb      	ldrh	r3, [r7, #28]
 80091b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091bc:	83bb      	strh	r3, [r7, #28]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	441a      	add	r2, r3
 80091c8:	8bbb      	ldrh	r3, [r7, #28]
 80091ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091da:	b29b      	uxth	r3, r3
 80091dc:	8013      	strh	r3, [r2, #0]
 80091de:	e1ea      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	83fb      	strh	r3, [r7, #30]
 80091f8:	8bfb      	ldrh	r3, [r7, #30]
 80091fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091fe:	83fb      	strh	r3, [r7, #30]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	441a      	add	r2, r3
 800920a:	8bfb      	ldrh	r3, [r7, #30]
 800920c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921c:	b29b      	uxth	r3, r3
 800921e:	8013      	strh	r3, [r2, #0]
 8009220:	e1c9      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	78db      	ldrb	r3, [r3, #3]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d11e      	bne.n	8009268 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009240:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	441a      	add	r2, r3
 800924e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800925a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800925e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009262:	b29b      	uxth	r3, r3
 8009264:	8013      	strh	r3, [r2, #0]
 8009266:	e01d      	b.n	80092a4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	441a      	add	r2, r3
 800928c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b4:	4413      	add	r3, r2
 80092b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	00da      	lsls	r2, r3, #3
 80092be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	891b      	ldrh	r3, [r3, #8]
 80092cc:	085b      	lsrs	r3, r3, #1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d6:	801a      	strh	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	657b      	str	r3, [r7, #84]	; 0x54
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e8:	4413      	add	r3, r2
 80092ea:	657b      	str	r3, [r7, #84]	; 0x54
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	00da      	lsls	r2, r3, #3
 80092f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f4:	4413      	add	r3, r2
 80092f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092fa:	653b      	str	r3, [r7, #80]	; 0x50
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	895b      	ldrh	r3, [r3, #10]
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	b29b      	uxth	r3, r3
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b00      	cmp	r3, #0
 8009312:	f040 8093 	bne.w	800943c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800932a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01b      	beq.n	800936a <USB_ActivateEndpoint+0x52a>
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009348:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	441a      	add	r2, r3
 8009354:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800935a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800935e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009366:	b29b      	uxth	r3, r3
 8009368:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009378:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	d01b      	beq.n	80093ba <USB_ActivateEndpoint+0x57a>
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009398:	877b      	strh	r3, [r7, #58]	; 0x3a
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	441a      	add	r2, r3
 80093a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80093a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80093d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80093da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	441a      	add	r2, r3
 80093ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009418:	86fb      	strh	r3, [r7, #54]	; 0x36
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	441a      	add	r2, r3
 8009424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009436:	b29b      	uxth	r3, r3
 8009438:	8013      	strh	r3, [r2, #0]
 800943a:	e0bc      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800944c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01d      	beq.n	8009494 <USB_ActivateEndpoint+0x654>
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	441a      	add	r2, r3
 800947c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800948c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009490:	b29b      	uxth	r3, r3
 8009492:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80094a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80094a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01d      	beq.n	80094ec <USB_ActivateEndpoint+0x6ac>
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	441a      	add	r2, r3
 80094d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	78db      	ldrb	r3, [r3, #3]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d024      	beq.n	800953e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800950e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009512:	f083 0320 	eor.w	r3, r3, #32
 8009516:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	441a      	add	r2, r3
 8009524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800952c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009538:	b29b      	uxth	r3, r3
 800953a:	8013      	strh	r3, [r2, #0]
 800953c:	e01d      	b.n	800957a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009554:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	441a      	add	r2, r3
 8009562:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800956a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800956e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009576:	b29b      	uxth	r3, r3
 8009578:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	b29b      	uxth	r3, r3
 8009588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800958c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009590:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	441a      	add	r2, r3
 800959e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80095b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3774      	adds	r7, #116	; 0x74
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop

080095c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b08d      	sub	sp, #52	; 0x34
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	7b1b      	ldrb	r3, [r3, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 808e 	bne.w	80096f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d044      	beq.n	800966e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	81bb      	strh	r3, [r7, #12]
 80095f2:	89bb      	ldrh	r3, [r7, #12]
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d01b      	beq.n	8009634 <USB_DeactivateEndpoint+0x6c>
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29b      	uxth	r3, r3
 800960a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	817b      	strh	r3, [r7, #10]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	441a      	add	r2, r3
 800961e:	897b      	ldrh	r3, [r7, #10]
 8009620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009630:	b29b      	uxth	r3, r3
 8009632:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964a:	813b      	strh	r3, [r7, #8]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	441a      	add	r2, r3
 8009656:	893b      	ldrh	r3, [r7, #8]
 8009658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800965c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009668:	b29b      	uxth	r3, r3
 800966a:	8013      	strh	r3, [r2, #0]
 800966c:	e192      	b.n	8009994 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	827b      	strh	r3, [r7, #18]
 800967c:	8a7b      	ldrh	r3, [r7, #18]
 800967e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01b      	beq.n	80096be <USB_DeactivateEndpoint+0xf6>
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969c:	823b      	strh	r3, [r7, #16]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	441a      	add	r2, r3
 80096a8:	8a3b      	ldrh	r3, [r7, #16]
 80096aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d4:	81fb      	strh	r3, [r7, #14]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	441a      	add	r2, r3
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	8013      	strh	r3, [r2, #0]
 80096f6:	e14d      	b.n	8009994 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f040 80a5 	bne.w	800984c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	843b      	strh	r3, [r7, #32]
 8009710:	8c3b      	ldrh	r3, [r7, #32]
 8009712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01b      	beq.n	8009752 <USB_DeactivateEndpoint+0x18a>
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29b      	uxth	r3, r3
 8009728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009730:	83fb      	strh	r3, [r7, #30]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	441a      	add	r2, r3
 800973c:	8bfb      	ldrh	r3, [r7, #30]
 800973e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800974a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974e:	b29b      	uxth	r3, r3
 8009750:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	83bb      	strh	r3, [r7, #28]
 8009760:	8bbb      	ldrh	r3, [r7, #28]
 8009762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01b      	beq.n	80097a2 <USB_DeactivateEndpoint+0x1da>
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	b29b      	uxth	r3, r3
 8009778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009780:	837b      	strh	r3, [r7, #26]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	441a      	add	r2, r3
 800978c:	8b7b      	ldrh	r3, [r7, #26]
 800978e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800979a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800979e:	b29b      	uxth	r3, r3
 80097a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b8:	833b      	strh	r3, [r7, #24]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	441a      	add	r2, r3
 80097c4:	8b3b      	ldrh	r3, [r7, #24]
 80097c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f0:	82fb      	strh	r3, [r7, #22]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	441a      	add	r2, r3
 80097fc:	8afb      	ldrh	r3, [r7, #22]
 80097fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980e:	b29b      	uxth	r3, r3
 8009810:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009828:	82bb      	strh	r3, [r7, #20]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	441a      	add	r2, r3
 8009834:	8abb      	ldrh	r3, [r7, #20]
 8009836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009846:	b29b      	uxth	r3, r3
 8009848:	8013      	strh	r3, [r2, #0]
 800984a:	e0a3      	b.n	8009994 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800985a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800985c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d01b      	beq.n	800989c <USB_DeactivateEndpoint+0x2d4>
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	441a      	add	r2, r3
 8009886:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800988c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009898:	b29b      	uxth	r3, r3
 800989a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80098aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80098ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01b      	beq.n	80098ec <USB_DeactivateEndpoint+0x324>
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	441a      	add	r2, r3
 80098d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009902:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	441a      	add	r2, r3
 800990e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800991c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009920:	b29b      	uxth	r3, r3
 8009922:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800993a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	441a      	add	r2, r3
 8009946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	847b      	strh	r3, [r7, #34]	; 0x22
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	441a      	add	r2, r3
 800997e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009990:	b29b      	uxth	r3, r3
 8009992:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3734      	adds	r7, #52	; 0x34
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b0c2      	sub	sp, #264	; 0x108
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099b0:	6018      	str	r0, [r3, #0]
 80099b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	f040 86b7 	bne.w	800a73c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80099ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d908      	bls.n	80099fc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099fa:	e007      	b.n	8009a0c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	7b1b      	ldrb	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d13a      	bne.n	8009a92 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6959      	ldr	r1, [r3, #20]
 8009a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	88da      	ldrh	r2, [r3, #6]
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a42:	6800      	ldr	r0, [r0, #0]
 8009a44:	f001 fc98 	bl	800b378 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4413      	add	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	00da      	lsls	r2, r3, #3
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	f000 be1f 	b.w	800a6d0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	78db      	ldrb	r3, [r3, #3]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	f040 8462 	bne.w	800a368 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6a1a      	ldr	r2, [r3, #32]
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	f240 83df 	bls.w	800a280 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b12:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6a1a      	ldr	r2, [r3, #32]
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 81c7 	beq.w	8009ef2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d177      	bne.n	8009c70 <USB_EPStartXfer+0x2ce>
 8009b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	4413      	add	r3, r2
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	801a      	strh	r2, [r3, #0]
 8009bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8009bd2:	d921      	bls.n	8009c18 <USB_EPStartXfer+0x276>
 8009bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d104      	bne.n	8009bf4 <USB_EPStartXfer+0x252>
 8009bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	029b      	lsls	r3, r3, #10
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	e050      	b.n	8009cba <USB_EPStartXfer+0x318>
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <USB_EPStartXfer+0x294>
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	801a      	strh	r2, [r3, #0]
 8009c34:	e041      	b.n	8009cba <USB_EPStartXfer+0x318>
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d004      	beq.n	8009c56 <USB_EPStartXfer+0x2b4>
 8009c4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c50:	3301      	adds	r3, #1
 8009c52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	029b      	lsls	r3, r3, #10
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4313      	orrs	r3, r2
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	801a      	strh	r2, [r3, #0]
 8009c6e:	e024      	b.n	8009cba <USB_EPStartXfer+0x318>
 8009c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d11c      	bne.n	8009cba <USB_EPStartXfer+0x318>
 8009c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	4413      	add	r3, r2
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30
 8009c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	00da      	lsls	r2, r3, #3
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	895b      	ldrh	r3, [r3, #10]
 8009cc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6959      	ldr	r1, [r3, #20]
 8009cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ce0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ce4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ce8:	6800      	ldr	r0, [r0, #0]
 8009cea:	f001 fb45 	bl	800b378 <USB_WritePMA>
            ep->xfer_buff += len;
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	695a      	ldr	r2, [r3, #20]
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfe:	441a      	add	r2, r3
 8009d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6a1a      	ldr	r2, [r3, #32]
 8009d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d90f      	bls.n	8009d48 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6a1a      	ldr	r2, [r3, #32]
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	621a      	str	r2, [r3, #32]
 8009d46:	e00e      	b.n	8009d66 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d177      	bne.n	8009e66 <USB_EPStartXfer+0x4c4>
 8009d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	61bb      	str	r3, [r7, #24]
 8009d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	461a      	mov	r2, r3
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	4413      	add	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
 8009d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	00da      	lsls	r2, r3, #3
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	4413      	add	r3, r2
 8009dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009dc8:	d921      	bls.n	8009e0e <USB_EPStartXfer+0x46c>
 8009dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd8:	f003 031f 	and.w	r3, r3, #31
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <USB_EPStartXfer+0x448>
 8009de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009de4:	3b01      	subs	r3, #1
 8009de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	029b      	lsls	r3, r3, #10
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	801a      	strh	r2, [r3, #0]
 8009e0c:	e056      	b.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <USB_EPStartXfer+0x48a>
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	801a      	strh	r2, [r3, #0]
 8009e2a:	e047      	b.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <USB_EPStartXfer+0x4aa>
 8009e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e46:	3301      	adds	r3, #1
 8009e48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	029b      	lsls	r3, r3, #10
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	801a      	strh	r2, [r3, #0]
 8009e64:	e02a      	b.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	785b      	ldrb	r3, [r3, #1]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d122      	bne.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	623b      	str	r3, [r7, #32]
 8009e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	4413      	add	r3, r2
 8009e98:	623b      	str	r3, [r7, #32]
 8009e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	00da      	lsls	r2, r3, #3
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	891b      	ldrh	r3, [r3, #8]
 8009ec8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6959      	ldr	r1, [r3, #20]
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ee2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ee6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	f001 fa44 	bl	800b378 <USB_WritePMA>
 8009ef0:	e3ee      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d177      	bne.n	8009ff2 <USB_EPStartXfer+0x650>
 8009f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f22:	4413      	add	r3, r2
 8009f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	00da      	lsls	r2, r3, #3
 8009f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f36:	4413      	add	r3, r2
 8009f38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f52:	2b3e      	cmp	r3, #62	; 0x3e
 8009f54:	d921      	bls.n	8009f9a <USB_EPStartXfer+0x5f8>
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	f003 031f 	and.w	r3, r3, #31
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <USB_EPStartXfer+0x5d4>
 8009f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f70:	3b01      	subs	r3, #1
 8009f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	029b      	lsls	r3, r3, #10
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f96:	801a      	strh	r2, [r3, #0]
 8009f98:	e056      	b.n	800a048 <USB_EPStartXfer+0x6a6>
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <USB_EPStartXfer+0x616>
 8009fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e047      	b.n	800a048 <USB_EPStartXfer+0x6a6>
 8009fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <USB_EPStartXfer+0x636>
 8009fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	029b      	lsls	r3, r3, #10
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fee:	801a      	strh	r2, [r3, #0]
 8009ff0:	e02a      	b.n	800a048 <USB_EPStartXfer+0x6a6>
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d122      	bne.n	800a048 <USB_EPStartXfer+0x6a6>
 800a002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	653b      	str	r3, [r7, #80]	; 0x50
 800a00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a022:	4413      	add	r3, r2
 800a024:	653b      	str	r3, [r7, #80]	; 0x50
 800a026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	00da      	lsls	r2, r3, #3
 800a034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a036:	4413      	add	r3, r2
 800a038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a03c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a042:	b29a      	uxth	r2, r3
 800a044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a046:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6959      	ldr	r1, [r3, #20]
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a068:	b29b      	uxth	r3, r3
 800a06a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a06e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a072:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a076:	6800      	ldr	r0, [r0, #0]
 800a078:	f001 f97e 	bl	800b378 <USB_WritePMA>
            ep->xfer_buff += len;
 800a07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695a      	ldr	r2, [r3, #20]
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a08c:	441a      	add	r2, r3
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d90f      	bls.n	800a0d6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a1a      	ldr	r2, [r3, #32]
 800a0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c6:	1ad2      	subs	r2, r2, r3
 800a0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	621a      	str	r2, [r3, #32]
 800a0d4:	e00e      	b.n	800a0f4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800a100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d177      	bne.n	800a200 <USB_EPStartXfer+0x85e>
 800a110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	4413      	add	r3, r2
 800a132:	63bb      	str	r3, [r7, #56]	; 0x38
 800a134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	00da      	lsls	r2, r3, #3
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	4413      	add	r3, r2
 800a146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a14a:	637b      	str	r3, [r7, #52]	; 0x34
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a156:	b29a      	uxth	r2, r3
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a160:	2b3e      	cmp	r3, #62	; 0x3e
 800a162:	d921      	bls.n	800a1a8 <USB_EPStartXfer+0x806>
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a168:	095b      	lsrs	r3, r3, #5
 800a16a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a172:	f003 031f 	and.w	r3, r3, #31
 800a176:	2b00      	cmp	r3, #0
 800a178:	d104      	bne.n	800a184 <USB_EPStartXfer+0x7e2>
 800a17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17e:	3b01      	subs	r3, #1
 800a180:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18e:	b29b      	uxth	r3, r3
 800a190:	029b      	lsls	r3, r3, #10
 800a192:	b29b      	uxth	r3, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	b29b      	uxth	r3, r3
 800a198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	e050      	b.n	800a24a <USB_EPStartXfer+0x8a8>
 800a1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <USB_EPStartXfer+0x824>
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c2:	801a      	strh	r2, [r3, #0]
 800a1c4:	e041      	b.n	800a24a <USB_EPStartXfer+0x8a8>
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <USB_EPStartXfer+0x844>
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	029b      	lsls	r3, r3, #10
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	801a      	strh	r2, [r3, #0]
 800a1fe:	e024      	b.n	800a24a <USB_EPStartXfer+0x8a8>
 800a200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	785b      	ldrb	r3, [r3, #1]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d11c      	bne.n	800a24a <USB_EPStartXfer+0x8a8>
 800a210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a21e:	b29b      	uxth	r3, r3
 800a220:	461a      	mov	r2, r3
 800a222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a224:	4413      	add	r3, r2
 800a226:	643b      	str	r3, [r7, #64]	; 0x40
 800a228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	00da      	lsls	r2, r3, #3
 800a236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a238:	4413      	add	r3, r2
 800a23a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a244:	b29a      	uxth	r2, r3
 800a246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	895b      	ldrh	r3, [r3, #10]
 800a256:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6959      	ldr	r1, [r3, #20]
 800a266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a270:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a274:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a278:	6800      	ldr	r0, [r0, #0]
 800a27a:	f001 f87d 	bl	800b378 <USB_WritePMA>
 800a27e:	e227      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	441a      	add	r2, r3
 800a2d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a306:	b29b      	uxth	r3, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a30c:	4413      	add	r3, r2
 800a30e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	00da      	lsls	r2, r3, #3
 800a31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a320:	4413      	add	r3, r2
 800a322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a326:	65bb      	str	r3, [r7, #88]	; 0x58
 800a328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a330:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	891b      	ldrh	r3, [r3, #8]
 800a33e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6959      	ldr	r1, [r3, #20]
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	b29b      	uxth	r3, r3
 800a354:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a358:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a35c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a360:	6800      	ldr	r0, [r0, #0]
 800a362:	f001 f809 	bl	800b378 <USB_WritePMA>
 800a366:	e1b3      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6a1a      	ldr	r2, [r3, #32]
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a378:	1ad2      	subs	r2, r2, r3
 800a37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80c6 	beq.w	800a53a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	673b      	str	r3, [r7, #112]	; 0x70
 800a3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d177      	bne.n	800a4ba <USB_EPStartXfer+0xb18>
 800a3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ea:	4413      	add	r3, r2
 800a3ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	00da      	lsls	r2, r3, #3
 800a3fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3fe:	4413      	add	r3, r2
 800a400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a404:	667b      	str	r3, [r7, #100]	; 0x64
 800a406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a410:	b29a      	uxth	r2, r3
 800a412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a414:	801a      	strh	r2, [r3, #0]
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	2b3e      	cmp	r3, #62	; 0x3e
 800a41c:	d921      	bls.n	800a462 <USB_EPStartXfer+0xac0>
 800a41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <USB_EPStartXfer+0xa9c>
 800a434:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a438:	3b01      	subs	r3, #1
 800a43a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	b29a      	uxth	r2, r3
 800a444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a448:	b29b      	uxth	r3, r3
 800a44a:	029b      	lsls	r3, r3, #10
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	4313      	orrs	r3, r2
 800a450:	b29b      	uxth	r3, r3
 800a452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	e050      	b.n	800a504 <USB_EPStartXfer+0xb62>
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <USB_EPStartXfer+0xade>
 800a46a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a478:	b29a      	uxth	r2, r3
 800a47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47c:	801a      	strh	r2, [r3, #0]
 800a47e:	e041      	b.n	800a504 <USB_EPStartXfer+0xb62>
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a484:	085b      	lsrs	r3, r3, #1
 800a486:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d004      	beq.n	800a4a0 <USB_EPStartXfer+0xafe>
 800a496:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a49a:	3301      	adds	r3, #1
 800a49c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	029b      	lsls	r3, r3, #10
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	e024      	b.n	800a504 <USB_EPStartXfer+0xb62>
 800a4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d11c      	bne.n	800a504 <USB_EPStartXfer+0xb62>
 800a4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4de:	4413      	add	r3, r2
 800a4e0:	673b      	str	r3, [r7, #112]	; 0x70
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	00da      	lsls	r2, r3, #3
 800a4f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a502:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	895b      	ldrh	r3, [r3, #10]
 800a510:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6959      	ldr	r1, [r3, #20]
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	b29b      	uxth	r3, r3
 800a526:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a52a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a52e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	f000 ff20 	bl	800b378 <USB_WritePMA>
 800a538:	e0ca      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d177      	bne.n	800a63a <USB_EPStartXfer+0xc98>
 800a54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a564:	b29b      	uxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a56a:	4413      	add	r3, r2
 800a56c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	00da      	lsls	r2, r3, #3
 800a57c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a57e:	4413      	add	r3, r2
 800a580:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a584:	67bb      	str	r3, [r7, #120]	; 0x78
 800a586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a590:	b29a      	uxth	r2, r3
 800a592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59a:	2b3e      	cmp	r3, #62	; 0x3e
 800a59c:	d921      	bls.n	800a5e2 <USB_EPStartXfer+0xc40>
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a2:	095b      	lsrs	r3, r3, #5
 800a5a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ac:	f003 031f 	and.w	r3, r3, #31
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d104      	bne.n	800a5be <USB_EPStartXfer+0xc1c>
 800a5b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	029b      	lsls	r3, r3, #10
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5de:	801a      	strh	r2, [r3, #0]
 800a5e0:	e05c      	b.n	800a69c <USB_EPStartXfer+0xcfa>
 800a5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10a      	bne.n	800a600 <USB_EPStartXfer+0xc5e>
 800a5ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5fc:	801a      	strh	r2, [r3, #0]
 800a5fe:	e04d      	b.n	800a69c <USB_EPStartXfer+0xcfa>
 800a600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a604:	085b      	lsrs	r3, r3, #1
 800a606:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <USB_EPStartXfer+0xc7e>
 800a616:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a61a:	3301      	adds	r3, #1
 800a61c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	b29a      	uxth	r2, r3
 800a626:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	029b      	lsls	r3, r3, #10
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4313      	orrs	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a636:	801a      	strh	r2, [r3, #0]
 800a638:	e030      	b.n	800a69c <USB_EPStartXfer+0xcfa>
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d128      	bne.n	800a69c <USB_EPStartXfer+0xcfa>
 800a64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a65c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a666:	b29b      	uxth	r3, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a66e:	4413      	add	r3, r2
 800a670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	00da      	lsls	r2, r3, #3
 800a682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a686:	4413      	add	r3, r2
 800a688:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a68c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	b29a      	uxth	r2, r3
 800a696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a69a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	891b      	ldrh	r3, [r3, #8]
 800a6a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6959      	ldr	r1, [r3, #20]
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a6c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6ca:	6800      	ldr	r0, [r0, #0]
 800a6cc:	f000 fe54 	bl	800b378 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f6:	817b      	strh	r3, [r7, #10]
 800a6f8:	897b      	ldrh	r3, [r7, #10]
 800a6fa:	f083 0310 	eor.w	r3, r3, #16
 800a6fe:	817b      	strh	r3, [r7, #10]
 800a700:	897b      	ldrh	r3, [r7, #10]
 800a702:	f083 0320 	eor.w	r3, r3, #32
 800a706:	817b      	strh	r3, [r7, #10]
 800a708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	441a      	add	r2, r3
 800a722:	897b      	ldrh	r3, [r7, #10]
 800a724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a72c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a734:	b29b      	uxth	r3, r3
 800a736:	8013      	strh	r3, [r2, #0]
 800a738:	f000 bcde 	b.w	800b0f8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	7b1b      	ldrb	r3, [r3, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 80bb 	bne.w	800a8c4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	429a      	cmp	r2, r3
 800a768:	d917      	bls.n	800a79a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	1ad2      	subs	r2, r2, r3
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	619a      	str	r2, [r3, #24]
 800a798:	e00e      	b.n	800a7b8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7dc:	4413      	add	r3, r2
 800a7de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	00da      	lsls	r2, r3, #3
 800a7f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a810:	801a      	strh	r2, [r3, #0]
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a816:	2b3e      	cmp	r3, #62	; 0x3e
 800a818:	d924      	bls.n	800a864 <USB_EPStartXfer+0xec2>
 800a81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81e:	095b      	lsrs	r3, r3, #5
 800a820:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	f003 031f 	and.w	r3, r3, #31
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <USB_EPStartXfer+0xe98>
 800a830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a834:	3b01      	subs	r3, #1
 800a836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	b29a      	uxth	r2, r3
 800a842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a846:	b29b      	uxth	r3, r3
 800a848:	029b      	lsls	r3, r3, #10
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4313      	orrs	r3, r2
 800a84e:	b29b      	uxth	r3, r3
 800a850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a858:	b29a      	uxth	r2, r3
 800a85a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	f000 bc10 	b.w	800b084 <USB_EPStartXfer+0x16e2>
 800a864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10c      	bne.n	800a886 <USB_EPStartXfer+0xee4>
 800a86c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a882:	801a      	strh	r2, [r3, #0]
 800a884:	e3fe      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88a:	085b      	lsrs	r3, r3, #1
 800a88c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d004      	beq.n	800a8a6 <USB_EPStartXfer+0xf04>
 800a89c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	029b      	lsls	r3, r3, #10
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8c0:	801a      	strh	r2, [r3, #0]
 800a8c2:	e3df      	b.n	800b084 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	78db      	ldrb	r3, [r3, #3]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	f040 8218 	bne.w	800ad06 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 809d 	bne.w	800aa22 <USB_EPStartXfer+0x1080>
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a904:	b29b      	uxth	r3, r3
 800a906:	461a      	mov	r2, r3
 800a908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a90c:	4413      	add	r3, r2
 800a90e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	00da      	lsls	r2, r3, #3
 800a920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a924:	4413      	add	r3, r2
 800a926:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a92a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a92e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	b29b      	uxth	r3, r3
 800a936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b3e      	cmp	r3, #62	; 0x3e
 800a950:	d92b      	bls.n	800a9aa <USB_EPStartXfer+0x1008>
 800a952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	095b      	lsrs	r3, r3, #5
 800a960:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	f003 031f 	and.w	r3, r3, #31
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <USB_EPStartXfer+0xfe0>
 800a978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a98e:	b29b      	uxth	r3, r3
 800a990:	029b      	lsls	r3, r3, #10
 800a992:	b29b      	uxth	r3, r3
 800a994:	4313      	orrs	r3, r2
 800a996:	b29b      	uxth	r3, r3
 800a998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a99c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9a6:	801a      	strh	r2, [r3, #0]
 800a9a8:	e070      	b.n	800aa8c <USB_EPStartXfer+0x10ea>
 800a9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10c      	bne.n	800a9d4 <USB_EPStartXfer+0x1032>
 800a9ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	e05b      	b.n	800aa8c <USB_EPStartXfer+0x10ea>
 800a9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	085b      	lsrs	r3, r3, #1
 800a9e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <USB_EPStartXfer+0x1062>
 800a9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	029b      	lsls	r3, r3, #10
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4313      	orrs	r3, r2
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa1e:	801a      	strh	r2, [r3, #0]
 800aa20:	e034      	b.n	800aa8c <USB_EPStartXfer+0x10ea>
 800aa22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d12c      	bne.n	800aa8c <USB_EPStartXfer+0x10ea>
 800aa32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	461a      	mov	r2, r3
 800aa52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa56:	4413      	add	r3, r2
 800aa58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	00da      	lsls	r2, r3, #3
 800aa6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa6e:	4413      	add	r3, r2
 800aa70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aa8a:	801a      	strh	r2, [r3, #0]
 800aa8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f040 809d 	bne.w	800abe6 <USB_EPStartXfer+0x1244>
 800aaac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	461a      	mov	r2, r3
 800aacc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aad0:	4413      	add	r3, r2
 800aad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	00da      	lsls	r2, r3, #3
 800aae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aae8:	4413      	add	r3, r2
 800aaea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aaf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aaf6:	881b      	ldrh	r3, [r3, #0]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab04:	801a      	strh	r2, [r3, #0]
 800ab06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b3e      	cmp	r3, #62	; 0x3e
 800ab14:	d92b      	bls.n	800ab6e <USB_EPStartXfer+0x11cc>
 800ab16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	095b      	lsrs	r3, r3, #5
 800ab24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	f003 031f 	and.w	r3, r3, #31
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <USB_EPStartXfer+0x11a4>
 800ab3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab40:	3b01      	subs	r3, #1
 800ab42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	029b      	lsls	r3, r3, #10
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab6a:	801a      	strh	r2, [r3, #0]
 800ab6c:	e069      	b.n	800ac42 <USB_EPStartXfer+0x12a0>
 800ab6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10c      	bne.n	800ab98 <USB_EPStartXfer+0x11f6>
 800ab7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e054      	b.n	800ac42 <USB_EPStartXfer+0x12a0>
 800ab98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <USB_EPStartXfer+0x1226>
 800abbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc2:	3301      	adds	r3, #1
 800abc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	b29a      	uxth	r2, r3
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	029b      	lsls	r3, r3, #10
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4313      	orrs	r3, r2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	e02d      	b.n	800ac42 <USB_EPStartXfer+0x12a0>
 800abe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d125      	bne.n	800ac42 <USB_EPStartXfer+0x12a0>
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	00da      	lsls	r2, r3, #3
 800ac20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac24:	4413      	add	r3, r2
 800ac26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 8218 	beq.w	800b084 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d005      	beq.n	800ac8c <USB_EPStartXfer+0x12ea>
 800ac80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10d      	bne.n	800aca8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 81f5 	bne.w	800b084 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f040 81ee 	bne.w	800b084 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	441a      	add	r2, r3
 800acec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800acf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	8013      	strh	r3, [r2, #0]
 800ad04:	e1be      	b.n	800b084 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ad06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	78db      	ldrb	r3, [r3, #3]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	f040 81b4 	bne.w	800b080 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d917      	bls.n	800ad64 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ad34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ad44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	619a      	str	r2, [r3, #24]
 800ad62:	e00e      	b.n	800ad82 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ad64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ad74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 8085 	bne.w	800ae9e <USB_EPStartXfer+0x14fc>
 800ad94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ada2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adb8:	4413      	add	r3, r2
 800adba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	00da      	lsls	r2, r3, #3
 800adcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800add0:	4413      	add	r3, r2
 800add2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800add6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adec:	801a      	strh	r2, [r3, #0]
 800adee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf2:	2b3e      	cmp	r3, #62	; 0x3e
 800adf4:	d923      	bls.n	800ae3e <USB_EPStartXfer+0x149c>
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	095b      	lsrs	r3, r3, #5
 800adfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae04:	f003 031f 	and.w	r3, r3, #31
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <USB_EPStartXfer+0x1474>
 800ae0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae10:	3b01      	subs	r3, #1
 800ae12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	029b      	lsls	r3, r3, #10
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae3a:	801a      	strh	r2, [r3, #0]
 800ae3c:	e060      	b.n	800af00 <USB_EPStartXfer+0x155e>
 800ae3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10c      	bne.n	800ae60 <USB_EPStartXfer+0x14be>
 800ae46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae5c:	801a      	strh	r2, [r3, #0]
 800ae5e:	e04f      	b.n	800af00 <USB_EPStartXfer+0x155e>
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	085b      	lsrs	r3, r3, #1
 800ae66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <USB_EPStartXfer+0x14de>
 800ae76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	029b      	lsls	r3, r3, #10
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	4313      	orrs	r3, r2
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	e030      	b.n	800af00 <USB_EPStartXfer+0x155e>
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	785b      	ldrb	r3, [r3, #1]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d128      	bne.n	800af00 <USB_EPStartXfer+0x155e>
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aed2:	4413      	add	r3, r2
 800aed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	00da      	lsls	r2, r3, #3
 800aee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeea:	4413      	add	r3, r2
 800aeec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aefe:	801a      	strh	r2, [r3, #0]
 800af00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f040 8085 	bne.w	800b02a <USB_EPStartXfer+0x1688>
 800af20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	461a      	mov	r2, r3
 800af40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af44:	4413      	add	r3, r2
 800af46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	00da      	lsls	r2, r3, #3
 800af58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af5c:	4413      	add	r3, r2
 800af5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af72:	b29a      	uxth	r2, r3
 800af74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af78:	801a      	strh	r2, [r3, #0]
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7e:	2b3e      	cmp	r3, #62	; 0x3e
 800af80:	d923      	bls.n	800afca <USB_EPStartXfer+0x1628>
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	095b      	lsrs	r3, r3, #5
 800af88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af90:	f003 031f 	and.w	r3, r3, #31
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <USB_EPStartXfer+0x1600>
 800af98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af9c:	3b01      	subs	r3, #1
 800af9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afae:	b29b      	uxth	r3, r3
 800afb0:	029b      	lsls	r3, r3, #10
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4313      	orrs	r3, r2
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afc6:	801a      	strh	r2, [r3, #0]
 800afc8:	e05c      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10c      	bne.n	800afec <USB_EPStartXfer+0x164a>
 800afd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afe8:	801a      	strh	r2, [r3, #0]
 800afea:	e04b      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	085b      	lsrs	r3, r3, #1
 800aff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d004      	beq.n	800b00c <USB_EPStartXfer+0x166a>
 800b002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b006:	3301      	adds	r3, #1
 800b008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b00c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29a      	uxth	r2, r3
 800b014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b018:	b29b      	uxth	r3, r3
 800b01a:	029b      	lsls	r3, r3, #10
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	b29a      	uxth	r2, r3
 800b022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b026:	801a      	strh	r2, [r3, #0]
 800b028:	e02c      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d124      	bne.n	800b084 <USB_EPStartXfer+0x16e2>
 800b03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b048:	b29b      	uxth	r3, r3
 800b04a:	461a      	mov	r2, r3
 800b04c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b050:	4413      	add	r3, r2
 800b052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	00da      	lsls	r2, r3, #3
 800b064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b068:	4413      	add	r3, r2
 800b06a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b06e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b076:	b29a      	uxth	r2, r3
 800b078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	e001      	b.n	800b084 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e03a      	b.n	800b0fa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b0c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	441a      	add	r2, r3
 800b0e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	785b      	ldrb	r3, [r3, #1]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d020      	beq.n	800b158 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b12c:	81bb      	strh	r3, [r7, #12]
 800b12e:	89bb      	ldrh	r3, [r7, #12]
 800b130:	f083 0310 	eor.w	r3, r3, #16
 800b134:	81bb      	strh	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	441a      	add	r2, r3
 800b140:	89bb      	ldrh	r3, [r7, #12]
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]
 800b156:	e01f      	b.n	800b198 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	b29b      	uxth	r3, r3
 800b166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16e:	81fb      	strh	r3, [r7, #14]
 800b170:	89fb      	ldrh	r3, [r7, #14]
 800b172:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b176:	81fb      	strh	r3, [r7, #14]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	441a      	add	r2, r3
 800b182:	89fb      	ldrh	r3, [r7, #14]
 800b184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b18c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b194:	b29b      	uxth	r3, r3
 800b196:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b087      	sub	sp, #28
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	7b1b      	ldrb	r3, [r3, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f040 809d 	bne.w	800b2f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	785b      	ldrb	r3, [r3, #1]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d04c      	beq.n	800b25c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	823b      	strh	r3, [r7, #16]
 800b1d0:	8a3b      	ldrh	r3, [r7, #16]
 800b1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d01b      	beq.n	800b212 <USB_EPClearStall+0x6c>
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f0:	81fb      	strh	r3, [r7, #14]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	441a      	add	r2, r3
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
 800b1fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b20a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b20e:	b29b      	uxth	r3, r3
 800b210:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	78db      	ldrb	r3, [r3, #3]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d06c      	beq.n	800b2f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b230:	81bb      	strh	r3, [r7, #12]
 800b232:	89bb      	ldrh	r3, [r7, #12]
 800b234:	f083 0320 	eor.w	r3, r3, #32
 800b238:	81bb      	strh	r3, [r7, #12]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	441a      	add	r2, r3
 800b244:	89bb      	ldrh	r3, [r7, #12]
 800b246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b24e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b256:	b29b      	uxth	r3, r3
 800b258:	8013      	strh	r3, [r2, #0]
 800b25a:	e04b      	b.n	800b2f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	82fb      	strh	r3, [r7, #22]
 800b26a:	8afb      	ldrh	r3, [r7, #22]
 800b26c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01b      	beq.n	800b2ac <USB_EPClearStall+0x106>
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	b29b      	uxth	r3, r3
 800b282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b28a:	82bb      	strh	r3, [r7, #20]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	441a      	add	r2, r3
 800b296:	8abb      	ldrh	r3, [r7, #20]
 800b298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b29c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c2:	827b      	strh	r3, [r7, #18]
 800b2c4:	8a7b      	ldrh	r3, [r7, #18]
 800b2c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2ca:	827b      	strh	r3, [r7, #18]
 800b2cc:	8a7b      	ldrh	r3, [r7, #18]
 800b2ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2d2:	827b      	strh	r3, [r7, #18]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	441a      	add	r2, r3
 800b2de:	8a7b      	ldrh	r3, [r7, #18]
 800b2e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	371c      	adds	r7, #28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d103      	bne.n	800b31c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2280      	movs	r2, #128	; 0x80
 800b318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b338:	b29b      	uxth	r3, r3
 800b33a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b33e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b342:	b29a      	uxth	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b366:	b29b      	uxth	r3, r3
 800b368:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b36a:	68fb      	ldr	r3, [r7, #12]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b378:	b480      	push	{r7}
 800b37a:	b08b      	sub	sp, #44	; 0x2c
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	4611      	mov	r1, r2
 800b384:	461a      	mov	r2, r3
 800b386:	460b      	mov	r3, r1
 800b388:	80fb      	strh	r3, [r7, #6]
 800b38a:	4613      	mov	r3, r2
 800b38c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b38e:	88bb      	ldrh	r3, [r7, #4]
 800b390:	3301      	adds	r3, #1
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b39e:	88fa      	ldrh	r2, [r7, #6]
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ae:	e01b      	b.n	800b3e8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	b21a      	sxth	r2, r3
 800b3c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	8a7a      	ldrh	r2, [r7, #18]
 800b3ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e0      	bne.n	800b3b0 <USB_WritePMA+0x38>
  }
}
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	372c      	adds	r7, #44	; 0x2c
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b08b      	sub	sp, #44	; 0x2c
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4611      	mov	r1, r2
 800b408:	461a      	mov	r2, r3
 800b40a:	460b      	mov	r3, r1
 800b40c:	80fb      	strh	r3, [r7, #6]
 800b40e:	4613      	mov	r3, r2
 800b410:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b412:	88bb      	ldrh	r3, [r7, #4]
 800b414:	085b      	lsrs	r3, r3, #1
 800b416:	b29b      	uxth	r3, r3
 800b418:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b422:	88fa      	ldrh	r2, [r7, #6]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b42c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
 800b432:	e018      	b.n	800b466 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	3302      	adds	r3, #2
 800b440:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	b2da      	uxtb	r2, r3
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	3301      	adds	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	0a1b      	lsrs	r3, r3, #8
 800b454:	b2da      	uxtb	r2, r3
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	3301      	adds	r3, #1
 800b45e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	3b01      	subs	r3, #1
 800b464:	627b      	str	r3, [r7, #36]	; 0x24
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e3      	bne.n	800b434 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b46c:	88bb      	ldrh	r3, [r7, #4]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	b29b      	uxth	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	d007      	beq.n	800b488 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	b2da      	uxtb	r2, r3
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	701a      	strb	r2, [r3, #0]
  }
}
 800b488:	bf00      	nop
 800b48a:	372c      	adds	r7, #44	; 0x2c
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b4a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b4a4:	f002 f8fc 	bl	800d6a0 <USBD_static_malloc>
 800b4a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d105      	bne.n	800b4bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	e066      	b.n	800b58a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	7c1b      	ldrb	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d119      	bne.n	800b500 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	2181      	movs	r1, #129	; 0x81
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 ff8a 	bl	800d3ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 ff80 	bl	800d3ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2210      	movs	r2, #16
 800b4fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b4fe:	e016      	b.n	800b52e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b500:	2340      	movs	r3, #64	; 0x40
 800b502:	2202      	movs	r2, #2
 800b504:	2181      	movs	r1, #129	; 0x81
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 ff71 	bl	800d3ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b512:	2340      	movs	r3, #64	; 0x40
 800b514:	2202      	movs	r2, #2
 800b516:	2101      	movs	r1, #1
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 ff68 	bl	800d3ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2210      	movs	r2, #16
 800b52a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b52e:	2308      	movs	r3, #8
 800b530:	2203      	movs	r2, #3
 800b532:	2182      	movs	r1, #130	; 0x82
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 ff5a 	bl	800d3ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	7c1b      	ldrb	r3, [r3, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d109      	bne.n	800b578 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b56a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b56e:	2101      	movs	r1, #1
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f002 f82b 	bl	800d5cc <USBD_LL_PrepareReceive>
 800b576:	e007      	b.n	800b588 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	2101      	movs	r1, #1
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f002 f822 	bl	800d5cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b59e:	2181      	movs	r1, #129	; 0x81
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 ff4a 	bl	800d43a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 ff43 	bl	800d43a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b5bc:	2182      	movs	r1, #130	; 0x82
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 ff3b 	bl	800d43a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00e      	beq.n	800b5fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f002 f864 	bl	800d6bc <USBD_static_free>
    pdev->pClassData = NULL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b618:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e0af      	b.n	800b790 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d03f      	beq.n	800b6bc <USBD_CDC_Setup+0xb4>
 800b63c:	2b20      	cmp	r3, #32
 800b63e:	f040 809f 	bne.w	800b780 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	88db      	ldrh	r3, [r3, #6]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d02e      	beq.n	800b6a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b25b      	sxtb	r3, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	da16      	bge.n	800b682 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b660:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	88d2      	ldrh	r2, [r2, #6]
 800b666:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	88db      	ldrh	r3, [r3, #6]
 800b66c:	2b07      	cmp	r3, #7
 800b66e:	bf28      	it	cs
 800b670:	2307      	movcs	r3, #7
 800b672:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	89fa      	ldrh	r2, [r7, #14]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f001 facf 	bl	800cc1e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b680:	e085      	b.n	800b78e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	785a      	ldrb	r2, [r3, #1]
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	88db      	ldrh	r3, [r3, #6]
 800b690:	b2da      	uxtb	r2, r3
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b698:	6939      	ldr	r1, [r7, #16]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	88db      	ldrh	r3, [r3, #6]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 fae8 	bl	800cc76 <USBD_CtlPrepareRx>
      break;
 800b6a6:	e072      	b.n	800b78e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	7850      	ldrb	r0, [r2, #1]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	4798      	blx	r3
      break;
 800b6ba:	e068      	b.n	800b78e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	2b0b      	cmp	r3, #11
 800b6c2:	d852      	bhi.n	800b76a <USBD_CDC_Setup+0x162>
 800b6c4:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <USBD_CDC_Setup+0xc4>)
 800b6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ca:	bf00      	nop
 800b6cc:	0800b6fd 	.word	0x0800b6fd
 800b6d0:	0800b779 	.word	0x0800b779
 800b6d4:	0800b76b 	.word	0x0800b76b
 800b6d8:	0800b76b 	.word	0x0800b76b
 800b6dc:	0800b76b 	.word	0x0800b76b
 800b6e0:	0800b76b 	.word	0x0800b76b
 800b6e4:	0800b76b 	.word	0x0800b76b
 800b6e8:	0800b76b 	.word	0x0800b76b
 800b6ec:	0800b76b 	.word	0x0800b76b
 800b6f0:	0800b76b 	.word	0x0800b76b
 800b6f4:	0800b727 	.word	0x0800b727
 800b6f8:	0800b751 	.word	0x0800b751
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b03      	cmp	r3, #3
 800b706:	d107      	bne.n	800b718 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b708:	f107 030a 	add.w	r3, r7, #10
 800b70c:	2202      	movs	r2, #2
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fa84 	bl	800cc1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b716:	e032      	b.n	800b77e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 fa0e 	bl	800cb3c <USBD_CtlError>
            ret = USBD_FAIL;
 800b720:	2303      	movs	r3, #3
 800b722:	75fb      	strb	r3, [r7, #23]
          break;
 800b724:	e02b      	b.n	800b77e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d107      	bne.n	800b742 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b732:	f107 030d 	add.w	r3, r7, #13
 800b736:	2201      	movs	r2, #1
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fa6f 	bl	800cc1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b740:	e01d      	b.n	800b77e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f001 f9f9 	bl	800cb3c <USBD_CtlError>
            ret = USBD_FAIL;
 800b74a:	2303      	movs	r3, #3
 800b74c:	75fb      	strb	r3, [r7, #23]
          break;
 800b74e:	e016      	b.n	800b77e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b03      	cmp	r3, #3
 800b75a:	d00f      	beq.n	800b77c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f001 f9ec 	bl	800cb3c <USBD_CtlError>
            ret = USBD_FAIL;
 800b764:	2303      	movs	r3, #3
 800b766:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b768:	e008      	b.n	800b77c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 f9e5 	bl	800cb3c <USBD_CtlError>
          ret = USBD_FAIL;
 800b772:	2303      	movs	r3, #3
 800b774:	75fb      	strb	r3, [r7, #23]
          break;
 800b776:	e002      	b.n	800b77e <USBD_CDC_Setup+0x176>
          break;
 800b778:	bf00      	nop
 800b77a:	e008      	b.n	800b78e <USBD_CDC_Setup+0x186>
          break;
 800b77c:	bf00      	nop
      }
      break;
 800b77e:	e006      	b.n	800b78e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f001 f9da 	bl	800cb3c <USBD_CtlError>
      ret = USBD_FAIL;
 800b788:	2303      	movs	r3, #3
 800b78a:	75fb      	strb	r3, [r7, #23]
      break;
 800b78c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e04f      	b.n	800b85a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3318      	adds	r3, #24
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d029      	beq.n	800b82c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b7d8:	78fa      	ldrb	r2, [r7, #3]
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	78f9      	ldrb	r1, [r7, #3]
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	440b      	add	r3, r1
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	4403      	add	r3, r0
 800b7f8:	3320      	adds	r3, #32
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b800:	fb01 f303 	mul.w	r3, r1, r3
 800b804:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b806:	2b00      	cmp	r3, #0
 800b808:	d110      	bne.n	800b82c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b80a:	78fa      	ldrb	r2, [r7, #3]
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	440b      	add	r3, r1
 800b818:	3318      	adds	r3, #24
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b81e:	78f9      	ldrb	r1, [r7, #3]
 800b820:	2300      	movs	r3, #0
 800b822:	2200      	movs	r2, #0
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 feb0 	bl	800d58a <USBD_LL_Transmit>
 800b82a:	e015      	b.n	800b858 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b874:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b880:	2303      	movs	r3, #3
 800b882:	e015      	b.n	800b8b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b884:	78fb      	ldrb	r3, [r7, #3]
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 fec0 	bl	800d60e <USBD_LL_GetRxDataSize>
 800b88e:	4602      	mov	r2, r0
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e01b      	b.n	800b90a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d015      	beq.n	800b908 <USBD_CDC_EP0_RxReady+0x50>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b8e2:	2bff      	cmp	r3, #255	; 0xff
 800b8e4:	d010      	beq.n	800b908 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b8f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8fc:	b292      	uxth	r2, r2
 800b8fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	22ff      	movs	r2, #255	; 0xff
 800b904:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2243      	movs	r2, #67	; 0x43
 800b920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b922:	4b03      	ldr	r3, [pc, #12]	; (800b930 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	20000094 	.word	0x20000094

0800b934 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2243      	movs	r2, #67	; 0x43
 800b940:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b942:	4b03      	ldr	r3, [pc, #12]	; (800b950 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr
 800b950:	20000050 	.word	0x20000050

0800b954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2243      	movs	r2, #67	; 0x43
 800b960:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b962:	4b03      	ldr	r3, [pc, #12]	; (800b970 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b964:	4618      	mov	r0, r3
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	200000d8 	.word	0x200000d8

0800b974 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	220a      	movs	r2, #10
 800b980:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b982:	4b03      	ldr	r3, [pc, #12]	; (800b990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	2000000c 	.word	0x2000000c

0800b994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e004      	b.n	800b9b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b087      	sub	sp, #28
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	60b9      	str	r1, [r7, #8]
 800b9c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e008      	b.n	800b9ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	371c      	adds	r7, #28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e004      	b.n	800ba20 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba3a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e01a      	b.n	800ba84 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d114      	bne.n	800ba82 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba76:	2181      	movs	r1, #129	; 0x81
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 fd86 	bl	800d58a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800baa6:	2303      	movs	r3, #3
 800baa8:	e016      	b.n	800bad8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	7c1b      	ldrb	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d109      	bne.n	800bac6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800babc:	2101      	movs	r1, #1
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f001 fd84 	bl	800d5cc <USBD_LL_PrepareReceive>
 800bac4:	e007      	b.n	800bad6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	2101      	movs	r1, #1
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f001 fd7b 	bl	800d5cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e01f      	b.n	800bb38 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	79fa      	ldrb	r2, [r7, #7]
 800bb2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f001 fbe3 	bl	800d2f8 <USBD_LL_Init>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e016      	b.n	800bb86 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00b      	beq.n	800bb84 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	f107 020e 	add.w	r2, r7, #14
 800bb78:	4610      	mov	r0, r2
 800bb7a:	4798      	blx	r3
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b082      	sub	sp, #8
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fc0e 	bl	800d3b8 <USBD_LL_Start>
 800bb9c:	4603      	mov	r3, r0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b083      	sub	sp, #12
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	4798      	blx	r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d007      	beq.n	800bc1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	78fa      	ldrb	r2, [r7, #3]
 800bc14:	4611      	mov	r1, r2
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	4798      	blx	r3
  }

  return USBD_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 ff46 	bl	800cac8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc58:	f003 031f 	and.w	r3, r3, #31
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d01a      	beq.n	800bc96 <USBD_LL_SetupStage+0x72>
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d822      	bhi.n	800bcaa <USBD_LL_SetupStage+0x86>
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <USBD_LL_SetupStage+0x4a>
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d00a      	beq.n	800bc82 <USBD_LL_SetupStage+0x5e>
 800bc6c:	e01d      	b.n	800bcaa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f9ee 	bl	800c058 <USBD_StdDevReq>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc80:	e020      	b.n	800bcc4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fa52 	bl	800c134 <USBD_StdItfReq>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
      break;
 800bc94:	e016      	b.n	800bcc4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fa91 	bl	800c1c6 <USBD_StdEPReq>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
      break;
 800bca8:	e00c      	b.n	800bcc4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bcb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f001 fbdd 	bl	800d478 <USBD_LL_StallEP>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc2:	bf00      	nop
  }

  return ret;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b086      	sub	sp, #24
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	607a      	str	r2, [r7, #4]
 800bcda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcdc:	7afb      	ldrb	r3, [r7, #11]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d138      	bne.n	800bd54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bce8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d14a      	bne.n	800bd8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	689a      	ldr	r2, [r3, #8]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d913      	bls.n	800bd28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	1ad2      	subs	r2, r2, r3
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	4293      	cmp	r3, r2
 800bd18:	bf28      	it	cs
 800bd1a:	4613      	movcs	r3, r2
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 ffc5 	bl	800ccb0 <USBD_CtlContinueRx>
 800bd26:	e030      	b.n	800bd8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b03      	cmp	r3, #3
 800bd32:	d10b      	bne.n	800bd4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 ffc0 	bl	800ccd2 <USBD_CtlSendStatus>
 800bd52:	e01a      	b.n	800bd8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d114      	bne.n	800bd8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00e      	beq.n	800bd8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	7afa      	ldrb	r2, [r7, #11]
 800bd76:	4611      	mov	r1, r2
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	4798      	blx	r3
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d001      	beq.n	800bd8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	e000      	b.n	800bd8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bda2:	7afb      	ldrb	r3, [r7, #11]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d16b      	bne.n	800be80 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3314      	adds	r3, #20
 800bdac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d156      	bne.n	800be66 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	689a      	ldr	r2, [r3, #8]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d914      	bls.n	800bdee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	1ad2      	subs	r2, r2, r3
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 ff3a 	bl	800cc54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bde0:	2300      	movs	r3, #0
 800bde2:	2200      	movs	r2, #0
 800bde4:	2100      	movs	r1, #0
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f001 fbf0 	bl	800d5cc <USBD_LL_PrepareReceive>
 800bdec:	e03b      	b.n	800be66 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	68da      	ldr	r2, [r3, #12]
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d11c      	bne.n	800be34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800be02:	429a      	cmp	r2, r3
 800be04:	d316      	bcc.n	800be34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be10:	429a      	cmp	r2, r3
 800be12:	d20f      	bcs.n	800be34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be14:	2200      	movs	r2, #0
 800be16:	2100      	movs	r1, #0
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 ff1b 	bl	800cc54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be26:	2300      	movs	r3, #0
 800be28:	2200      	movs	r2, #0
 800be2a:	2100      	movs	r1, #0
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f001 fbcd 	bl	800d5cc <USBD_LL_PrepareReceive>
 800be32:	e018      	b.n	800be66 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d10b      	bne.n	800be58 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be58:	2180      	movs	r1, #128	; 0x80
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f001 fb0c 	bl	800d478 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 ff49 	bl	800ccf8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d122      	bne.n	800beb6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f7ff fe98 	bl	800bba6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be7e:	e01a      	b.n	800beb6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d114      	bne.n	800beb6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00e      	beq.n	800beb6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	7afa      	ldrb	r2, [r7, #11]
 800bea2:	4611      	mov	r1, r2
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	4798      	blx	r3
 800bea8:	4603      	mov	r3, r0
 800beaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800beac:	7dfb      	ldrb	r3, [r7, #23]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	e000      	b.n	800beb8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e02f      	b.n	800bf54 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00f      	beq.n	800bf1e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	6852      	ldr	r2, [r2, #4]
 800bf16:	b2d2      	uxtb	r2, r2
 800bf18:	4611      	mov	r1, r2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf1e:	2340      	movs	r3, #64	; 0x40
 800bf20:	2200      	movs	r2, #0
 800bf22:	2100      	movs	r1, #0
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f001 fa62 	bl	800d3ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2240      	movs	r2, #64	; 0x40
 800bf36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2180      	movs	r1, #128	; 0x80
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 fa54 	bl	800d3ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2240      	movs	r2, #64	; 0x40
 800bf50:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	78fa      	ldrb	r2, [r7, #3]
 800bf6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2204      	movs	r2, #4
 800bf96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b04      	cmp	r3, #4
 800bfba:	d106      	bne.n	800bfca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bfea:	2303      	movs	r3, #3
 800bfec:	e012      	b.n	800c014 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d10b      	bne.n	800c012 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00c:	69db      	ldr	r3, [r3, #28]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b087      	sub	sp, #28
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	3301      	adds	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c03a:	8a3b      	ldrh	r3, [r7, #16]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	b21a      	sxth	r2, r3
 800c040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c044:	4313      	orrs	r3, r2
 800c046:	b21b      	sxth	r3, r3
 800c048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c04a:	89fb      	ldrh	r3, [r7, #14]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	371c      	adds	r7, #28
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c06e:	2b40      	cmp	r3, #64	; 0x40
 800c070:	d005      	beq.n	800c07e <USBD_StdDevReq+0x26>
 800c072:	2b40      	cmp	r3, #64	; 0x40
 800c074:	d853      	bhi.n	800c11e <USBD_StdDevReq+0xc6>
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <USBD_StdDevReq+0x3a>
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d14f      	bne.n	800c11e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	4798      	blx	r3
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
      break;
 800c090:	e04a      	b.n	800c128 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	785b      	ldrb	r3, [r3, #1]
 800c096:	2b09      	cmp	r3, #9
 800c098:	d83b      	bhi.n	800c112 <USBD_StdDevReq+0xba>
 800c09a:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <USBD_StdDevReq+0x48>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c0f5 	.word	0x0800c0f5
 800c0a4:	0800c109 	.word	0x0800c109
 800c0a8:	0800c113 	.word	0x0800c113
 800c0ac:	0800c0ff 	.word	0x0800c0ff
 800c0b0:	0800c113 	.word	0x0800c113
 800c0b4:	0800c0d3 	.word	0x0800c0d3
 800c0b8:	0800c0c9 	.word	0x0800c0c9
 800c0bc:	0800c113 	.word	0x0800c113
 800c0c0:	0800c0eb 	.word	0x0800c0eb
 800c0c4:	0800c0dd 	.word	0x0800c0dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f9de 	bl	800c48c <USBD_GetDescriptor>
          break;
 800c0d0:	e024      	b.n	800c11c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fb6d 	bl	800c7b4 <USBD_SetAddress>
          break;
 800c0da:	e01f      	b.n	800c11c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fbac 	bl	800c83c <USBD_SetConfig>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73fb      	strb	r3, [r7, #15]
          break;
 800c0e8:	e018      	b.n	800c11c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fc4b 	bl	800c988 <USBD_GetConfig>
          break;
 800c0f2:	e013      	b.n	800c11c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fc7c 	bl	800c9f4 <USBD_GetStatus>
          break;
 800c0fc:	e00e      	b.n	800c11c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fcab 	bl	800ca5c <USBD_SetFeature>
          break;
 800c106:	e009      	b.n	800c11c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fcba 	bl	800ca84 <USBD_ClrFeature>
          break;
 800c110:	e004      	b.n	800c11c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fd11 	bl	800cb3c <USBD_CtlError>
          break;
 800c11a:	bf00      	nop
      }
      break;
 800c11c:	e004      	b.n	800c128 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fd0b 	bl	800cb3c <USBD_CtlError>
      break;
 800c126:	bf00      	nop
  }

  return ret;
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop

0800c134 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c14a:	2b40      	cmp	r3, #64	; 0x40
 800c14c:	d005      	beq.n	800c15a <USBD_StdItfReq+0x26>
 800c14e:	2b40      	cmp	r3, #64	; 0x40
 800c150:	d82f      	bhi.n	800c1b2 <USBD_StdItfReq+0x7e>
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <USBD_StdItfReq+0x26>
 800c156:	2b20      	cmp	r3, #32
 800c158:	d12b      	bne.n	800c1b2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c160:	b2db      	uxtb	r3, r3
 800c162:	3b01      	subs	r3, #1
 800c164:	2b02      	cmp	r3, #2
 800c166:	d81d      	bhi.n	800c1a4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	889b      	ldrh	r3, [r3, #4]
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d813      	bhi.n	800c19a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	4798      	blx	r3
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	88db      	ldrh	r3, [r3, #6]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d110      	bne.n	800c1ae <USBD_StdItfReq+0x7a>
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10d      	bne.n	800c1ae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fd9d 	bl	800ccd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c198:	e009      	b.n	800c1ae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fccd 	bl	800cb3c <USBD_CtlError>
          break;
 800c1a2:	e004      	b.n	800c1ae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fcc8 	bl	800cb3c <USBD_CtlError>
          break;
 800c1ac:	e000      	b.n	800c1b0 <USBD_StdItfReq+0x7c>
          break;
 800c1ae:	bf00      	nop
      }
      break;
 800c1b0:	e004      	b.n	800c1bc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fcc1 	bl	800cb3c <USBD_CtlError>
      break;
 800c1ba:	bf00      	nop
  }

  return ret;
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	889b      	ldrh	r3, [r3, #4]
 800c1d8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1e2:	2b40      	cmp	r3, #64	; 0x40
 800c1e4:	d007      	beq.n	800c1f6 <USBD_StdEPReq+0x30>
 800c1e6:	2b40      	cmp	r3, #64	; 0x40
 800c1e8:	f200 8145 	bhi.w	800c476 <USBD_StdEPReq+0x2b0>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00c      	beq.n	800c20a <USBD_StdEPReq+0x44>
 800c1f0:	2b20      	cmp	r3, #32
 800c1f2:	f040 8140 	bne.w	800c476 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	4798      	blx	r3
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]
      break;
 800c208:	e13a      	b.n	800c480 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d007      	beq.n	800c222 <USBD_StdEPReq+0x5c>
 800c212:	2b03      	cmp	r3, #3
 800c214:	f300 8129 	bgt.w	800c46a <USBD_StdEPReq+0x2a4>
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d07f      	beq.n	800c31c <USBD_StdEPReq+0x156>
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d03c      	beq.n	800c29a <USBD_StdEPReq+0xd4>
 800c220:	e123      	b.n	800c46a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d002      	beq.n	800c234 <USBD_StdEPReq+0x6e>
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d016      	beq.n	800c260 <USBD_StdEPReq+0x9a>
 800c232:	e02c      	b.n	800c28e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00d      	beq.n	800c256 <USBD_StdEPReq+0x90>
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
 800c23c:	2b80      	cmp	r3, #128	; 0x80
 800c23e:	d00a      	beq.n	800c256 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c240:	7bbb      	ldrb	r3, [r7, #14]
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 f917 	bl	800d478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c24a:	2180      	movs	r1, #128	; 0x80
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f001 f913 	bl	800d478 <USBD_LL_StallEP>
 800c252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c254:	e020      	b.n	800c298 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fc6f 	bl	800cb3c <USBD_CtlError>
              break;
 800c25e:	e01b      	b.n	800c298 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	885b      	ldrh	r3, [r3, #2]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10e      	bne.n	800c286 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00b      	beq.n	800c286 <USBD_StdEPReq+0xc0>
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
 800c270:	2b80      	cmp	r3, #128	; 0x80
 800c272:	d008      	beq.n	800c286 <USBD_StdEPReq+0xc0>
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	88db      	ldrh	r3, [r3, #6]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d104      	bne.n	800c286 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f001 f8f9 	bl	800d478 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fd23 	bl	800ccd2 <USBD_CtlSendStatus>

              break;
 800c28c:	e004      	b.n	800c298 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fc53 	bl	800cb3c <USBD_CtlError>
              break;
 800c296:	bf00      	nop
          }
          break;
 800c298:	e0ec      	b.n	800c474 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d002      	beq.n	800c2ac <USBD_StdEPReq+0xe6>
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d016      	beq.n	800c2d8 <USBD_StdEPReq+0x112>
 800c2aa:	e030      	b.n	800c30e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <USBD_StdEPReq+0x108>
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b80      	cmp	r3, #128	; 0x80
 800c2b6:	d00a      	beq.n	800c2ce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 f8db 	bl	800d478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c2:	2180      	movs	r1, #128	; 0x80
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f001 f8d7 	bl	800d478 <USBD_LL_StallEP>
 800c2ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2cc:	e025      	b.n	800c31a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fc33 	bl	800cb3c <USBD_CtlError>
              break;
 800c2d6:	e020      	b.n	800c31a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	885b      	ldrh	r3, [r3, #2]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11b      	bne.n	800c318 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d004      	beq.n	800c2f4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f001 f8e1 	bl	800d4b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fcec 	bl	800ccd2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	4798      	blx	r3
 800c308:	4603      	mov	r3, r0
 800c30a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c30c:	e004      	b.n	800c318 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fc13 	bl	800cb3c <USBD_CtlError>
              break;
 800c316:	e000      	b.n	800c31a <USBD_StdEPReq+0x154>
              break;
 800c318:	bf00      	nop
          }
          break;
 800c31a:	e0ab      	b.n	800c474 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b02      	cmp	r3, #2
 800c326:	d002      	beq.n	800c32e <USBD_StdEPReq+0x168>
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d032      	beq.n	800c392 <USBD_StdEPReq+0x1cc>
 800c32c:	e097      	b.n	800c45e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d007      	beq.n	800c344 <USBD_StdEPReq+0x17e>
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b80      	cmp	r3, #128	; 0x80
 800c338:	d004      	beq.n	800c344 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fbfd 	bl	800cb3c <USBD_CtlError>
                break;
 800c342:	e091      	b.n	800c468 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	da0b      	bge.n	800c364 <USBD_StdEPReq+0x19e>
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	3310      	adds	r3, #16
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4413      	add	r3, r2
 800c360:	3304      	adds	r3, #4
 800c362:	e00b      	b.n	800c37c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c36a:	4613      	mov	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	4413      	add	r3, r2
 800c37a:	3304      	adds	r3, #4
 800c37c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2202      	movs	r2, #2
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fc47 	bl	800cc1e <USBD_CtlSendData>
              break;
 800c390:	e06a      	b.n	800c468 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c396:	2b00      	cmp	r3, #0
 800c398:	da11      	bge.n	800c3be <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c39a:	7bbb      	ldrb	r3, [r7, #14]
 800c39c:	f003 020f 	and.w	r2, r3, #15
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3324      	adds	r3, #36	; 0x24
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d117      	bne.n	800c3e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fbc0 	bl	800cb3c <USBD_CtlError>
                  break;
 800c3bc:	e054      	b.n	800c468 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	f003 020f 	and.w	r2, r3, #15
 800c3c4:	6879      	ldr	r1, [r7, #4]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	440b      	add	r3, r1
 800c3d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d104      	bne.n	800c3e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fbad 	bl	800cb3c <USBD_CtlError>
                  break;
 800c3e2:	e041      	b.n	800c468 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	da0b      	bge.n	800c404 <USBD_StdEPReq+0x23e>
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	3310      	adds	r3, #16
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	4413      	add	r3, r2
 800c400:	3304      	adds	r3, #4
 800c402:	e00b      	b.n	800c41c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c404:	7bbb      	ldrb	r3, [r7, #14]
 800c406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c40a:	4613      	mov	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4413      	add	r3, r2
 800c41a:	3304      	adds	r3, #4
 800c41c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d002      	beq.n	800c42a <USBD_StdEPReq+0x264>
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	2b80      	cmp	r3, #128	; 0x80
 800c428:	d103      	bne.n	800c432 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	2200      	movs	r2, #0
 800c42e:	601a      	str	r2, [r3, #0]
 800c430:	e00e      	b.n	800c450 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c432:	7bbb      	ldrb	r3, [r7, #14]
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f001 f85c 	bl	800d4f4 <USBD_LL_IsStallEP>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2201      	movs	r2, #1
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	e002      	b.n	800c450 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2200      	movs	r2, #0
 800c44e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2202      	movs	r2, #2
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fbe1 	bl	800cc1e <USBD_CtlSendData>
              break;
 800c45c:	e004      	b.n	800c468 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fb6b 	bl	800cb3c <USBD_CtlError>
              break;
 800c466:	bf00      	nop
          }
          break;
 800c468:	e004      	b.n	800c474 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fb65 	bl	800cb3c <USBD_CtlError>
          break;
 800c472:	bf00      	nop
      }
      break;
 800c474:	e004      	b.n	800c480 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fb5f 	bl	800cb3c <USBD_CtlError>
      break;
 800c47e:	bf00      	nop
  }

  return ret;
 800c480:	7bfb      	ldrb	r3, [r7, #15]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c496:	2300      	movs	r3, #0
 800c498:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	885b      	ldrh	r3, [r3, #2]
 800c4a6:	0a1b      	lsrs	r3, r3, #8
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	2b0e      	cmp	r3, #14
 800c4ae:	f200 8152 	bhi.w	800c756 <USBD_GetDescriptor+0x2ca>
 800c4b2:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <USBD_GetDescriptor+0x2c>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c529 	.word	0x0800c529
 800c4bc:	0800c541 	.word	0x0800c541
 800c4c0:	0800c581 	.word	0x0800c581
 800c4c4:	0800c757 	.word	0x0800c757
 800c4c8:	0800c757 	.word	0x0800c757
 800c4cc:	0800c6f7 	.word	0x0800c6f7
 800c4d0:	0800c723 	.word	0x0800c723
 800c4d4:	0800c757 	.word	0x0800c757
 800c4d8:	0800c757 	.word	0x0800c757
 800c4dc:	0800c757 	.word	0x0800c757
 800c4e0:	0800c757 	.word	0x0800c757
 800c4e4:	0800c757 	.word	0x0800c757
 800c4e8:	0800c757 	.word	0x0800c757
 800c4ec:	0800c757 	.word	0x0800c757
 800c4f0:	0800c4f5 	.word	0x0800c4f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fa:	69db      	ldr	r3, [r3, #28]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00b      	beq.n	800c518 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c506:	69db      	ldr	r3, [r3, #28]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	7c12      	ldrb	r2, [r2, #16]
 800c50c:	f107 0108 	add.w	r1, r7, #8
 800c510:	4610      	mov	r0, r2
 800c512:	4798      	blx	r3
 800c514:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c516:	e126      	b.n	800c766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb0e 	bl	800cb3c <USBD_CtlError>
        err++;
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	3301      	adds	r3, #1
 800c524:	72fb      	strb	r3, [r7, #11]
      break;
 800c526:	e11e      	b.n	800c766 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	7c12      	ldrb	r2, [r2, #16]
 800c534:	f107 0108 	add.w	r1, r7, #8
 800c538:	4610      	mov	r0, r2
 800c53a:	4798      	blx	r3
 800c53c:	60f8      	str	r0, [r7, #12]
      break;
 800c53e:	e112      	b.n	800c766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7c1b      	ldrb	r3, [r3, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10d      	bne.n	800c564 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c550:	f107 0208 	add.w	r2, r7, #8
 800c554:	4610      	mov	r0, r2
 800c556:	4798      	blx	r3
 800c558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3301      	adds	r3, #1
 800c55e:	2202      	movs	r2, #2
 800c560:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c562:	e100      	b.n	800c766 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	f107 0208 	add.w	r2, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	3301      	adds	r3, #1
 800c57a:	2202      	movs	r2, #2
 800c57c:	701a      	strb	r2, [r3, #0]
      break;
 800c57e:	e0f2      	b.n	800c766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	885b      	ldrh	r3, [r3, #2]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b05      	cmp	r3, #5
 800c588:	f200 80ac 	bhi.w	800c6e4 <USBD_GetDescriptor+0x258>
 800c58c:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <USBD_GetDescriptor+0x108>)
 800c58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c592:	bf00      	nop
 800c594:	0800c5ad 	.word	0x0800c5ad
 800c598:	0800c5e1 	.word	0x0800c5e1
 800c59c:	0800c615 	.word	0x0800c615
 800c5a0:	0800c649 	.word	0x0800c649
 800c5a4:	0800c67d 	.word	0x0800c67d
 800c5a8:	0800c6b1 	.word	0x0800c6b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00b      	beq.n	800c5d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	7c12      	ldrb	r2, [r2, #16]
 800c5c4:	f107 0108 	add.w	r1, r7, #8
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4798      	blx	r3
 800c5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ce:	e091      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fab2 	bl	800cb3c <USBD_CtlError>
            err++;
 800c5d8:	7afb      	ldrb	r3, [r7, #11]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c5de:	e089      	b.n	800c6f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00b      	beq.n	800c604 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	7c12      	ldrb	r2, [r2, #16]
 800c5f8:	f107 0108 	add.w	r1, r7, #8
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4798      	blx	r3
 800c600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c602:	e077      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fa98 	bl	800cb3c <USBD_CtlError>
            err++;
 800c60c:	7afb      	ldrb	r3, [r7, #11]
 800c60e:	3301      	adds	r3, #1
 800c610:	72fb      	strb	r3, [r7, #11]
          break;
 800c612:	e06f      	b.n	800c6f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	7c12      	ldrb	r2, [r2, #16]
 800c62c:	f107 0108 	add.w	r1, r7, #8
 800c630:	4610      	mov	r0, r2
 800c632:	4798      	blx	r3
 800c634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c636:	e05d      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa7e 	bl	800cb3c <USBD_CtlError>
            err++;
 800c640:	7afb      	ldrb	r3, [r7, #11]
 800c642:	3301      	adds	r3, #1
 800c644:	72fb      	strb	r3, [r7, #11]
          break;
 800c646:	e055      	b.n	800c6f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	7c12      	ldrb	r2, [r2, #16]
 800c660:	f107 0108 	add.w	r1, r7, #8
 800c664:	4610      	mov	r0, r2
 800c666:	4798      	blx	r3
 800c668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c66a:	e043      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fa64 	bl	800cb3c <USBD_CtlError>
            err++;
 800c674:	7afb      	ldrb	r3, [r7, #11]
 800c676:	3301      	adds	r3, #1
 800c678:	72fb      	strb	r3, [r7, #11]
          break;
 800c67a:	e03b      	b.n	800c6f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00b      	beq.n	800c6a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c68e:	695b      	ldr	r3, [r3, #20]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	7c12      	ldrb	r2, [r2, #16]
 800c694:	f107 0108 	add.w	r1, r7, #8
 800c698:	4610      	mov	r0, r2
 800c69a:	4798      	blx	r3
 800c69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c69e:	e029      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fa4a 	bl	800cb3c <USBD_CtlError>
            err++;
 800c6a8:	7afb      	ldrb	r3, [r7, #11]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ae:	e021      	b.n	800c6f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	7c12      	ldrb	r2, [r2, #16]
 800c6c8:	f107 0108 	add.w	r1, r7, #8
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	4798      	blx	r3
 800c6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6d2:	e00f      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa30 	bl	800cb3c <USBD_CtlError>
            err++;
 800c6dc:	7afb      	ldrb	r3, [r7, #11]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6e2:	e007      	b.n	800c6f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fa28 	bl	800cb3c <USBD_CtlError>
          err++;
 800c6ec:	7afb      	ldrb	r3, [r7, #11]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c6f2:	bf00      	nop
      }
      break;
 800c6f4:	e037      	b.n	800c766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	7c1b      	ldrb	r3, [r3, #16]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c706:	f107 0208 	add.w	r2, r7, #8
 800c70a:	4610      	mov	r0, r2
 800c70c:	4798      	blx	r3
 800c70e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c710:	e029      	b.n	800c766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fa11 	bl	800cb3c <USBD_CtlError>
        err++;
 800c71a:	7afb      	ldrb	r3, [r7, #11]
 800c71c:	3301      	adds	r3, #1
 800c71e:	72fb      	strb	r3, [r7, #11]
      break;
 800c720:	e021      	b.n	800c766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7c1b      	ldrb	r3, [r3, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10d      	bne.n	800c746 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c732:	f107 0208 	add.w	r2, r7, #8
 800c736:	4610      	mov	r0, r2
 800c738:	4798      	blx	r3
 800c73a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3301      	adds	r3, #1
 800c740:	2207      	movs	r2, #7
 800c742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c744:	e00f      	b.n	800c766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f9f7 	bl	800cb3c <USBD_CtlError>
        err++;
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	3301      	adds	r3, #1
 800c752:	72fb      	strb	r3, [r7, #11]
      break;
 800c754:	e007      	b.n	800c766 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f9ef 	bl	800cb3c <USBD_CtlError>
      err++;
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	3301      	adds	r3, #1
 800c762:	72fb      	strb	r3, [r7, #11]
      break;
 800c764:	bf00      	nop
  }

  if (err != 0U)
 800c766:	7afb      	ldrb	r3, [r7, #11]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11e      	bne.n	800c7aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	88db      	ldrh	r3, [r3, #6]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d016      	beq.n	800c7a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c774:	893b      	ldrh	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00e      	beq.n	800c798 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	88da      	ldrh	r2, [r3, #6]
 800c77e:	893b      	ldrh	r3, [r7, #8]
 800c780:	4293      	cmp	r3, r2
 800c782:	bf28      	it	cs
 800c784:	4613      	movcs	r3, r2
 800c786:	b29b      	uxth	r3, r3
 800c788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c78a:	893b      	ldrh	r3, [r7, #8]
 800c78c:	461a      	mov	r2, r3
 800c78e:	68f9      	ldr	r1, [r7, #12]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fa44 	bl	800cc1e <USBD_CtlSendData>
 800c796:	e009      	b.n	800c7ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f9ce 	bl	800cb3c <USBD_CtlError>
 800c7a0:	e004      	b.n	800c7ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fa95 	bl	800ccd2 <USBD_CtlSendStatus>
 800c7a8:	e000      	b.n	800c7ac <USBD_GetDescriptor+0x320>
    return;
 800c7aa:	bf00      	nop
  }
}
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop

0800c7b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	889b      	ldrh	r3, [r3, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d131      	bne.n	800c82a <USBD_SetAddress+0x76>
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	88db      	ldrh	r3, [r3, #6]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d12d      	bne.n	800c82a <USBD_SetAddress+0x76>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	885b      	ldrh	r3, [r3, #2]
 800c7d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c7d4:	d829      	bhi.n	800c82a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	885b      	ldrh	r3, [r3, #2]
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d104      	bne.n	800c7f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f9a3 	bl	800cb3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f6:	e01d      	b.n	800c834 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7bfa      	ldrb	r2, [r7, #15]
 800c7fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fea1 	bl	800d54c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fa61 	bl	800ccd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d004      	beq.n	800c820 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2202      	movs	r2, #2
 800c81a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c81e:	e009      	b.n	800c834 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c828:	e004      	b.n	800c834 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f985 	bl	800cb3c <USBD_CtlError>
  }
}
 800c832:	bf00      	nop
 800c834:	bf00      	nop
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	885b      	ldrh	r3, [r3, #2]
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	4b4c      	ldr	r3, [pc, #304]	; (800c984 <USBD_SetConfig+0x148>)
 800c852:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c854:	4b4b      	ldr	r3, [pc, #300]	; (800c984 <USBD_SetConfig+0x148>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d905      	bls.n	800c868 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f96c 	bl	800cb3c <USBD_CtlError>
    return USBD_FAIL;
 800c864:	2303      	movs	r3, #3
 800c866:	e088      	b.n	800c97a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b02      	cmp	r3, #2
 800c872:	d002      	beq.n	800c87a <USBD_SetConfig+0x3e>
 800c874:	2b03      	cmp	r3, #3
 800c876:	d025      	beq.n	800c8c4 <USBD_SetConfig+0x88>
 800c878:	e071      	b.n	800c95e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c87a:	4b42      	ldr	r3, [pc, #264]	; (800c984 <USBD_SetConfig+0x148>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d01c      	beq.n	800c8bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c882:	4b40      	ldr	r3, [pc, #256]	; (800c984 <USBD_SetConfig+0x148>)
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c88c:	4b3d      	ldr	r3, [pc, #244]	; (800c984 <USBD_SetConfig+0x148>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff f992 	bl	800bbbc <USBD_SetClassConfig>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d004      	beq.n	800c8ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f949 	bl	800cb3c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8aa:	e065      	b.n	800c978 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fa10 	bl	800ccd2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c8ba:	e05d      	b.n	800c978 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fa08 	bl	800ccd2 <USBD_CtlSendStatus>
      break;
 800c8c2:	e059      	b.n	800c978 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c8c4:	4b2f      	ldr	r3, [pc, #188]	; (800c984 <USBD_SetConfig+0x148>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d112      	bne.n	800c8f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c8d4:	4b2b      	ldr	r3, [pc, #172]	; (800c984 <USBD_SetConfig+0x148>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8de:	4b29      	ldr	r3, [pc, #164]	; (800c984 <USBD_SetConfig+0x148>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff f985 	bl	800bbf4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f9f1 	bl	800ccd2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8f0:	e042      	b.n	800c978 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c8f2:	4b24      	ldr	r3, [pc, #144]	; (800c984 <USBD_SetConfig+0x148>)
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d02a      	beq.n	800c956 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	b2db      	uxtb	r3, r3
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff f973 	bl	800bbf4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c90e:	4b1d      	ldr	r3, [pc, #116]	; (800c984 <USBD_SetConfig+0x148>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c918:	4b1a      	ldr	r3, [pc, #104]	; (800c984 <USBD_SetConfig+0x148>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff f94c 	bl	800bbbc <USBD_SetClassConfig>
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00f      	beq.n	800c94e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f903 	bl	800cb3c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff f958 	bl	800bbf4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2202      	movs	r2, #2
 800c948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c94c:	e014      	b.n	800c978 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f9bf 	bl	800ccd2 <USBD_CtlSendStatus>
      break;
 800c954:	e010      	b.n	800c978 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f9bb 	bl	800ccd2 <USBD_CtlSendStatus>
      break;
 800c95c:	e00c      	b.n	800c978 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f8eb 	bl	800cb3c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c966:	4b07      	ldr	r3, [pc, #28]	; (800c984 <USBD_SetConfig+0x148>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7ff f941 	bl	800bbf4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c972:	2303      	movs	r3, #3
 800c974:	73fb      	strb	r3, [r7, #15]
      break;
 800c976:	bf00      	nop
  }

  return ret;
 800c978:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20000700 	.word	0x20000700

0800c988 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	88db      	ldrh	r3, [r3, #6]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d004      	beq.n	800c9a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f8cd 	bl	800cb3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c9a2:	e023      	b.n	800c9ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	dc02      	bgt.n	800c9b6 <USBD_GetConfig+0x2e>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dc03      	bgt.n	800c9bc <USBD_GetConfig+0x34>
 800c9b4:	e015      	b.n	800c9e2 <USBD_GetConfig+0x5a>
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d00b      	beq.n	800c9d2 <USBD_GetConfig+0x4a>
 800c9ba:	e012      	b.n	800c9e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f927 	bl	800cc1e <USBD_CtlSendData>
        break;
 800c9d0:	e00c      	b.n	800c9ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 f91f 	bl	800cc1e <USBD_CtlSendData>
        break;
 800c9e0:	e004      	b.n	800c9ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 f8a9 	bl	800cb3c <USBD_CtlError>
        break;
 800c9ea:	bf00      	nop
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d81e      	bhi.n	800ca4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	88db      	ldrh	r3, [r3, #6]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d004      	beq.n	800ca1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f890 	bl	800cb3c <USBD_CtlError>
        break;
 800ca1c:	e01a      	b.n	800ca54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2201      	movs	r2, #1
 800ca22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d005      	beq.n	800ca3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f043 0202 	orr.w	r2, r3, #2
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	330c      	adds	r3, #12
 800ca3e:	2202      	movs	r2, #2
 800ca40:	4619      	mov	r1, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f8eb 	bl	800cc1e <USBD_CtlSendData>
      break;
 800ca48:	e004      	b.n	800ca54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f875 	bl	800cb3c <USBD_CtlError>
      break;
 800ca52:	bf00      	nop
  }
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	885b      	ldrh	r3, [r3, #2]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d106      	bne.n	800ca7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f92b 	bl	800ccd2 <USBD_CtlSendStatus>
  }
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	3b01      	subs	r3, #1
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d80b      	bhi.n	800cab4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	885b      	ldrh	r3, [r3, #2]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d10c      	bne.n	800cabe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f910 	bl	800ccd2 <USBD_CtlSendStatus>
      }
      break;
 800cab2:	e004      	b.n	800cabe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f840 	bl	800cb3c <USBD_CtlError>
      break;
 800cabc:	e000      	b.n	800cac0 <USBD_ClrFeature+0x3c>
      break;
 800cabe:	bf00      	nop
  }
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	781a      	ldrb	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3301      	adds	r3, #1
 800cae2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	781a      	ldrb	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3301      	adds	r3, #1
 800caf0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff fa92 	bl	800c01c <SWAPBYTE>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3301      	adds	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fa85 	bl	800c01c <SWAPBYTE>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3301      	adds	r3, #1
 800cb24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff fa78 	bl	800c01c <SWAPBYTE>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	461a      	mov	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	80da      	strh	r2, [r3, #6]
}
 800cb34:	bf00      	nop
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb46:	2180      	movs	r1, #128	; 0x80
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fc95 	bl	800d478 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb4e:	2100      	movs	r1, #0
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fc91 	bl	800d478 <USBD_LL_StallEP>
}
 800cb56:	bf00      	nop
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d036      	beq.n	800cbe2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb78:	6938      	ldr	r0, [r7, #16]
 800cb7a:	f000 f836 	bl	800cbea <USBD_GetLen>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	3301      	adds	r3, #1
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	4413      	add	r3, r2
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	7812      	ldrb	r2, [r2, #0]
 800cb96:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	4413      	add	r3, r2
 800cba4:	2203      	movs	r2, #3
 800cba6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cbae:	e013      	b.n	800cbd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	7812      	ldrb	r2, [r2, #0]
 800cbba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	613b      	str	r3, [r7, #16]
    idx++;
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	4413      	add	r3, r2
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
    idx++;
 800cbd2:	7dfb      	ldrb	r3, [r7, #23]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e7      	bne.n	800cbb0 <USBD_GetString+0x52>
 800cbe0:	e000      	b.n	800cbe4 <USBD_GetString+0x86>
    return;
 800cbe2:	bf00      	nop
  }
}
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cbfa:	e005      	b.n	800cc08 <USBD_GetLen+0x1e>
  {
    len++;
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	3301      	adds	r3, #1
 800cc06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f5      	bne.n	800cbfc <USBD_GetLen+0x12>
  }

  return len;
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	2100      	movs	r1, #0
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 fca0 	bl	800d58a <USBD_LL_Transmit>

  return USBD_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	2100      	movs	r1, #0
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 fc8f 	bl	800d58a <USBD_LL_Transmit>

  return USBD_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2203      	movs	r2, #3
 800cc86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	2100      	movs	r1, #0
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 fc93 	bl	800d5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 fc82 	bl	800d5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b082      	sub	sp, #8
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2204      	movs	r2, #4
 800ccde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cce2:	2300      	movs	r3, #0
 800cce4:	2200      	movs	r2, #0
 800cce6:	2100      	movs	r1, #0
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 fc4e 	bl	800d58a <USBD_LL_Transmit>

  return USBD_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2205      	movs	r2, #5
 800cd04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd08:	2300      	movs	r3, #0
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fc5c 	bl	800d5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
	...

0800cd20 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cd24:	2200      	movs	r2, #0
 800cd26:	4912      	ldr	r1, [pc, #72]	; (800cd70 <MX_USB_Device_Init+0x50>)
 800cd28:	4812      	ldr	r0, [pc, #72]	; (800cd74 <MX_USB_Device_Init+0x54>)
 800cd2a:	f7fe fed9 	bl	800bae0 <USBD_Init>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cd34:	f7f4 ff0b 	bl	8001b4e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cd38:	490f      	ldr	r1, [pc, #60]	; (800cd78 <MX_USB_Device_Init+0x58>)
 800cd3a:	480e      	ldr	r0, [pc, #56]	; (800cd74 <MX_USB_Device_Init+0x54>)
 800cd3c:	f7fe ff00 	bl	800bb40 <USBD_RegisterClass>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cd46:	f7f4 ff02 	bl	8001b4e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cd4a:	490c      	ldr	r1, [pc, #48]	; (800cd7c <MX_USB_Device_Init+0x5c>)
 800cd4c:	4809      	ldr	r0, [pc, #36]	; (800cd74 <MX_USB_Device_Init+0x54>)
 800cd4e:	f7fe fe21 	bl	800b994 <USBD_CDC_RegisterInterface>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cd58:	f7f4 fef9 	bl	8001b4e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cd5c:	4805      	ldr	r0, [pc, #20]	; (800cd74 <MX_USB_Device_Init+0x54>)
 800cd5e:	f7fe ff16 	bl	800bb8e <USBD_Start>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cd68:	f7f4 fef1 	bl	8001b4e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cd6c:	bf00      	nop
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	20000130 	.word	0x20000130
 800cd74:	20000704 	.word	0x20000704
 800cd78:	20000018 	.word	0x20000018
 800cd7c:	2000011c 	.word	0x2000011c

0800cd80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd84:	2200      	movs	r2, #0
 800cd86:	4905      	ldr	r1, [pc, #20]	; (800cd9c <CDC_Init_FS+0x1c>)
 800cd88:	4805      	ldr	r0, [pc, #20]	; (800cda0 <CDC_Init_FS+0x20>)
 800cd8a:	f7fe fe18 	bl	800b9be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd8e:	4905      	ldr	r1, [pc, #20]	; (800cda4 <CDC_Init_FS+0x24>)
 800cd90:	4803      	ldr	r0, [pc, #12]	; (800cda0 <CDC_Init_FS+0x20>)
 800cd92:	f7fe fe32 	bl	800b9fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20000dd4 	.word	0x20000dd4
 800cda0:	20000704 	.word	0x20000704
 800cda4:	200009d4 	.word	0x200009d4

0800cda8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cdac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	6039      	str	r1, [r7, #0]
 800cdc2:	71fb      	strb	r3, [r7, #7]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	2b23      	cmp	r3, #35	; 0x23
 800cdcc:	d84a      	bhi.n	800ce64 <CDC_Control_FS+0xac>
 800cdce:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <CDC_Control_FS+0x1c>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800ce65 	.word	0x0800ce65
 800cdd8:	0800ce65 	.word	0x0800ce65
 800cddc:	0800ce65 	.word	0x0800ce65
 800cde0:	0800ce65 	.word	0x0800ce65
 800cde4:	0800ce65 	.word	0x0800ce65
 800cde8:	0800ce65 	.word	0x0800ce65
 800cdec:	0800ce65 	.word	0x0800ce65
 800cdf0:	0800ce65 	.word	0x0800ce65
 800cdf4:	0800ce65 	.word	0x0800ce65
 800cdf8:	0800ce65 	.word	0x0800ce65
 800cdfc:	0800ce65 	.word	0x0800ce65
 800ce00:	0800ce65 	.word	0x0800ce65
 800ce04:	0800ce65 	.word	0x0800ce65
 800ce08:	0800ce65 	.word	0x0800ce65
 800ce0c:	0800ce65 	.word	0x0800ce65
 800ce10:	0800ce65 	.word	0x0800ce65
 800ce14:	0800ce65 	.word	0x0800ce65
 800ce18:	0800ce65 	.word	0x0800ce65
 800ce1c:	0800ce65 	.word	0x0800ce65
 800ce20:	0800ce65 	.word	0x0800ce65
 800ce24:	0800ce65 	.word	0x0800ce65
 800ce28:	0800ce65 	.word	0x0800ce65
 800ce2c:	0800ce65 	.word	0x0800ce65
 800ce30:	0800ce65 	.word	0x0800ce65
 800ce34:	0800ce65 	.word	0x0800ce65
 800ce38:	0800ce65 	.word	0x0800ce65
 800ce3c:	0800ce65 	.word	0x0800ce65
 800ce40:	0800ce65 	.word	0x0800ce65
 800ce44:	0800ce65 	.word	0x0800ce65
 800ce48:	0800ce65 	.word	0x0800ce65
 800ce4c:	0800ce65 	.word	0x0800ce65
 800ce50:	0800ce65 	.word	0x0800ce65
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce65 	.word	0x0800ce65
 800ce5c:	0800ce65 	.word	0x0800ce65
 800ce60:	0800ce65 	.word	0x0800ce65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce64:	bf00      	nop
  }

  return (USBD_OK);
 800ce66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce7e:	6879      	ldr	r1, [r7, #4]
 800ce80:	4805      	ldr	r0, [pc, #20]	; (800ce98 <CDC_Receive_FS+0x24>)
 800ce82:	f7fe fdba 	bl	800b9fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce86:	4804      	ldr	r0, [pc, #16]	; (800ce98 <CDC_Receive_FS+0x24>)
 800ce88:	f7fe fe00 	bl	800ba8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ce8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20000704 	.word	0x20000704

0800ce9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ceac:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <CDC_Transmit_FS+0x48>)
 800ceae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ceb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e00b      	b.n	800ceda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cec2:	887b      	ldrh	r3, [r7, #2]
 800cec4:	461a      	mov	r2, r3
 800cec6:	6879      	ldr	r1, [r7, #4]
 800cec8:	4806      	ldr	r0, [pc, #24]	; (800cee4 <CDC_Transmit_FS+0x48>)
 800ceca:	f7fe fd78 	bl	800b9be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cece:	4805      	ldr	r0, [pc, #20]	; (800cee4 <CDC_Transmit_FS+0x48>)
 800ced0:	f7fe fdac 	bl	800ba2c <USBD_CDC_TransmitPacket>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	20000704 	.word	0x20000704

0800cee8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cefa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
	...

0800cf0c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	4603      	mov	r3, r0
 800cf14:	6039      	str	r1, [r7, #0]
 800cf16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2212      	movs	r2, #18
 800cf1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cf1e:	4b03      	ldr	r3, [pc, #12]	; (800cf2c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	20000150 	.word	0x20000150

0800cf30 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	6039      	str	r1, [r7, #0]
 800cf3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	2204      	movs	r2, #4
 800cf40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf42:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	20000164 	.word	0x20000164

0800cf54 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4907      	ldr	r1, [pc, #28]	; (800cf88 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cf6a:	4808      	ldr	r0, [pc, #32]	; (800cf8c <USBD_CDC_ProductStrDescriptor+0x38>)
 800cf6c:	f7ff fdf7 	bl	800cb5e <USBD_GetString>
 800cf70:	e004      	b.n	800cf7c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	4904      	ldr	r1, [pc, #16]	; (800cf88 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cf76:	4805      	ldr	r0, [pc, #20]	; (800cf8c <USBD_CDC_ProductStrDescriptor+0x38>)
 800cf78:	f7ff fdf1 	bl	800cb5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf7c:	4b02      	ldr	r3, [pc, #8]	; (800cf88 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	200011d4 	.word	0x200011d4
 800cf8c:	080104ec 	.word	0x080104ec

0800cf90 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	4603      	mov	r3, r0
 800cf98:	6039      	str	r1, [r7, #0]
 800cf9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	4904      	ldr	r1, [pc, #16]	; (800cfb0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cfa0:	4804      	ldr	r0, [pc, #16]	; (800cfb4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cfa2:	f7ff fddc 	bl	800cb5e <USBD_GetString>
  return USBD_StrDesc;
 800cfa6:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	200011d4 	.word	0x200011d4
 800cfb4:	08010504 	.word	0x08010504

0800cfb8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	6039      	str	r1, [r7, #0]
 800cfc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	221a      	movs	r2, #26
 800cfc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfca:	f000 f843 	bl	800d054 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cfce:	4b02      	ldr	r3, [pc, #8]	; (800cfd8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20000168 	.word	0x20000168

0800cfdc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	6039      	str	r1, [r7, #0]
 800cfe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d105      	bne.n	800cffa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	4907      	ldr	r1, [pc, #28]	; (800d010 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cff2:	4808      	ldr	r0, [pc, #32]	; (800d014 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cff4:	f7ff fdb3 	bl	800cb5e <USBD_GetString>
 800cff8:	e004      	b.n	800d004 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	4904      	ldr	r1, [pc, #16]	; (800d010 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cffe:	4805      	ldr	r0, [pc, #20]	; (800d014 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d000:	f7ff fdad 	bl	800cb5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d004:	4b02      	ldr	r3, [pc, #8]	; (800d010 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	200011d4 	.word	0x200011d4
 800d014:	08010518 	.word	0x08010518

0800d018 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4603      	mov	r3, r0
 800d020:	6039      	str	r1, [r7, #0]
 800d022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	4907      	ldr	r1, [pc, #28]	; (800d04c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d02e:	4808      	ldr	r0, [pc, #32]	; (800d050 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d030:	f7ff fd95 	bl	800cb5e <USBD_GetString>
 800d034:	e004      	b.n	800d040 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	4904      	ldr	r1, [pc, #16]	; (800d04c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d03a:	4805      	ldr	r0, [pc, #20]	; (800d050 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d03c:	f7ff fd8f 	bl	800cb5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d040:	4b02      	ldr	r3, [pc, #8]	; (800d04c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	200011d4 	.word	0x200011d4
 800d050:	08010524 	.word	0x08010524

0800d054 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d05a:	4b0f      	ldr	r3, [pc, #60]	; (800d098 <Get_SerialNum+0x44>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d060:	4b0e      	ldr	r3, [pc, #56]	; (800d09c <Get_SerialNum+0x48>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d066:	4b0e      	ldr	r3, [pc, #56]	; (800d0a0 <Get_SerialNum+0x4c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4413      	add	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d009      	beq.n	800d08e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d07a:	2208      	movs	r2, #8
 800d07c:	4909      	ldr	r1, [pc, #36]	; (800d0a4 <Get_SerialNum+0x50>)
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f000 f814 	bl	800d0ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d084:	2204      	movs	r2, #4
 800d086:	4908      	ldr	r1, [pc, #32]	; (800d0a8 <Get_SerialNum+0x54>)
 800d088:	68b8      	ldr	r0, [r7, #8]
 800d08a:	f000 f80f 	bl	800d0ac <IntToUnicode>
  }
}
 800d08e:	bf00      	nop
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	1fff7590 	.word	0x1fff7590
 800d09c:	1fff7594 	.word	0x1fff7594
 800d0a0:	1fff7598 	.word	0x1fff7598
 800d0a4:	2000016a 	.word	0x2000016a
 800d0a8:	2000017a 	.word	0x2000017a

0800d0ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0be:	2300      	movs	r3, #0
 800d0c0:	75fb      	strb	r3, [r7, #23]
 800d0c2:	e027      	b.n	800d114 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	0f1b      	lsrs	r3, r3, #28
 800d0c8:	2b09      	cmp	r3, #9
 800d0ca:	d80b      	bhi.n	800d0e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	0f1b      	lsrs	r3, r3, #28
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	7dfb      	ldrb	r3, [r7, #23]
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	440b      	add	r3, r1
 800d0dc:	3230      	adds	r2, #48	; 0x30
 800d0de:	b2d2      	uxtb	r2, r2
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	e00a      	b.n	800d0fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	0f1b      	lsrs	r3, r3, #28
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	440b      	add	r3, r1
 800d0f4:	3237      	adds	r2, #55	; 0x37
 800d0f6:	b2d2      	uxtb	r2, r2
 800d0f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	011b      	lsls	r3, r3, #4
 800d0fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d100:	7dfb      	ldrb	r3, [r7, #23]
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	3301      	adds	r3, #1
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	4413      	add	r3, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	3301      	adds	r3, #1
 800d112:	75fb      	strb	r3, [r7, #23]
 800d114:	7dfa      	ldrb	r2, [r7, #23]
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d3d3      	bcc.n	800d0c4 <IntToUnicode+0x18>
  }
}
 800d11c:	bf00      	nop
 800d11e:	bf00      	nop
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
	...

0800d12c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b094      	sub	sp, #80	; 0x50
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d134:	f107 030c 	add.w	r3, r7, #12
 800d138:	2244      	movs	r2, #68	; 0x44
 800d13a:	2100      	movs	r1, #0
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 f884 	bl	800e24a <memset>
  if(pcdHandle->Instance==USB)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a15      	ldr	r2, [pc, #84]	; (800d19c <HAL_PCD_MspInit+0x70>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d122      	bne.n	800d192 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d14c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d150:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d152:	2300      	movs	r3, #0
 800d154:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d156:	f107 030c 	add.w	r3, r7, #12
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f9 fa04 	bl	8006568 <HAL_RCCEx_PeriphCLKConfig>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d166:	f7f4 fcf2 	bl	8001b4e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d16a:	4b0d      	ldr	r3, [pc, #52]	; (800d1a0 <HAL_PCD_MspInit+0x74>)
 800d16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d16e:	4a0c      	ldr	r2, [pc, #48]	; (800d1a0 <HAL_PCD_MspInit+0x74>)
 800d170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d174:	6593      	str	r3, [r2, #88]	; 0x58
 800d176:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <HAL_PCD_MspInit+0x74>)
 800d178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d17a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d17e:	60bb      	str	r3, [r7, #8]
 800d180:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	2014      	movs	r0, #20
 800d188:	f7f5 f9a1 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d18c:	2014      	movs	r0, #20
 800d18e:	f7f5 f9b8 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d192:	bf00      	nop
 800d194:	3750      	adds	r7, #80	; 0x50
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	40005c00 	.word	0x40005c00
 800d1a0:	40021000 	.word	0x40021000

0800d1a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	f7fe fd32 	bl	800bc24 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d1c0:	bf00      	nop
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800d1da:	78fa      	ldrb	r2, [r7, #3]
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	440b      	add	r3, r1
 800d1e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f7fe fd6c 	bl	800bcce <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d1f6:	bf00      	nop
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	460b      	mov	r3, r1
 800d208:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800d210:	78fa      	ldrb	r2, [r7, #3]
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	4613      	mov	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4413      	add	r3, r2
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	440b      	add	r3, r1
 800d21e:	3324      	adds	r3, #36	; 0x24
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	78fb      	ldrb	r3, [r7, #3]
 800d224:	4619      	mov	r1, r3
 800d226:	f7fe fdb5 	bl	800bd94 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d22a:	bf00      	nop
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d240:	4618      	mov	r0, r3
 800d242:	f7fe fec9 	bl	800bfd8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d256:	2301      	movs	r3, #1
 800d258:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	795b      	ldrb	r3, [r3, #5]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d001      	beq.n	800d266 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d262:	f7f4 fc74 	bl	8001b4e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d26c:	7bfa      	ldrb	r2, [r7, #15]
 800d26e:	4611      	mov	r1, r2
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fe73 	bl	800bf5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe fe1f 	bl	800bec0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d282:	bf00      	nop
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe fe6e 	bl	800bf7c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	7a5b      	ldrb	r3, [r3, #9]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d005      	beq.n	800d2b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2a8:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <HAL_PCD_SuspendCallback+0x30>)
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	4a03      	ldr	r2, [pc, #12]	; (800d2bc <HAL_PCD_SuspendCallback+0x30>)
 800d2ae:	f043 0306 	orr.w	r3, r3, #6
 800d2b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	e000ed00 	.word	0xe000ed00

0800d2c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	7a5b      	ldrb	r3, [r3, #9]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d007      	beq.n	800d2e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2d0:	4b08      	ldr	r3, [pc, #32]	; (800d2f4 <HAL_PCD_ResumeCallback+0x34>)
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	4a07      	ldr	r2, [pc, #28]	; (800d2f4 <HAL_PCD_ResumeCallback+0x34>)
 800d2d6:	f023 0306 	bic.w	r3, r3, #6
 800d2da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d2dc:	f000 f9f8 	bl	800d6d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fe5e 	bl	800bfa8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	e000ed00 	.word	0xe000ed00

0800d2f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d300:	4a2b      	ldr	r2, [pc, #172]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a29      	ldr	r2, [pc, #164]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d30c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d310:	4b27      	ldr	r3, [pc, #156]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d312:	4a28      	ldr	r2, [pc, #160]	; (800d3b4 <USBD_LL_Init+0xbc>)
 800d314:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d316:	4b26      	ldr	r3, [pc, #152]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d318:	2208      	movs	r2, #8
 800d31a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d31c:	4b24      	ldr	r3, [pc, #144]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d31e:	2202      	movs	r2, #2
 800d320:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d322:	4b23      	ldr	r3, [pc, #140]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d324:	2202      	movs	r2, #2
 800d326:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d328:	4b21      	ldr	r3, [pc, #132]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d32e:	4b20      	ldr	r3, [pc, #128]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d330:	2200      	movs	r2, #0
 800d332:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d334:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d336:	2200      	movs	r2, #0
 800d338:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d33a:	4b1d      	ldr	r3, [pc, #116]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d340:	481b      	ldr	r0, [pc, #108]	; (800d3b0 <USBD_LL_Init+0xb8>)
 800d342:	f7f6 fdfb 	bl	8003f3c <HAL_PCD_Init>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d34c:	f7f4 fbff 	bl	8001b4e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d356:	2318      	movs	r3, #24
 800d358:	2200      	movs	r2, #0
 800d35a:	2100      	movs	r1, #0
 800d35c:	f7f8 fab5 	bl	80058ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d366:	2358      	movs	r3, #88	; 0x58
 800d368:	2200      	movs	r2, #0
 800d36a:	2180      	movs	r1, #128	; 0x80
 800d36c:	f7f8 faad 	bl	80058ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d376:	23c0      	movs	r3, #192	; 0xc0
 800d378:	2200      	movs	r2, #0
 800d37a:	2181      	movs	r1, #129	; 0x81
 800d37c:	f7f8 faa5 	bl	80058ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d386:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d38a:	2200      	movs	r2, #0
 800d38c:	2101      	movs	r1, #1
 800d38e:	f7f8 fa9c 	bl	80058ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d39c:	2200      	movs	r2, #0
 800d39e:	2182      	movs	r1, #130	; 0x82
 800d3a0:	f7f8 fa93 	bl	80058ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	200013d4 	.word	0x200013d4
 800d3b4:	40005c00 	.word	0x40005c00

0800d3b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7f6 fe82 	bl	80040d8 <HAL_PCD_Start>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 f97e 	bl	800d6dc <USBD_Get_USB_Status>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b084      	sub	sp, #16
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	70fb      	strb	r3, [r7, #3]
 800d400:	460b      	mov	r3, r1
 800d402:	70bb      	strb	r3, [r7, #2]
 800d404:	4613      	mov	r3, r2
 800d406:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d416:	78bb      	ldrb	r3, [r7, #2]
 800d418:	883a      	ldrh	r2, [r7, #0]
 800d41a:	78f9      	ldrb	r1, [r7, #3]
 800d41c:	f7f6 ffc9 	bl	80043b2 <HAL_PCD_EP_Open>
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 f958 	bl	800d6dc <USBD_Get_USB_Status>
 800d42c:	4603      	mov	r3, r0
 800d42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d430:	7bbb      	ldrb	r3, [r7, #14]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d454:	78fa      	ldrb	r2, [r7, #3]
 800d456:	4611      	mov	r1, r2
 800d458:	4618      	mov	r0, r3
 800d45a:	f7f7 f807 	bl	800446c <HAL_PCD_EP_Close>
 800d45e:	4603      	mov	r3, r0
 800d460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d462:	7bfb      	ldrb	r3, [r7, #15]
 800d464:	4618      	mov	r0, r3
 800d466:	f000 f939 	bl	800d6dc <USBD_Get_USB_Status>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	460b      	mov	r3, r1
 800d482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7f7 f8b0 	bl	80045fc <HAL_PCD_EP_SetStall>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4a0:	7bfb      	ldrb	r3, [r7, #15]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 f91a 	bl	800d6dc <USBD_Get_USB_Status>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4d0:	78fa      	ldrb	r2, [r7, #3]
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7f7 f8e3 	bl	80046a0 <HAL_PCD_EP_ClrStall>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f000 f8fb 	bl	800d6dc <USBD_Get_USB_Status>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d506:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	da0b      	bge.n	800d528 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d516:	68f9      	ldr	r1, [r7, #12]
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	440b      	add	r3, r1
 800d522:	3312      	adds	r3, #18
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	e00b      	b.n	800d540 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d528:	78fb      	ldrb	r3, [r7, #3]
 800d52a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d52e:	68f9      	ldr	r1, [r7, #12]
 800d530:	4613      	mov	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	440b      	add	r3, r1
 800d53a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800d53e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d540:	4618      	mov	r0, r3
 800d542:	3714      	adds	r7, #20
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d566:	78fa      	ldrb	r2, [r7, #3]
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7f6 fefd 	bl	800436a <HAL_PCD_SetAddress>
 800d570:	4603      	mov	r3, r0
 800d572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 f8b0 	bl	800d6dc <USBD_Get_USB_Status>
 800d57c:	4603      	mov	r3, r0
 800d57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d580:	7bbb      	ldrb	r3, [r7, #14]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b086      	sub	sp, #24
 800d58e:	af00      	add	r7, sp, #0
 800d590:	60f8      	str	r0, [r7, #12]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
 800d596:	460b      	mov	r3, r1
 800d598:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5a8:	7af9      	ldrb	r1, [r7, #11]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	f7f6 ffee 	bl	800458e <HAL_PCD_EP_Transmit>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 f88f 	bl	800d6dc <USBD_Get_USB_Status>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	607a      	str	r2, [r7, #4]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5ea:	7af9      	ldrb	r1, [r7, #11]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	f7f6 ff84 	bl	80044fc <HAL_PCD_EP_Receive>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 f86e 	bl	800d6dc <USBD_Get_USB_Status>
 800d600:	4603      	mov	r3, r0
 800d602:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d604:	7dbb      	ldrb	r3, [r7, #22]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b082      	sub	sp, #8
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	460b      	mov	r3, r1
 800d618:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d620:	78fa      	ldrb	r2, [r7, #3]
 800d622:	4611      	mov	r1, r2
 800d624:	4618      	mov	r0, r3
 800d626:	f7f6 ff9a 	bl	800455e <HAL_PCD_EP_GetRxCount>
 800d62a:	4603      	mov	r3, r0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	460b      	mov	r3, r1
 800d63e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d002      	beq.n	800d64c <HAL_PCDEx_LPM_Callback+0x18>
 800d646:	2b01      	cmp	r3, #1
 800d648:	d013      	beq.n	800d672 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d64a:	e023      	b.n	800d694 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7a5b      	ldrb	r3, [r3, #9]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d007      	beq.n	800d664 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d654:	f000 f83c 	bl	800d6d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d658:	4b10      	ldr	r3, [pc, #64]	; (800d69c <HAL_PCDEx_LPM_Callback+0x68>)
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	4a0f      	ldr	r2, [pc, #60]	; (800d69c <HAL_PCDEx_LPM_Callback+0x68>)
 800d65e:	f023 0306 	bic.w	r3, r3, #6
 800d662:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe fc9c 	bl	800bfa8 <USBD_LL_Resume>
    break;
 800d670:	e010      	b.n	800d694 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe fc7f 	bl	800bf7c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7a5b      	ldrb	r3, [r3, #9]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d005      	beq.n	800d692 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d686:	4b05      	ldr	r3, [pc, #20]	; (800d69c <HAL_PCDEx_LPM_Callback+0x68>)
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	4a04      	ldr	r2, [pc, #16]	; (800d69c <HAL_PCDEx_LPM_Callback+0x68>)
 800d68c:	f043 0306 	orr.w	r3, r3, #6
 800d690:	6113      	str	r3, [r2, #16]
    break;
 800d692:	bf00      	nop
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	e000ed00 	.word	0xe000ed00

0800d6a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d6a8:	4b03      	ldr	r3, [pc, #12]	; (800d6b8 <USBD_static_malloc+0x18>)
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	200016b0 	.word	0x200016b0

0800d6bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]

}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d6d4:	f7f4 f9ee 	bl	8001ab4 <SystemClock_Config>
}
 800d6d8:	bf00      	nop
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d817      	bhi.n	800d720 <USBD_Get_USB_Status+0x44>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <USBD_Get_USB_Status+0x1c>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d709 	.word	0x0800d709
 800d6fc:	0800d70f 	.word	0x0800d70f
 800d700:	0800d715 	.word	0x0800d715
 800d704:	0800d71b 	.word	0x0800d71b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]
    break;
 800d70c:	e00b      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d70e:	2303      	movs	r3, #3
 800d710:	73fb      	strb	r3, [r7, #15]
    break;
 800d712:	e008      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d714:	2301      	movs	r3, #1
 800d716:	73fb      	strb	r3, [r7, #15]
    break;
 800d718:	e005      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d71a:	2303      	movs	r3, #3
 800d71c:	73fb      	strb	r3, [r7, #15]
    break;
 800d71e:	e002      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d720:	2303      	movs	r3, #3
 800d722:	73fb      	strb	r3, [r7, #15]
    break;
 800d724:	bf00      	nop
  }
  return usb_status;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <__cvt>:
 800d734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d738:	ec55 4b10 	vmov	r4, r5, d0
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	460e      	mov	r6, r1
 800d740:	4619      	mov	r1, r3
 800d742:	462b      	mov	r3, r5
 800d744:	bfbb      	ittet	lt
 800d746:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d74a:	461d      	movlt	r5, r3
 800d74c:	2300      	movge	r3, #0
 800d74e:	232d      	movlt	r3, #45	; 0x2d
 800d750:	700b      	strb	r3, [r1, #0]
 800d752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d754:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d758:	4691      	mov	r9, r2
 800d75a:	f023 0820 	bic.w	r8, r3, #32
 800d75e:	bfbc      	itt	lt
 800d760:	4622      	movlt	r2, r4
 800d762:	4614      	movlt	r4, r2
 800d764:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d768:	d005      	beq.n	800d776 <__cvt+0x42>
 800d76a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d76e:	d100      	bne.n	800d772 <__cvt+0x3e>
 800d770:	3601      	adds	r6, #1
 800d772:	2102      	movs	r1, #2
 800d774:	e000      	b.n	800d778 <__cvt+0x44>
 800d776:	2103      	movs	r1, #3
 800d778:	ab03      	add	r3, sp, #12
 800d77a:	9301      	str	r3, [sp, #4]
 800d77c:	ab02      	add	r3, sp, #8
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	ec45 4b10 	vmov	d0, r4, r5
 800d784:	4653      	mov	r3, sl
 800d786:	4632      	mov	r2, r6
 800d788:	f000 fe6a 	bl	800e460 <_dtoa_r>
 800d78c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d790:	4607      	mov	r7, r0
 800d792:	d102      	bne.n	800d79a <__cvt+0x66>
 800d794:	f019 0f01 	tst.w	r9, #1
 800d798:	d022      	beq.n	800d7e0 <__cvt+0xac>
 800d79a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d79e:	eb07 0906 	add.w	r9, r7, r6
 800d7a2:	d110      	bne.n	800d7c6 <__cvt+0x92>
 800d7a4:	783b      	ldrb	r3, [r7, #0]
 800d7a6:	2b30      	cmp	r3, #48	; 0x30
 800d7a8:	d10a      	bne.n	800d7c0 <__cvt+0x8c>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	f7f3 f9b1 	bl	8000b18 <__aeabi_dcmpeq>
 800d7b6:	b918      	cbnz	r0, 800d7c0 <__cvt+0x8c>
 800d7b8:	f1c6 0601 	rsb	r6, r6, #1
 800d7bc:	f8ca 6000 	str.w	r6, [sl]
 800d7c0:	f8da 3000 	ldr.w	r3, [sl]
 800d7c4:	4499      	add	r9, r3
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	f7f3 f9a3 	bl	8000b18 <__aeabi_dcmpeq>
 800d7d2:	b108      	cbz	r0, 800d7d8 <__cvt+0xa4>
 800d7d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7d8:	2230      	movs	r2, #48	; 0x30
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	454b      	cmp	r3, r9
 800d7de:	d307      	bcc.n	800d7f0 <__cvt+0xbc>
 800d7e0:	9b03      	ldr	r3, [sp, #12]
 800d7e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7e4:	1bdb      	subs	r3, r3, r7
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	b004      	add	sp, #16
 800d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f0:	1c59      	adds	r1, r3, #1
 800d7f2:	9103      	str	r1, [sp, #12]
 800d7f4:	701a      	strb	r2, [r3, #0]
 800d7f6:	e7f0      	b.n	800d7da <__cvt+0xa6>

0800d7f8 <__exponent>:
 800d7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2900      	cmp	r1, #0
 800d7fe:	bfb8      	it	lt
 800d800:	4249      	neglt	r1, r1
 800d802:	f803 2b02 	strb.w	r2, [r3], #2
 800d806:	bfb4      	ite	lt
 800d808:	222d      	movlt	r2, #45	; 0x2d
 800d80a:	222b      	movge	r2, #43	; 0x2b
 800d80c:	2909      	cmp	r1, #9
 800d80e:	7042      	strb	r2, [r0, #1]
 800d810:	dd2a      	ble.n	800d868 <__exponent+0x70>
 800d812:	f10d 0207 	add.w	r2, sp, #7
 800d816:	4617      	mov	r7, r2
 800d818:	260a      	movs	r6, #10
 800d81a:	4694      	mov	ip, r2
 800d81c:	fb91 f5f6 	sdiv	r5, r1, r6
 800d820:	fb06 1415 	mls	r4, r6, r5, r1
 800d824:	3430      	adds	r4, #48	; 0x30
 800d826:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d82a:	460c      	mov	r4, r1
 800d82c:	2c63      	cmp	r4, #99	; 0x63
 800d82e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d832:	4629      	mov	r1, r5
 800d834:	dcf1      	bgt.n	800d81a <__exponent+0x22>
 800d836:	3130      	adds	r1, #48	; 0x30
 800d838:	f1ac 0402 	sub.w	r4, ip, #2
 800d83c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d840:	1c41      	adds	r1, r0, #1
 800d842:	4622      	mov	r2, r4
 800d844:	42ba      	cmp	r2, r7
 800d846:	d30a      	bcc.n	800d85e <__exponent+0x66>
 800d848:	f10d 0209 	add.w	r2, sp, #9
 800d84c:	eba2 020c 	sub.w	r2, r2, ip
 800d850:	42bc      	cmp	r4, r7
 800d852:	bf88      	it	hi
 800d854:	2200      	movhi	r2, #0
 800d856:	4413      	add	r3, r2
 800d858:	1a18      	subs	r0, r3, r0
 800d85a:	b003      	add	sp, #12
 800d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d85e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d862:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d866:	e7ed      	b.n	800d844 <__exponent+0x4c>
 800d868:	2330      	movs	r3, #48	; 0x30
 800d86a:	3130      	adds	r1, #48	; 0x30
 800d86c:	7083      	strb	r3, [r0, #2]
 800d86e:	70c1      	strb	r1, [r0, #3]
 800d870:	1d03      	adds	r3, r0, #4
 800d872:	e7f1      	b.n	800d858 <__exponent+0x60>

0800d874 <_printf_float>:
 800d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d878:	ed2d 8b02 	vpush	{d8}
 800d87c:	b08d      	sub	sp, #52	; 0x34
 800d87e:	460c      	mov	r4, r1
 800d880:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d884:	4616      	mov	r6, r2
 800d886:	461f      	mov	r7, r3
 800d888:	4605      	mov	r5, r0
 800d88a:	f000 fce7 	bl	800e25c <_localeconv_r>
 800d88e:	f8d0 a000 	ldr.w	sl, [r0]
 800d892:	4650      	mov	r0, sl
 800d894:	f7f2 fd14 	bl	80002c0 <strlen>
 800d898:	2300      	movs	r3, #0
 800d89a:	930a      	str	r3, [sp, #40]	; 0x28
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	9305      	str	r3, [sp, #20]
 800d8a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d8a8:	3307      	adds	r3, #7
 800d8aa:	f023 0307 	bic.w	r3, r3, #7
 800d8ae:	f103 0208 	add.w	r2, r3, #8
 800d8b2:	f8c8 2000 	str.w	r2, [r8]
 800d8b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8be:	9307      	str	r3, [sp, #28]
 800d8c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8c4:	ee08 0a10 	vmov	s16, r0
 800d8c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d8cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8d0:	4b9e      	ldr	r3, [pc, #632]	; (800db4c <_printf_float+0x2d8>)
 800d8d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8d6:	f7f3 f951 	bl	8000b7c <__aeabi_dcmpun>
 800d8da:	bb88      	cbnz	r0, 800d940 <_printf_float+0xcc>
 800d8dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8e0:	4b9a      	ldr	r3, [pc, #616]	; (800db4c <_printf_float+0x2d8>)
 800d8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8e6:	f7f3 f92b 	bl	8000b40 <__aeabi_dcmple>
 800d8ea:	bb48      	cbnz	r0, 800d940 <_printf_float+0xcc>
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	f7f3 f91a 	bl	8000b2c <__aeabi_dcmplt>
 800d8f8:	b110      	cbz	r0, 800d900 <_printf_float+0x8c>
 800d8fa:	232d      	movs	r3, #45	; 0x2d
 800d8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d900:	4a93      	ldr	r2, [pc, #588]	; (800db50 <_printf_float+0x2dc>)
 800d902:	4b94      	ldr	r3, [pc, #592]	; (800db54 <_printf_float+0x2e0>)
 800d904:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d908:	bf94      	ite	ls
 800d90a:	4690      	movls	r8, r2
 800d90c:	4698      	movhi	r8, r3
 800d90e:	2303      	movs	r3, #3
 800d910:	6123      	str	r3, [r4, #16]
 800d912:	9b05      	ldr	r3, [sp, #20]
 800d914:	f023 0304 	bic.w	r3, r3, #4
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	f04f 0900 	mov.w	r9, #0
 800d91e:	9700      	str	r7, [sp, #0]
 800d920:	4633      	mov	r3, r6
 800d922:	aa0b      	add	r2, sp, #44	; 0x2c
 800d924:	4621      	mov	r1, r4
 800d926:	4628      	mov	r0, r5
 800d928:	f000 f9da 	bl	800dce0 <_printf_common>
 800d92c:	3001      	adds	r0, #1
 800d92e:	f040 8090 	bne.w	800da52 <_printf_float+0x1de>
 800d932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d936:	b00d      	add	sp, #52	; 0x34
 800d938:	ecbd 8b02 	vpop	{d8}
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	4642      	mov	r2, r8
 800d942:	464b      	mov	r3, r9
 800d944:	4640      	mov	r0, r8
 800d946:	4649      	mov	r1, r9
 800d948:	f7f3 f918 	bl	8000b7c <__aeabi_dcmpun>
 800d94c:	b140      	cbz	r0, 800d960 <_printf_float+0xec>
 800d94e:	464b      	mov	r3, r9
 800d950:	2b00      	cmp	r3, #0
 800d952:	bfbc      	itt	lt
 800d954:	232d      	movlt	r3, #45	; 0x2d
 800d956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d95a:	4a7f      	ldr	r2, [pc, #508]	; (800db58 <_printf_float+0x2e4>)
 800d95c:	4b7f      	ldr	r3, [pc, #508]	; (800db5c <_printf_float+0x2e8>)
 800d95e:	e7d1      	b.n	800d904 <_printf_float+0x90>
 800d960:	6863      	ldr	r3, [r4, #4]
 800d962:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d966:	9206      	str	r2, [sp, #24]
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	d13f      	bne.n	800d9ec <_printf_float+0x178>
 800d96c:	2306      	movs	r3, #6
 800d96e:	6063      	str	r3, [r4, #4]
 800d970:	9b05      	ldr	r3, [sp, #20]
 800d972:	6861      	ldr	r1, [r4, #4]
 800d974:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d978:	2300      	movs	r3, #0
 800d97a:	9303      	str	r3, [sp, #12]
 800d97c:	ab0a      	add	r3, sp, #40	; 0x28
 800d97e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d982:	ab09      	add	r3, sp, #36	; 0x24
 800d984:	ec49 8b10 	vmov	d0, r8, r9
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	6022      	str	r2, [r4, #0]
 800d98c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d990:	4628      	mov	r0, r5
 800d992:	f7ff fecf 	bl	800d734 <__cvt>
 800d996:	9b06      	ldr	r3, [sp, #24]
 800d998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d99a:	2b47      	cmp	r3, #71	; 0x47
 800d99c:	4680      	mov	r8, r0
 800d99e:	d108      	bne.n	800d9b2 <_printf_float+0x13e>
 800d9a0:	1cc8      	adds	r0, r1, #3
 800d9a2:	db02      	blt.n	800d9aa <_printf_float+0x136>
 800d9a4:	6863      	ldr	r3, [r4, #4]
 800d9a6:	4299      	cmp	r1, r3
 800d9a8:	dd41      	ble.n	800da2e <_printf_float+0x1ba>
 800d9aa:	f1ab 0302 	sub.w	r3, fp, #2
 800d9ae:	fa5f fb83 	uxtb.w	fp, r3
 800d9b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9b6:	d820      	bhi.n	800d9fa <_printf_float+0x186>
 800d9b8:	3901      	subs	r1, #1
 800d9ba:	465a      	mov	r2, fp
 800d9bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d9c0:	9109      	str	r1, [sp, #36]	; 0x24
 800d9c2:	f7ff ff19 	bl	800d7f8 <__exponent>
 800d9c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9c8:	1813      	adds	r3, r2, r0
 800d9ca:	2a01      	cmp	r2, #1
 800d9cc:	4681      	mov	r9, r0
 800d9ce:	6123      	str	r3, [r4, #16]
 800d9d0:	dc02      	bgt.n	800d9d8 <_printf_float+0x164>
 800d9d2:	6822      	ldr	r2, [r4, #0]
 800d9d4:	07d2      	lsls	r2, r2, #31
 800d9d6:	d501      	bpl.n	800d9dc <_printf_float+0x168>
 800d9d8:	3301      	adds	r3, #1
 800d9da:	6123      	str	r3, [r4, #16]
 800d9dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d09c      	beq.n	800d91e <_printf_float+0xaa>
 800d9e4:	232d      	movs	r3, #45	; 0x2d
 800d9e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9ea:	e798      	b.n	800d91e <_printf_float+0xaa>
 800d9ec:	9a06      	ldr	r2, [sp, #24]
 800d9ee:	2a47      	cmp	r2, #71	; 0x47
 800d9f0:	d1be      	bne.n	800d970 <_printf_float+0xfc>
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1bc      	bne.n	800d970 <_printf_float+0xfc>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e7b9      	b.n	800d96e <_printf_float+0xfa>
 800d9fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d9fe:	d118      	bne.n	800da32 <_printf_float+0x1be>
 800da00:	2900      	cmp	r1, #0
 800da02:	6863      	ldr	r3, [r4, #4]
 800da04:	dd0b      	ble.n	800da1e <_printf_float+0x1aa>
 800da06:	6121      	str	r1, [r4, #16]
 800da08:	b913      	cbnz	r3, 800da10 <_printf_float+0x19c>
 800da0a:	6822      	ldr	r2, [r4, #0]
 800da0c:	07d0      	lsls	r0, r2, #31
 800da0e:	d502      	bpl.n	800da16 <_printf_float+0x1a2>
 800da10:	3301      	adds	r3, #1
 800da12:	440b      	add	r3, r1
 800da14:	6123      	str	r3, [r4, #16]
 800da16:	65a1      	str	r1, [r4, #88]	; 0x58
 800da18:	f04f 0900 	mov.w	r9, #0
 800da1c:	e7de      	b.n	800d9dc <_printf_float+0x168>
 800da1e:	b913      	cbnz	r3, 800da26 <_printf_float+0x1b2>
 800da20:	6822      	ldr	r2, [r4, #0]
 800da22:	07d2      	lsls	r2, r2, #31
 800da24:	d501      	bpl.n	800da2a <_printf_float+0x1b6>
 800da26:	3302      	adds	r3, #2
 800da28:	e7f4      	b.n	800da14 <_printf_float+0x1a0>
 800da2a:	2301      	movs	r3, #1
 800da2c:	e7f2      	b.n	800da14 <_printf_float+0x1a0>
 800da2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da34:	4299      	cmp	r1, r3
 800da36:	db05      	blt.n	800da44 <_printf_float+0x1d0>
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	6121      	str	r1, [r4, #16]
 800da3c:	07d8      	lsls	r0, r3, #31
 800da3e:	d5ea      	bpl.n	800da16 <_printf_float+0x1a2>
 800da40:	1c4b      	adds	r3, r1, #1
 800da42:	e7e7      	b.n	800da14 <_printf_float+0x1a0>
 800da44:	2900      	cmp	r1, #0
 800da46:	bfd4      	ite	le
 800da48:	f1c1 0202 	rsble	r2, r1, #2
 800da4c:	2201      	movgt	r2, #1
 800da4e:	4413      	add	r3, r2
 800da50:	e7e0      	b.n	800da14 <_printf_float+0x1a0>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	055a      	lsls	r2, r3, #21
 800da56:	d407      	bmi.n	800da68 <_printf_float+0x1f4>
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	4642      	mov	r2, r8
 800da5c:	4631      	mov	r1, r6
 800da5e:	4628      	mov	r0, r5
 800da60:	47b8      	blx	r7
 800da62:	3001      	adds	r0, #1
 800da64:	d12c      	bne.n	800dac0 <_printf_float+0x24c>
 800da66:	e764      	b.n	800d932 <_printf_float+0xbe>
 800da68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da6c:	f240 80e0 	bls.w	800dc30 <_printf_float+0x3bc>
 800da70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da74:	2200      	movs	r2, #0
 800da76:	2300      	movs	r3, #0
 800da78:	f7f3 f84e 	bl	8000b18 <__aeabi_dcmpeq>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d034      	beq.n	800daea <_printf_float+0x276>
 800da80:	4a37      	ldr	r2, [pc, #220]	; (800db60 <_printf_float+0x2ec>)
 800da82:	2301      	movs	r3, #1
 800da84:	4631      	mov	r1, r6
 800da86:	4628      	mov	r0, r5
 800da88:	47b8      	blx	r7
 800da8a:	3001      	adds	r0, #1
 800da8c:	f43f af51 	beq.w	800d932 <_printf_float+0xbe>
 800da90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da94:	429a      	cmp	r2, r3
 800da96:	db02      	blt.n	800da9e <_printf_float+0x22a>
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	07d8      	lsls	r0, r3, #31
 800da9c:	d510      	bpl.n	800dac0 <_printf_float+0x24c>
 800da9e:	ee18 3a10 	vmov	r3, s16
 800daa2:	4652      	mov	r2, sl
 800daa4:	4631      	mov	r1, r6
 800daa6:	4628      	mov	r0, r5
 800daa8:	47b8      	blx	r7
 800daaa:	3001      	adds	r0, #1
 800daac:	f43f af41 	beq.w	800d932 <_printf_float+0xbe>
 800dab0:	f04f 0800 	mov.w	r8, #0
 800dab4:	f104 091a 	add.w	r9, r4, #26
 800dab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daba:	3b01      	subs	r3, #1
 800dabc:	4543      	cmp	r3, r8
 800dabe:	dc09      	bgt.n	800dad4 <_printf_float+0x260>
 800dac0:	6823      	ldr	r3, [r4, #0]
 800dac2:	079b      	lsls	r3, r3, #30
 800dac4:	f100 8107 	bmi.w	800dcd6 <_printf_float+0x462>
 800dac8:	68e0      	ldr	r0, [r4, #12]
 800daca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dacc:	4298      	cmp	r0, r3
 800dace:	bfb8      	it	lt
 800dad0:	4618      	movlt	r0, r3
 800dad2:	e730      	b.n	800d936 <_printf_float+0xc2>
 800dad4:	2301      	movs	r3, #1
 800dad6:	464a      	mov	r2, r9
 800dad8:	4631      	mov	r1, r6
 800dada:	4628      	mov	r0, r5
 800dadc:	47b8      	blx	r7
 800dade:	3001      	adds	r0, #1
 800dae0:	f43f af27 	beq.w	800d932 <_printf_float+0xbe>
 800dae4:	f108 0801 	add.w	r8, r8, #1
 800dae8:	e7e6      	b.n	800dab8 <_printf_float+0x244>
 800daea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daec:	2b00      	cmp	r3, #0
 800daee:	dc39      	bgt.n	800db64 <_printf_float+0x2f0>
 800daf0:	4a1b      	ldr	r2, [pc, #108]	; (800db60 <_printf_float+0x2ec>)
 800daf2:	2301      	movs	r3, #1
 800daf4:	4631      	mov	r1, r6
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b8      	blx	r7
 800dafa:	3001      	adds	r0, #1
 800dafc:	f43f af19 	beq.w	800d932 <_printf_float+0xbe>
 800db00:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800db04:	4313      	orrs	r3, r2
 800db06:	d102      	bne.n	800db0e <_printf_float+0x29a>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	07d9      	lsls	r1, r3, #31
 800db0c:	d5d8      	bpl.n	800dac0 <_printf_float+0x24c>
 800db0e:	ee18 3a10 	vmov	r3, s16
 800db12:	4652      	mov	r2, sl
 800db14:	4631      	mov	r1, r6
 800db16:	4628      	mov	r0, r5
 800db18:	47b8      	blx	r7
 800db1a:	3001      	adds	r0, #1
 800db1c:	f43f af09 	beq.w	800d932 <_printf_float+0xbe>
 800db20:	f04f 0900 	mov.w	r9, #0
 800db24:	f104 0a1a 	add.w	sl, r4, #26
 800db28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2a:	425b      	negs	r3, r3
 800db2c:	454b      	cmp	r3, r9
 800db2e:	dc01      	bgt.n	800db34 <_printf_float+0x2c0>
 800db30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db32:	e792      	b.n	800da5a <_printf_float+0x1e6>
 800db34:	2301      	movs	r3, #1
 800db36:	4652      	mov	r2, sl
 800db38:	4631      	mov	r1, r6
 800db3a:	4628      	mov	r0, r5
 800db3c:	47b8      	blx	r7
 800db3e:	3001      	adds	r0, #1
 800db40:	f43f aef7 	beq.w	800d932 <_printf_float+0xbe>
 800db44:	f109 0901 	add.w	r9, r9, #1
 800db48:	e7ee      	b.n	800db28 <_printf_float+0x2b4>
 800db4a:	bf00      	nop
 800db4c:	7fefffff 	.word	0x7fefffff
 800db50:	08010574 	.word	0x08010574
 800db54:	08010578 	.word	0x08010578
 800db58:	0801057c 	.word	0x0801057c
 800db5c:	08010580 	.word	0x08010580
 800db60:	08010584 	.word	0x08010584
 800db64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db68:	429a      	cmp	r2, r3
 800db6a:	bfa8      	it	ge
 800db6c:	461a      	movge	r2, r3
 800db6e:	2a00      	cmp	r2, #0
 800db70:	4691      	mov	r9, r2
 800db72:	dc37      	bgt.n	800dbe4 <_printf_float+0x370>
 800db74:	f04f 0b00 	mov.w	fp, #0
 800db78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db7c:	f104 021a 	add.w	r2, r4, #26
 800db80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db82:	9305      	str	r3, [sp, #20]
 800db84:	eba3 0309 	sub.w	r3, r3, r9
 800db88:	455b      	cmp	r3, fp
 800db8a:	dc33      	bgt.n	800dbf4 <_printf_float+0x380>
 800db8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db90:	429a      	cmp	r2, r3
 800db92:	db3b      	blt.n	800dc0c <_printf_float+0x398>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	07da      	lsls	r2, r3, #31
 800db98:	d438      	bmi.n	800dc0c <_printf_float+0x398>
 800db9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800db9e:	eba2 0903 	sub.w	r9, r2, r3
 800dba2:	9b05      	ldr	r3, [sp, #20]
 800dba4:	1ad2      	subs	r2, r2, r3
 800dba6:	4591      	cmp	r9, r2
 800dba8:	bfa8      	it	ge
 800dbaa:	4691      	movge	r9, r2
 800dbac:	f1b9 0f00 	cmp.w	r9, #0
 800dbb0:	dc35      	bgt.n	800dc1e <_printf_float+0x3aa>
 800dbb2:	f04f 0800 	mov.w	r8, #0
 800dbb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbba:	f104 0a1a 	add.w	sl, r4, #26
 800dbbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbc2:	1a9b      	subs	r3, r3, r2
 800dbc4:	eba3 0309 	sub.w	r3, r3, r9
 800dbc8:	4543      	cmp	r3, r8
 800dbca:	f77f af79 	ble.w	800dac0 <_printf_float+0x24c>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4652      	mov	r2, sl
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	f43f aeaa 	beq.w	800d932 <_printf_float+0xbe>
 800dbde:	f108 0801 	add.w	r8, r8, #1
 800dbe2:	e7ec      	b.n	800dbbe <_printf_float+0x34a>
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	4642      	mov	r2, r8
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d1c0      	bne.n	800db74 <_printf_float+0x300>
 800dbf2:	e69e      	b.n	800d932 <_printf_float+0xbe>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	4631      	mov	r1, r6
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	9205      	str	r2, [sp, #20]
 800dbfc:	47b8      	blx	r7
 800dbfe:	3001      	adds	r0, #1
 800dc00:	f43f ae97 	beq.w	800d932 <_printf_float+0xbe>
 800dc04:	9a05      	ldr	r2, [sp, #20]
 800dc06:	f10b 0b01 	add.w	fp, fp, #1
 800dc0a:	e7b9      	b.n	800db80 <_printf_float+0x30c>
 800dc0c:	ee18 3a10 	vmov	r3, s16
 800dc10:	4652      	mov	r2, sl
 800dc12:	4631      	mov	r1, r6
 800dc14:	4628      	mov	r0, r5
 800dc16:	47b8      	blx	r7
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d1be      	bne.n	800db9a <_printf_float+0x326>
 800dc1c:	e689      	b.n	800d932 <_printf_float+0xbe>
 800dc1e:	9a05      	ldr	r2, [sp, #20]
 800dc20:	464b      	mov	r3, r9
 800dc22:	4442      	add	r2, r8
 800dc24:	4631      	mov	r1, r6
 800dc26:	4628      	mov	r0, r5
 800dc28:	47b8      	blx	r7
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	d1c1      	bne.n	800dbb2 <_printf_float+0x33e>
 800dc2e:	e680      	b.n	800d932 <_printf_float+0xbe>
 800dc30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc32:	2a01      	cmp	r2, #1
 800dc34:	dc01      	bgt.n	800dc3a <_printf_float+0x3c6>
 800dc36:	07db      	lsls	r3, r3, #31
 800dc38:	d53a      	bpl.n	800dcb0 <_printf_float+0x43c>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	4642      	mov	r2, r8
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4628      	mov	r0, r5
 800dc42:	47b8      	blx	r7
 800dc44:	3001      	adds	r0, #1
 800dc46:	f43f ae74 	beq.w	800d932 <_printf_float+0xbe>
 800dc4a:	ee18 3a10 	vmov	r3, s16
 800dc4e:	4652      	mov	r2, sl
 800dc50:	4631      	mov	r1, r6
 800dc52:	4628      	mov	r0, r5
 800dc54:	47b8      	blx	r7
 800dc56:	3001      	adds	r0, #1
 800dc58:	f43f ae6b 	beq.w	800d932 <_printf_float+0xbe>
 800dc5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc60:	2200      	movs	r2, #0
 800dc62:	2300      	movs	r3, #0
 800dc64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dc68:	f7f2 ff56 	bl	8000b18 <__aeabi_dcmpeq>
 800dc6c:	b9d8      	cbnz	r0, 800dca6 <_printf_float+0x432>
 800dc6e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800dc72:	f108 0201 	add.w	r2, r8, #1
 800dc76:	4631      	mov	r1, r6
 800dc78:	4628      	mov	r0, r5
 800dc7a:	47b8      	blx	r7
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	d10e      	bne.n	800dc9e <_printf_float+0x42a>
 800dc80:	e657      	b.n	800d932 <_printf_float+0xbe>
 800dc82:	2301      	movs	r3, #1
 800dc84:	4652      	mov	r2, sl
 800dc86:	4631      	mov	r1, r6
 800dc88:	4628      	mov	r0, r5
 800dc8a:	47b8      	blx	r7
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	f43f ae50 	beq.w	800d932 <_printf_float+0xbe>
 800dc92:	f108 0801 	add.w	r8, r8, #1
 800dc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc98:	3b01      	subs	r3, #1
 800dc9a:	4543      	cmp	r3, r8
 800dc9c:	dcf1      	bgt.n	800dc82 <_printf_float+0x40e>
 800dc9e:	464b      	mov	r3, r9
 800dca0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dca4:	e6da      	b.n	800da5c <_printf_float+0x1e8>
 800dca6:	f04f 0800 	mov.w	r8, #0
 800dcaa:	f104 0a1a 	add.w	sl, r4, #26
 800dcae:	e7f2      	b.n	800dc96 <_printf_float+0x422>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4642      	mov	r2, r8
 800dcb4:	e7df      	b.n	800dc76 <_printf_float+0x402>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	464a      	mov	r2, r9
 800dcba:	4631      	mov	r1, r6
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	47b8      	blx	r7
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	f43f ae36 	beq.w	800d932 <_printf_float+0xbe>
 800dcc6:	f108 0801 	add.w	r8, r8, #1
 800dcca:	68e3      	ldr	r3, [r4, #12]
 800dccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcce:	1a5b      	subs	r3, r3, r1
 800dcd0:	4543      	cmp	r3, r8
 800dcd2:	dcf0      	bgt.n	800dcb6 <_printf_float+0x442>
 800dcd4:	e6f8      	b.n	800dac8 <_printf_float+0x254>
 800dcd6:	f04f 0800 	mov.w	r8, #0
 800dcda:	f104 0919 	add.w	r9, r4, #25
 800dcde:	e7f4      	b.n	800dcca <_printf_float+0x456>

0800dce0 <_printf_common>:
 800dce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce4:	4616      	mov	r6, r2
 800dce6:	4699      	mov	r9, r3
 800dce8:	688a      	ldr	r2, [r1, #8]
 800dcea:	690b      	ldr	r3, [r1, #16]
 800dcec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	bfb8      	it	lt
 800dcf4:	4613      	movlt	r3, r2
 800dcf6:	6033      	str	r3, [r6, #0]
 800dcf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcfc:	4607      	mov	r7, r0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	b10a      	cbz	r2, 800dd06 <_printf_common+0x26>
 800dd02:	3301      	adds	r3, #1
 800dd04:	6033      	str	r3, [r6, #0]
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	0699      	lsls	r1, r3, #26
 800dd0a:	bf42      	ittt	mi
 800dd0c:	6833      	ldrmi	r3, [r6, #0]
 800dd0e:	3302      	addmi	r3, #2
 800dd10:	6033      	strmi	r3, [r6, #0]
 800dd12:	6825      	ldr	r5, [r4, #0]
 800dd14:	f015 0506 	ands.w	r5, r5, #6
 800dd18:	d106      	bne.n	800dd28 <_printf_common+0x48>
 800dd1a:	f104 0a19 	add.w	sl, r4, #25
 800dd1e:	68e3      	ldr	r3, [r4, #12]
 800dd20:	6832      	ldr	r2, [r6, #0]
 800dd22:	1a9b      	subs	r3, r3, r2
 800dd24:	42ab      	cmp	r3, r5
 800dd26:	dc26      	bgt.n	800dd76 <_printf_common+0x96>
 800dd28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd2c:	1e13      	subs	r3, r2, #0
 800dd2e:	6822      	ldr	r2, [r4, #0]
 800dd30:	bf18      	it	ne
 800dd32:	2301      	movne	r3, #1
 800dd34:	0692      	lsls	r2, r2, #26
 800dd36:	d42b      	bmi.n	800dd90 <_printf_common+0xb0>
 800dd38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	4638      	mov	r0, r7
 800dd40:	47c0      	blx	r8
 800dd42:	3001      	adds	r0, #1
 800dd44:	d01e      	beq.n	800dd84 <_printf_common+0xa4>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	6922      	ldr	r2, [r4, #16]
 800dd4a:	f003 0306 	and.w	r3, r3, #6
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	bf02      	ittt	eq
 800dd52:	68e5      	ldreq	r5, [r4, #12]
 800dd54:	6833      	ldreq	r3, [r6, #0]
 800dd56:	1aed      	subeq	r5, r5, r3
 800dd58:	68a3      	ldr	r3, [r4, #8]
 800dd5a:	bf0c      	ite	eq
 800dd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd60:	2500      	movne	r5, #0
 800dd62:	4293      	cmp	r3, r2
 800dd64:	bfc4      	itt	gt
 800dd66:	1a9b      	subgt	r3, r3, r2
 800dd68:	18ed      	addgt	r5, r5, r3
 800dd6a:	2600      	movs	r6, #0
 800dd6c:	341a      	adds	r4, #26
 800dd6e:	42b5      	cmp	r5, r6
 800dd70:	d11a      	bne.n	800dda8 <_printf_common+0xc8>
 800dd72:	2000      	movs	r0, #0
 800dd74:	e008      	b.n	800dd88 <_printf_common+0xa8>
 800dd76:	2301      	movs	r3, #1
 800dd78:	4652      	mov	r2, sl
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	47c0      	blx	r8
 800dd80:	3001      	adds	r0, #1
 800dd82:	d103      	bne.n	800dd8c <_printf_common+0xac>
 800dd84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8c:	3501      	adds	r5, #1
 800dd8e:	e7c6      	b.n	800dd1e <_printf_common+0x3e>
 800dd90:	18e1      	adds	r1, r4, r3
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	2030      	movs	r0, #48	; 0x30
 800dd96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd9a:	4422      	add	r2, r4
 800dd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dda0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dda4:	3302      	adds	r3, #2
 800dda6:	e7c7      	b.n	800dd38 <_printf_common+0x58>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4622      	mov	r2, r4
 800ddac:	4649      	mov	r1, r9
 800ddae:	4638      	mov	r0, r7
 800ddb0:	47c0      	blx	r8
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	d0e6      	beq.n	800dd84 <_printf_common+0xa4>
 800ddb6:	3601      	adds	r6, #1
 800ddb8:	e7d9      	b.n	800dd6e <_printf_common+0x8e>
	...

0800ddbc <_printf_i>:
 800ddbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	7e0f      	ldrb	r7, [r1, #24]
 800ddc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddc4:	2f78      	cmp	r7, #120	; 0x78
 800ddc6:	4691      	mov	r9, r2
 800ddc8:	4680      	mov	r8, r0
 800ddca:	460c      	mov	r4, r1
 800ddcc:	469a      	mov	sl, r3
 800ddce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddd2:	d807      	bhi.n	800dde4 <_printf_i+0x28>
 800ddd4:	2f62      	cmp	r7, #98	; 0x62
 800ddd6:	d80a      	bhi.n	800ddee <_printf_i+0x32>
 800ddd8:	2f00      	cmp	r7, #0
 800ddda:	f000 80d4 	beq.w	800df86 <_printf_i+0x1ca>
 800ddde:	2f58      	cmp	r7, #88	; 0x58
 800dde0:	f000 80c0 	beq.w	800df64 <_printf_i+0x1a8>
 800dde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dde8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ddec:	e03a      	b.n	800de64 <_printf_i+0xa8>
 800ddee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddf2:	2b15      	cmp	r3, #21
 800ddf4:	d8f6      	bhi.n	800dde4 <_printf_i+0x28>
 800ddf6:	a101      	add	r1, pc, #4	; (adr r1, 800ddfc <_printf_i+0x40>)
 800ddf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddfc:	0800de55 	.word	0x0800de55
 800de00:	0800de69 	.word	0x0800de69
 800de04:	0800dde5 	.word	0x0800dde5
 800de08:	0800dde5 	.word	0x0800dde5
 800de0c:	0800dde5 	.word	0x0800dde5
 800de10:	0800dde5 	.word	0x0800dde5
 800de14:	0800de69 	.word	0x0800de69
 800de18:	0800dde5 	.word	0x0800dde5
 800de1c:	0800dde5 	.word	0x0800dde5
 800de20:	0800dde5 	.word	0x0800dde5
 800de24:	0800dde5 	.word	0x0800dde5
 800de28:	0800df6d 	.word	0x0800df6d
 800de2c:	0800de95 	.word	0x0800de95
 800de30:	0800df27 	.word	0x0800df27
 800de34:	0800dde5 	.word	0x0800dde5
 800de38:	0800dde5 	.word	0x0800dde5
 800de3c:	0800df8f 	.word	0x0800df8f
 800de40:	0800dde5 	.word	0x0800dde5
 800de44:	0800de95 	.word	0x0800de95
 800de48:	0800dde5 	.word	0x0800dde5
 800de4c:	0800dde5 	.word	0x0800dde5
 800de50:	0800df2f 	.word	0x0800df2f
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	1d1a      	adds	r2, r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	602a      	str	r2, [r5, #0]
 800de5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de64:	2301      	movs	r3, #1
 800de66:	e09f      	b.n	800dfa8 <_printf_i+0x1ec>
 800de68:	6820      	ldr	r0, [r4, #0]
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	0607      	lsls	r7, r0, #24
 800de6e:	f103 0104 	add.w	r1, r3, #4
 800de72:	6029      	str	r1, [r5, #0]
 800de74:	d501      	bpl.n	800de7a <_printf_i+0xbe>
 800de76:	681e      	ldr	r6, [r3, #0]
 800de78:	e003      	b.n	800de82 <_printf_i+0xc6>
 800de7a:	0646      	lsls	r6, r0, #25
 800de7c:	d5fb      	bpl.n	800de76 <_printf_i+0xba>
 800de7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de82:	2e00      	cmp	r6, #0
 800de84:	da03      	bge.n	800de8e <_printf_i+0xd2>
 800de86:	232d      	movs	r3, #45	; 0x2d
 800de88:	4276      	negs	r6, r6
 800de8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de8e:	485a      	ldr	r0, [pc, #360]	; (800dff8 <_printf_i+0x23c>)
 800de90:	230a      	movs	r3, #10
 800de92:	e012      	b.n	800deba <_printf_i+0xfe>
 800de94:	682b      	ldr	r3, [r5, #0]
 800de96:	6820      	ldr	r0, [r4, #0]
 800de98:	1d19      	adds	r1, r3, #4
 800de9a:	6029      	str	r1, [r5, #0]
 800de9c:	0605      	lsls	r5, r0, #24
 800de9e:	d501      	bpl.n	800dea4 <_printf_i+0xe8>
 800dea0:	681e      	ldr	r6, [r3, #0]
 800dea2:	e002      	b.n	800deaa <_printf_i+0xee>
 800dea4:	0641      	lsls	r1, r0, #25
 800dea6:	d5fb      	bpl.n	800dea0 <_printf_i+0xe4>
 800dea8:	881e      	ldrh	r6, [r3, #0]
 800deaa:	4853      	ldr	r0, [pc, #332]	; (800dff8 <_printf_i+0x23c>)
 800deac:	2f6f      	cmp	r7, #111	; 0x6f
 800deae:	bf0c      	ite	eq
 800deb0:	2308      	moveq	r3, #8
 800deb2:	230a      	movne	r3, #10
 800deb4:	2100      	movs	r1, #0
 800deb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deba:	6865      	ldr	r5, [r4, #4]
 800debc:	60a5      	str	r5, [r4, #8]
 800debe:	2d00      	cmp	r5, #0
 800dec0:	bfa2      	ittt	ge
 800dec2:	6821      	ldrge	r1, [r4, #0]
 800dec4:	f021 0104 	bicge.w	r1, r1, #4
 800dec8:	6021      	strge	r1, [r4, #0]
 800deca:	b90e      	cbnz	r6, 800ded0 <_printf_i+0x114>
 800decc:	2d00      	cmp	r5, #0
 800dece:	d04b      	beq.n	800df68 <_printf_i+0x1ac>
 800ded0:	4615      	mov	r5, r2
 800ded2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ded6:	fb03 6711 	mls	r7, r3, r1, r6
 800deda:	5dc7      	ldrb	r7, [r0, r7]
 800dedc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dee0:	4637      	mov	r7, r6
 800dee2:	42bb      	cmp	r3, r7
 800dee4:	460e      	mov	r6, r1
 800dee6:	d9f4      	bls.n	800ded2 <_printf_i+0x116>
 800dee8:	2b08      	cmp	r3, #8
 800deea:	d10b      	bne.n	800df04 <_printf_i+0x148>
 800deec:	6823      	ldr	r3, [r4, #0]
 800deee:	07de      	lsls	r6, r3, #31
 800def0:	d508      	bpl.n	800df04 <_printf_i+0x148>
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	6861      	ldr	r1, [r4, #4]
 800def6:	4299      	cmp	r1, r3
 800def8:	bfde      	ittt	le
 800defa:	2330      	movle	r3, #48	; 0x30
 800defc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800df04:	1b52      	subs	r2, r2, r5
 800df06:	6122      	str	r2, [r4, #16]
 800df08:	f8cd a000 	str.w	sl, [sp]
 800df0c:	464b      	mov	r3, r9
 800df0e:	aa03      	add	r2, sp, #12
 800df10:	4621      	mov	r1, r4
 800df12:	4640      	mov	r0, r8
 800df14:	f7ff fee4 	bl	800dce0 <_printf_common>
 800df18:	3001      	adds	r0, #1
 800df1a:	d14a      	bne.n	800dfb2 <_printf_i+0x1f6>
 800df1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df20:	b004      	add	sp, #16
 800df22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	f043 0320 	orr.w	r3, r3, #32
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	4833      	ldr	r0, [pc, #204]	; (800dffc <_printf_i+0x240>)
 800df30:	2778      	movs	r7, #120	; 0x78
 800df32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	6829      	ldr	r1, [r5, #0]
 800df3a:	061f      	lsls	r7, r3, #24
 800df3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800df40:	d402      	bmi.n	800df48 <_printf_i+0x18c>
 800df42:	065f      	lsls	r7, r3, #25
 800df44:	bf48      	it	mi
 800df46:	b2b6      	uxthmi	r6, r6
 800df48:	07df      	lsls	r7, r3, #31
 800df4a:	bf48      	it	mi
 800df4c:	f043 0320 	orrmi.w	r3, r3, #32
 800df50:	6029      	str	r1, [r5, #0]
 800df52:	bf48      	it	mi
 800df54:	6023      	strmi	r3, [r4, #0]
 800df56:	b91e      	cbnz	r6, 800df60 <_printf_i+0x1a4>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	f023 0320 	bic.w	r3, r3, #32
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	2310      	movs	r3, #16
 800df62:	e7a7      	b.n	800deb4 <_printf_i+0xf8>
 800df64:	4824      	ldr	r0, [pc, #144]	; (800dff8 <_printf_i+0x23c>)
 800df66:	e7e4      	b.n	800df32 <_printf_i+0x176>
 800df68:	4615      	mov	r5, r2
 800df6a:	e7bd      	b.n	800dee8 <_printf_i+0x12c>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	6826      	ldr	r6, [r4, #0]
 800df70:	6961      	ldr	r1, [r4, #20]
 800df72:	1d18      	adds	r0, r3, #4
 800df74:	6028      	str	r0, [r5, #0]
 800df76:	0635      	lsls	r5, r6, #24
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	d501      	bpl.n	800df80 <_printf_i+0x1c4>
 800df7c:	6019      	str	r1, [r3, #0]
 800df7e:	e002      	b.n	800df86 <_printf_i+0x1ca>
 800df80:	0670      	lsls	r0, r6, #25
 800df82:	d5fb      	bpl.n	800df7c <_printf_i+0x1c0>
 800df84:	8019      	strh	r1, [r3, #0]
 800df86:	2300      	movs	r3, #0
 800df88:	6123      	str	r3, [r4, #16]
 800df8a:	4615      	mov	r5, r2
 800df8c:	e7bc      	b.n	800df08 <_printf_i+0x14c>
 800df8e:	682b      	ldr	r3, [r5, #0]
 800df90:	1d1a      	adds	r2, r3, #4
 800df92:	602a      	str	r2, [r5, #0]
 800df94:	681d      	ldr	r5, [r3, #0]
 800df96:	6862      	ldr	r2, [r4, #4]
 800df98:	2100      	movs	r1, #0
 800df9a:	4628      	mov	r0, r5
 800df9c:	f7f2 f940 	bl	8000220 <memchr>
 800dfa0:	b108      	cbz	r0, 800dfa6 <_printf_i+0x1ea>
 800dfa2:	1b40      	subs	r0, r0, r5
 800dfa4:	6060      	str	r0, [r4, #4]
 800dfa6:	6863      	ldr	r3, [r4, #4]
 800dfa8:	6123      	str	r3, [r4, #16]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfb0:	e7aa      	b.n	800df08 <_printf_i+0x14c>
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	4640      	mov	r0, r8
 800dfba:	47d0      	blx	sl
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	d0ad      	beq.n	800df1c <_printf_i+0x160>
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	079b      	lsls	r3, r3, #30
 800dfc4:	d413      	bmi.n	800dfee <_printf_i+0x232>
 800dfc6:	68e0      	ldr	r0, [r4, #12]
 800dfc8:	9b03      	ldr	r3, [sp, #12]
 800dfca:	4298      	cmp	r0, r3
 800dfcc:	bfb8      	it	lt
 800dfce:	4618      	movlt	r0, r3
 800dfd0:	e7a6      	b.n	800df20 <_printf_i+0x164>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	4640      	mov	r0, r8
 800dfda:	47d0      	blx	sl
 800dfdc:	3001      	adds	r0, #1
 800dfde:	d09d      	beq.n	800df1c <_printf_i+0x160>
 800dfe0:	3501      	adds	r5, #1
 800dfe2:	68e3      	ldr	r3, [r4, #12]
 800dfe4:	9903      	ldr	r1, [sp, #12]
 800dfe6:	1a5b      	subs	r3, r3, r1
 800dfe8:	42ab      	cmp	r3, r5
 800dfea:	dcf2      	bgt.n	800dfd2 <_printf_i+0x216>
 800dfec:	e7eb      	b.n	800dfc6 <_printf_i+0x20a>
 800dfee:	2500      	movs	r5, #0
 800dff0:	f104 0619 	add.w	r6, r4, #25
 800dff4:	e7f5      	b.n	800dfe2 <_printf_i+0x226>
 800dff6:	bf00      	nop
 800dff8:	08010586 	.word	0x08010586
 800dffc:	08010597 	.word	0x08010597

0800e000 <std>:
 800e000:	2300      	movs	r3, #0
 800e002:	b510      	push	{r4, lr}
 800e004:	4604      	mov	r4, r0
 800e006:	e9c0 3300 	strd	r3, r3, [r0]
 800e00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e00e:	6083      	str	r3, [r0, #8]
 800e010:	8181      	strh	r1, [r0, #12]
 800e012:	6643      	str	r3, [r0, #100]	; 0x64
 800e014:	81c2      	strh	r2, [r0, #14]
 800e016:	6183      	str	r3, [r0, #24]
 800e018:	4619      	mov	r1, r3
 800e01a:	2208      	movs	r2, #8
 800e01c:	305c      	adds	r0, #92	; 0x5c
 800e01e:	f000 f914 	bl	800e24a <memset>
 800e022:	4b0d      	ldr	r3, [pc, #52]	; (800e058 <std+0x58>)
 800e024:	6263      	str	r3, [r4, #36]	; 0x24
 800e026:	4b0d      	ldr	r3, [pc, #52]	; (800e05c <std+0x5c>)
 800e028:	62a3      	str	r3, [r4, #40]	; 0x28
 800e02a:	4b0d      	ldr	r3, [pc, #52]	; (800e060 <std+0x60>)
 800e02c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e02e:	4b0d      	ldr	r3, [pc, #52]	; (800e064 <std+0x64>)
 800e030:	6323      	str	r3, [r4, #48]	; 0x30
 800e032:	4b0d      	ldr	r3, [pc, #52]	; (800e068 <std+0x68>)
 800e034:	6224      	str	r4, [r4, #32]
 800e036:	429c      	cmp	r4, r3
 800e038:	d006      	beq.n	800e048 <std+0x48>
 800e03a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e03e:	4294      	cmp	r4, r2
 800e040:	d002      	beq.n	800e048 <std+0x48>
 800e042:	33d0      	adds	r3, #208	; 0xd0
 800e044:	429c      	cmp	r4, r3
 800e046:	d105      	bne.n	800e054 <std+0x54>
 800e048:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e050:	f000 b978 	b.w	800e344 <__retarget_lock_init_recursive>
 800e054:	bd10      	pop	{r4, pc}
 800e056:	bf00      	nop
 800e058:	0800e1c5 	.word	0x0800e1c5
 800e05c:	0800e1e7 	.word	0x0800e1e7
 800e060:	0800e21f 	.word	0x0800e21f
 800e064:	0800e243 	.word	0x0800e243
 800e068:	200018d0 	.word	0x200018d0

0800e06c <stdio_exit_handler>:
 800e06c:	4a02      	ldr	r2, [pc, #8]	; (800e078 <stdio_exit_handler+0xc>)
 800e06e:	4903      	ldr	r1, [pc, #12]	; (800e07c <stdio_exit_handler+0x10>)
 800e070:	4803      	ldr	r0, [pc, #12]	; (800e080 <stdio_exit_handler+0x14>)
 800e072:	f000 b869 	b.w	800e148 <_fwalk_sglue>
 800e076:	bf00      	nop
 800e078:	20000184 	.word	0x20000184
 800e07c:	0800fcf9 	.word	0x0800fcf9
 800e080:	20000190 	.word	0x20000190

0800e084 <cleanup_stdio>:
 800e084:	6841      	ldr	r1, [r0, #4]
 800e086:	4b0c      	ldr	r3, [pc, #48]	; (800e0b8 <cleanup_stdio+0x34>)
 800e088:	4299      	cmp	r1, r3
 800e08a:	b510      	push	{r4, lr}
 800e08c:	4604      	mov	r4, r0
 800e08e:	d001      	beq.n	800e094 <cleanup_stdio+0x10>
 800e090:	f001 fe32 	bl	800fcf8 <_fflush_r>
 800e094:	68a1      	ldr	r1, [r4, #8]
 800e096:	4b09      	ldr	r3, [pc, #36]	; (800e0bc <cleanup_stdio+0x38>)
 800e098:	4299      	cmp	r1, r3
 800e09a:	d002      	beq.n	800e0a2 <cleanup_stdio+0x1e>
 800e09c:	4620      	mov	r0, r4
 800e09e:	f001 fe2b 	bl	800fcf8 <_fflush_r>
 800e0a2:	68e1      	ldr	r1, [r4, #12]
 800e0a4:	4b06      	ldr	r3, [pc, #24]	; (800e0c0 <cleanup_stdio+0x3c>)
 800e0a6:	4299      	cmp	r1, r3
 800e0a8:	d004      	beq.n	800e0b4 <cleanup_stdio+0x30>
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0b0:	f001 be22 	b.w	800fcf8 <_fflush_r>
 800e0b4:	bd10      	pop	{r4, pc}
 800e0b6:	bf00      	nop
 800e0b8:	200018d0 	.word	0x200018d0
 800e0bc:	20001938 	.word	0x20001938
 800e0c0:	200019a0 	.word	0x200019a0

0800e0c4 <global_stdio_init.part.0>:
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <global_stdio_init.part.0+0x30>)
 800e0c8:	4c0b      	ldr	r4, [pc, #44]	; (800e0f8 <global_stdio_init.part.0+0x34>)
 800e0ca:	4a0c      	ldr	r2, [pc, #48]	; (800e0fc <global_stdio_init.part.0+0x38>)
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2104      	movs	r1, #4
 800e0d4:	f7ff ff94 	bl	800e000 <std>
 800e0d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e0dc:	2201      	movs	r2, #1
 800e0de:	2109      	movs	r1, #9
 800e0e0:	f7ff ff8e 	bl	800e000 <std>
 800e0e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e0e8:	2202      	movs	r2, #2
 800e0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0ee:	2112      	movs	r1, #18
 800e0f0:	f7ff bf86 	b.w	800e000 <std>
 800e0f4:	20001a08 	.word	0x20001a08
 800e0f8:	200018d0 	.word	0x200018d0
 800e0fc:	0800e06d 	.word	0x0800e06d

0800e100 <__sfp_lock_acquire>:
 800e100:	4801      	ldr	r0, [pc, #4]	; (800e108 <__sfp_lock_acquire+0x8>)
 800e102:	f000 b920 	b.w	800e346 <__retarget_lock_acquire_recursive>
 800e106:	bf00      	nop
 800e108:	20001a11 	.word	0x20001a11

0800e10c <__sfp_lock_release>:
 800e10c:	4801      	ldr	r0, [pc, #4]	; (800e114 <__sfp_lock_release+0x8>)
 800e10e:	f000 b91b 	b.w	800e348 <__retarget_lock_release_recursive>
 800e112:	bf00      	nop
 800e114:	20001a11 	.word	0x20001a11

0800e118 <__sinit>:
 800e118:	b510      	push	{r4, lr}
 800e11a:	4604      	mov	r4, r0
 800e11c:	f7ff fff0 	bl	800e100 <__sfp_lock_acquire>
 800e120:	6a23      	ldr	r3, [r4, #32]
 800e122:	b11b      	cbz	r3, 800e12c <__sinit+0x14>
 800e124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e128:	f7ff bff0 	b.w	800e10c <__sfp_lock_release>
 800e12c:	4b04      	ldr	r3, [pc, #16]	; (800e140 <__sinit+0x28>)
 800e12e:	6223      	str	r3, [r4, #32]
 800e130:	4b04      	ldr	r3, [pc, #16]	; (800e144 <__sinit+0x2c>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1f5      	bne.n	800e124 <__sinit+0xc>
 800e138:	f7ff ffc4 	bl	800e0c4 <global_stdio_init.part.0>
 800e13c:	e7f2      	b.n	800e124 <__sinit+0xc>
 800e13e:	bf00      	nop
 800e140:	0800e085 	.word	0x0800e085
 800e144:	20001a08 	.word	0x20001a08

0800e148 <_fwalk_sglue>:
 800e148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e14c:	4607      	mov	r7, r0
 800e14e:	4688      	mov	r8, r1
 800e150:	4614      	mov	r4, r2
 800e152:	2600      	movs	r6, #0
 800e154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e158:	f1b9 0901 	subs.w	r9, r9, #1
 800e15c:	d505      	bpl.n	800e16a <_fwalk_sglue+0x22>
 800e15e:	6824      	ldr	r4, [r4, #0]
 800e160:	2c00      	cmp	r4, #0
 800e162:	d1f7      	bne.n	800e154 <_fwalk_sglue+0xc>
 800e164:	4630      	mov	r0, r6
 800e166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d907      	bls.n	800e180 <_fwalk_sglue+0x38>
 800e170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e174:	3301      	adds	r3, #1
 800e176:	d003      	beq.n	800e180 <_fwalk_sglue+0x38>
 800e178:	4629      	mov	r1, r5
 800e17a:	4638      	mov	r0, r7
 800e17c:	47c0      	blx	r8
 800e17e:	4306      	orrs	r6, r0
 800e180:	3568      	adds	r5, #104	; 0x68
 800e182:	e7e9      	b.n	800e158 <_fwalk_sglue+0x10>

0800e184 <siprintf>:
 800e184:	b40e      	push	{r1, r2, r3}
 800e186:	b500      	push	{lr}
 800e188:	b09c      	sub	sp, #112	; 0x70
 800e18a:	ab1d      	add	r3, sp, #116	; 0x74
 800e18c:	9002      	str	r0, [sp, #8]
 800e18e:	9006      	str	r0, [sp, #24]
 800e190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e194:	4809      	ldr	r0, [pc, #36]	; (800e1bc <siprintf+0x38>)
 800e196:	9107      	str	r1, [sp, #28]
 800e198:	9104      	str	r1, [sp, #16]
 800e19a:	4909      	ldr	r1, [pc, #36]	; (800e1c0 <siprintf+0x3c>)
 800e19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a0:	9105      	str	r1, [sp, #20]
 800e1a2:	6800      	ldr	r0, [r0, #0]
 800e1a4:	9301      	str	r3, [sp, #4]
 800e1a6:	a902      	add	r1, sp, #8
 800e1a8:	f001 fc22 	bl	800f9f0 <_svfiprintf_r>
 800e1ac:	9b02      	ldr	r3, [sp, #8]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	701a      	strb	r2, [r3, #0]
 800e1b2:	b01c      	add	sp, #112	; 0x70
 800e1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1b8:	b003      	add	sp, #12
 800e1ba:	4770      	bx	lr
 800e1bc:	200001dc 	.word	0x200001dc
 800e1c0:	ffff0208 	.word	0xffff0208

0800e1c4 <__sread>:
 800e1c4:	b510      	push	{r4, lr}
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1cc:	f000 f86c 	bl	800e2a8 <_read_r>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	bfab      	itete	ge
 800e1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800e1d8:	181b      	addge	r3, r3, r0
 800e1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1de:	bfac      	ite	ge
 800e1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1e2:	81a3      	strhlt	r3, [r4, #12]
 800e1e4:	bd10      	pop	{r4, pc}

0800e1e6 <__swrite>:
 800e1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ea:	461f      	mov	r7, r3
 800e1ec:	898b      	ldrh	r3, [r1, #12]
 800e1ee:	05db      	lsls	r3, r3, #23
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	4616      	mov	r6, r2
 800e1f6:	d505      	bpl.n	800e204 <__swrite+0x1e>
 800e1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	2200      	movs	r2, #0
 800e200:	f000 f840 	bl	800e284 <_lseek_r>
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e20e:	81a3      	strh	r3, [r4, #12]
 800e210:	4632      	mov	r2, r6
 800e212:	463b      	mov	r3, r7
 800e214:	4628      	mov	r0, r5
 800e216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e21a:	f000 b857 	b.w	800e2cc <_write_r>

0800e21e <__sseek>:
 800e21e:	b510      	push	{r4, lr}
 800e220:	460c      	mov	r4, r1
 800e222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e226:	f000 f82d 	bl	800e284 <_lseek_r>
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	bf15      	itete	ne
 800e230:	6560      	strne	r0, [r4, #84]	; 0x54
 800e232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e23a:	81a3      	strheq	r3, [r4, #12]
 800e23c:	bf18      	it	ne
 800e23e:	81a3      	strhne	r3, [r4, #12]
 800e240:	bd10      	pop	{r4, pc}

0800e242 <__sclose>:
 800e242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e246:	f000 b80d 	b.w	800e264 <_close_r>

0800e24a <memset>:
 800e24a:	4402      	add	r2, r0
 800e24c:	4603      	mov	r3, r0
 800e24e:	4293      	cmp	r3, r2
 800e250:	d100      	bne.n	800e254 <memset+0xa>
 800e252:	4770      	bx	lr
 800e254:	f803 1b01 	strb.w	r1, [r3], #1
 800e258:	e7f9      	b.n	800e24e <memset+0x4>
	...

0800e25c <_localeconv_r>:
 800e25c:	4800      	ldr	r0, [pc, #0]	; (800e260 <_localeconv_r+0x4>)
 800e25e:	4770      	bx	lr
 800e260:	200002d0 	.word	0x200002d0

0800e264 <_close_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d06      	ldr	r5, [pc, #24]	; (800e280 <_close_r+0x1c>)
 800e268:	2300      	movs	r3, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	602b      	str	r3, [r5, #0]
 800e270:	f7f3 fe6d 	bl	8001f4e <_close>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_close_r+0x1a>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_close_r+0x1a>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	20001a0c 	.word	0x20001a0c

0800e284 <_lseek_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d07      	ldr	r5, [pc, #28]	; (800e2a4 <_lseek_r+0x20>)
 800e288:	4604      	mov	r4, r0
 800e28a:	4608      	mov	r0, r1
 800e28c:	4611      	mov	r1, r2
 800e28e:	2200      	movs	r2, #0
 800e290:	602a      	str	r2, [r5, #0]
 800e292:	461a      	mov	r2, r3
 800e294:	f7f3 fe82 	bl	8001f9c <_lseek>
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	d102      	bne.n	800e2a2 <_lseek_r+0x1e>
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	b103      	cbz	r3, 800e2a2 <_lseek_r+0x1e>
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	bd38      	pop	{r3, r4, r5, pc}
 800e2a4:	20001a0c 	.word	0x20001a0c

0800e2a8 <_read_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d07      	ldr	r5, [pc, #28]	; (800e2c8 <_read_r+0x20>)
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	4608      	mov	r0, r1
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	602a      	str	r2, [r5, #0]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	f7f3 fe10 	bl	8001edc <_read>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	d102      	bne.n	800e2c6 <_read_r+0x1e>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b103      	cbz	r3, 800e2c6 <_read_r+0x1e>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	20001a0c 	.word	0x20001a0c

0800e2cc <_write_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d07      	ldr	r5, [pc, #28]	; (800e2ec <_write_r+0x20>)
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	4608      	mov	r0, r1
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	602a      	str	r2, [r5, #0]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	f7f3 fe1b 	bl	8001f16 <_write>
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	d102      	bne.n	800e2ea <_write_r+0x1e>
 800e2e4:	682b      	ldr	r3, [r5, #0]
 800e2e6:	b103      	cbz	r3, 800e2ea <_write_r+0x1e>
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	bd38      	pop	{r3, r4, r5, pc}
 800e2ec:	20001a0c 	.word	0x20001a0c

0800e2f0 <__errno>:
 800e2f0:	4b01      	ldr	r3, [pc, #4]	; (800e2f8 <__errno+0x8>)
 800e2f2:	6818      	ldr	r0, [r3, #0]
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	200001dc 	.word	0x200001dc

0800e2fc <__libc_init_array>:
 800e2fc:	b570      	push	{r4, r5, r6, lr}
 800e2fe:	4d0d      	ldr	r5, [pc, #52]	; (800e334 <__libc_init_array+0x38>)
 800e300:	4c0d      	ldr	r4, [pc, #52]	; (800e338 <__libc_init_array+0x3c>)
 800e302:	1b64      	subs	r4, r4, r5
 800e304:	10a4      	asrs	r4, r4, #2
 800e306:	2600      	movs	r6, #0
 800e308:	42a6      	cmp	r6, r4
 800e30a:	d109      	bne.n	800e320 <__libc_init_array+0x24>
 800e30c:	4d0b      	ldr	r5, [pc, #44]	; (800e33c <__libc_init_array+0x40>)
 800e30e:	4c0c      	ldr	r4, [pc, #48]	; (800e340 <__libc_init_array+0x44>)
 800e310:	f002 f896 	bl	8010440 <_init>
 800e314:	1b64      	subs	r4, r4, r5
 800e316:	10a4      	asrs	r4, r4, #2
 800e318:	2600      	movs	r6, #0
 800e31a:	42a6      	cmp	r6, r4
 800e31c:	d105      	bne.n	800e32a <__libc_init_array+0x2e>
 800e31e:	bd70      	pop	{r4, r5, r6, pc}
 800e320:	f855 3b04 	ldr.w	r3, [r5], #4
 800e324:	4798      	blx	r3
 800e326:	3601      	adds	r6, #1
 800e328:	e7ee      	b.n	800e308 <__libc_init_array+0xc>
 800e32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e32e:	4798      	blx	r3
 800e330:	3601      	adds	r6, #1
 800e332:	e7f2      	b.n	800e31a <__libc_init_array+0x1e>
 800e334:	080108ec 	.word	0x080108ec
 800e338:	080108ec 	.word	0x080108ec
 800e33c:	080108ec 	.word	0x080108ec
 800e340:	080108f0 	.word	0x080108f0

0800e344 <__retarget_lock_init_recursive>:
 800e344:	4770      	bx	lr

0800e346 <__retarget_lock_acquire_recursive>:
 800e346:	4770      	bx	lr

0800e348 <__retarget_lock_release_recursive>:
 800e348:	4770      	bx	lr

0800e34a <quorem>:
 800e34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34e:	6903      	ldr	r3, [r0, #16]
 800e350:	690c      	ldr	r4, [r1, #16]
 800e352:	42a3      	cmp	r3, r4
 800e354:	4607      	mov	r7, r0
 800e356:	db7e      	blt.n	800e456 <quorem+0x10c>
 800e358:	3c01      	subs	r4, #1
 800e35a:	f101 0814 	add.w	r8, r1, #20
 800e35e:	f100 0514 	add.w	r5, r0, #20
 800e362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e366:	9301      	str	r3, [sp, #4]
 800e368:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e36c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e370:	3301      	adds	r3, #1
 800e372:	429a      	cmp	r2, r3
 800e374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e37c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e380:	d331      	bcc.n	800e3e6 <quorem+0x9c>
 800e382:	f04f 0e00 	mov.w	lr, #0
 800e386:	4640      	mov	r0, r8
 800e388:	46ac      	mov	ip, r5
 800e38a:	46f2      	mov	sl, lr
 800e38c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e390:	b293      	uxth	r3, r2
 800e392:	fb06 e303 	mla	r3, r6, r3, lr
 800e396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e39a:	0c1a      	lsrs	r2, r3, #16
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	ebaa 0303 	sub.w	r3, sl, r3
 800e3a2:	f8dc a000 	ldr.w	sl, [ip]
 800e3a6:	fa13 f38a 	uxtah	r3, r3, sl
 800e3aa:	fb06 220e 	mla	r2, r6, lr, r2
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	9b00      	ldr	r3, [sp, #0]
 800e3b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e3bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e3c4:	4581      	cmp	r9, r0
 800e3c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3ca:	f84c 3b04 	str.w	r3, [ip], #4
 800e3ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e3d2:	d2db      	bcs.n	800e38c <quorem+0x42>
 800e3d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e3d8:	b92b      	cbnz	r3, 800e3e6 <quorem+0x9c>
 800e3da:	9b01      	ldr	r3, [sp, #4]
 800e3dc:	3b04      	subs	r3, #4
 800e3de:	429d      	cmp	r5, r3
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	d32c      	bcc.n	800e43e <quorem+0xf4>
 800e3e4:	613c      	str	r4, [r7, #16]
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f001 f9a8 	bl	800f73c <__mcmp>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	db22      	blt.n	800e436 <quorem+0xec>
 800e3f0:	3601      	adds	r6, #1
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3fa:	f8d1 c000 	ldr.w	ip, [r1]
 800e3fe:	b293      	uxth	r3, r2
 800e400:	1ac3      	subs	r3, r0, r3
 800e402:	0c12      	lsrs	r2, r2, #16
 800e404:	fa13 f38c 	uxtah	r3, r3, ip
 800e408:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e40c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e410:	b29b      	uxth	r3, r3
 800e412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e416:	45c1      	cmp	r9, r8
 800e418:	f841 3b04 	str.w	r3, [r1], #4
 800e41c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e420:	d2e9      	bcs.n	800e3f6 <quorem+0xac>
 800e422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e42a:	b922      	cbnz	r2, 800e436 <quorem+0xec>
 800e42c:	3b04      	subs	r3, #4
 800e42e:	429d      	cmp	r5, r3
 800e430:	461a      	mov	r2, r3
 800e432:	d30a      	bcc.n	800e44a <quorem+0x100>
 800e434:	613c      	str	r4, [r7, #16]
 800e436:	4630      	mov	r0, r6
 800e438:	b003      	add	sp, #12
 800e43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e43e:	6812      	ldr	r2, [r2, #0]
 800e440:	3b04      	subs	r3, #4
 800e442:	2a00      	cmp	r2, #0
 800e444:	d1ce      	bne.n	800e3e4 <quorem+0x9a>
 800e446:	3c01      	subs	r4, #1
 800e448:	e7c9      	b.n	800e3de <quorem+0x94>
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	3b04      	subs	r3, #4
 800e44e:	2a00      	cmp	r2, #0
 800e450:	d1f0      	bne.n	800e434 <quorem+0xea>
 800e452:	3c01      	subs	r4, #1
 800e454:	e7eb      	b.n	800e42e <quorem+0xe4>
 800e456:	2000      	movs	r0, #0
 800e458:	e7ee      	b.n	800e438 <quorem+0xee>
 800e45a:	0000      	movs	r0, r0
 800e45c:	0000      	movs	r0, r0
	...

0800e460 <_dtoa_r>:
 800e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e464:	ed2d 8b04 	vpush	{d8-d9}
 800e468:	69c5      	ldr	r5, [r0, #28]
 800e46a:	b093      	sub	sp, #76	; 0x4c
 800e46c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e470:	ec57 6b10 	vmov	r6, r7, d0
 800e474:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e478:	9107      	str	r1, [sp, #28]
 800e47a:	4604      	mov	r4, r0
 800e47c:	920a      	str	r2, [sp, #40]	; 0x28
 800e47e:	930d      	str	r3, [sp, #52]	; 0x34
 800e480:	b975      	cbnz	r5, 800e4a0 <_dtoa_r+0x40>
 800e482:	2010      	movs	r0, #16
 800e484:	f000 fe2a 	bl	800f0dc <malloc>
 800e488:	4602      	mov	r2, r0
 800e48a:	61e0      	str	r0, [r4, #28]
 800e48c:	b920      	cbnz	r0, 800e498 <_dtoa_r+0x38>
 800e48e:	4bae      	ldr	r3, [pc, #696]	; (800e748 <_dtoa_r+0x2e8>)
 800e490:	21ef      	movs	r1, #239	; 0xef
 800e492:	48ae      	ldr	r0, [pc, #696]	; (800e74c <_dtoa_r+0x2ec>)
 800e494:	f001 fc90 	bl	800fdb8 <__assert_func>
 800e498:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e49c:	6005      	str	r5, [r0, #0]
 800e49e:	60c5      	str	r5, [r0, #12]
 800e4a0:	69e3      	ldr	r3, [r4, #28]
 800e4a2:	6819      	ldr	r1, [r3, #0]
 800e4a4:	b151      	cbz	r1, 800e4bc <_dtoa_r+0x5c>
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	604a      	str	r2, [r1, #4]
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	4093      	lsls	r3, r2
 800e4ae:	608b      	str	r3, [r1, #8]
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 ff07 	bl	800f2c4 <_Bfree>
 800e4b6:	69e3      	ldr	r3, [r4, #28]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]
 800e4bc:	1e3b      	subs	r3, r7, #0
 800e4be:	bfbb      	ittet	lt
 800e4c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e4c4:	9303      	strlt	r3, [sp, #12]
 800e4c6:	2300      	movge	r3, #0
 800e4c8:	2201      	movlt	r2, #1
 800e4ca:	bfac      	ite	ge
 800e4cc:	f8c8 3000 	strge.w	r3, [r8]
 800e4d0:	f8c8 2000 	strlt.w	r2, [r8]
 800e4d4:	4b9e      	ldr	r3, [pc, #632]	; (800e750 <_dtoa_r+0x2f0>)
 800e4d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e4da:	ea33 0308 	bics.w	r3, r3, r8
 800e4de:	d11b      	bne.n	800e518 <_dtoa_r+0xb8>
 800e4e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e4ec:	4333      	orrs	r3, r6
 800e4ee:	f000 8593 	beq.w	800f018 <_dtoa_r+0xbb8>
 800e4f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4f4:	b963      	cbnz	r3, 800e510 <_dtoa_r+0xb0>
 800e4f6:	4b97      	ldr	r3, [pc, #604]	; (800e754 <_dtoa_r+0x2f4>)
 800e4f8:	e027      	b.n	800e54a <_dtoa_r+0xea>
 800e4fa:	4b97      	ldr	r3, [pc, #604]	; (800e758 <_dtoa_r+0x2f8>)
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	3308      	adds	r3, #8
 800e500:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	9800      	ldr	r0, [sp, #0]
 800e506:	b013      	add	sp, #76	; 0x4c
 800e508:	ecbd 8b04 	vpop	{d8-d9}
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	4b90      	ldr	r3, [pc, #576]	; (800e754 <_dtoa_r+0x2f4>)
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	3303      	adds	r3, #3
 800e516:	e7f3      	b.n	800e500 <_dtoa_r+0xa0>
 800e518:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e51c:	2200      	movs	r2, #0
 800e51e:	ec51 0b17 	vmov	r0, r1, d7
 800e522:	eeb0 8a47 	vmov.f32	s16, s14
 800e526:	eef0 8a67 	vmov.f32	s17, s15
 800e52a:	2300      	movs	r3, #0
 800e52c:	f7f2 faf4 	bl	8000b18 <__aeabi_dcmpeq>
 800e530:	4681      	mov	r9, r0
 800e532:	b160      	cbz	r0, 800e54e <_dtoa_r+0xee>
 800e534:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e536:	2301      	movs	r3, #1
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f000 8568 	beq.w	800f012 <_dtoa_r+0xbb2>
 800e542:	4b86      	ldr	r3, [pc, #536]	; (800e75c <_dtoa_r+0x2fc>)
 800e544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e546:	6013      	str	r3, [r2, #0]
 800e548:	3b01      	subs	r3, #1
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	e7da      	b.n	800e504 <_dtoa_r+0xa4>
 800e54e:	aa10      	add	r2, sp, #64	; 0x40
 800e550:	a911      	add	r1, sp, #68	; 0x44
 800e552:	4620      	mov	r0, r4
 800e554:	eeb0 0a48 	vmov.f32	s0, s16
 800e558:	eef0 0a68 	vmov.f32	s1, s17
 800e55c:	f001 f994 	bl	800f888 <__d2b>
 800e560:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e564:	4682      	mov	sl, r0
 800e566:	2d00      	cmp	r5, #0
 800e568:	d07f      	beq.n	800e66a <_dtoa_r+0x20a>
 800e56a:	ee18 3a90 	vmov	r3, s17
 800e56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e572:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e576:	ec51 0b18 	vmov	r0, r1, d8
 800e57a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e57e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e582:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e586:	4619      	mov	r1, r3
 800e588:	2200      	movs	r2, #0
 800e58a:	4b75      	ldr	r3, [pc, #468]	; (800e760 <_dtoa_r+0x300>)
 800e58c:	f7f1 fea4 	bl	80002d8 <__aeabi_dsub>
 800e590:	a367      	add	r3, pc, #412	; (adr r3, 800e730 <_dtoa_r+0x2d0>)
 800e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e596:	f7f2 f857 	bl	8000648 <__aeabi_dmul>
 800e59a:	a367      	add	r3, pc, #412	; (adr r3, 800e738 <_dtoa_r+0x2d8>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	f7f1 fe9c 	bl	80002dc <__adddf3>
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	f7f1 ffe3 	bl	8000574 <__aeabi_i2d>
 800e5ae:	a364      	add	r3, pc, #400	; (adr r3, 800e740 <_dtoa_r+0x2e0>)
 800e5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b4:	f7f2 f848 	bl	8000648 <__aeabi_dmul>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	4630      	mov	r0, r6
 800e5be:	4639      	mov	r1, r7
 800e5c0:	f7f1 fe8c 	bl	80002dc <__adddf3>
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	f7f2 faee 	bl	8000ba8 <__aeabi_d2iz>
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	4683      	mov	fp, r0
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	f7f2 faa9 	bl	8000b2c <__aeabi_dcmplt>
 800e5da:	b148      	cbz	r0, 800e5f0 <_dtoa_r+0x190>
 800e5dc:	4658      	mov	r0, fp
 800e5de:	f7f1 ffc9 	bl	8000574 <__aeabi_i2d>
 800e5e2:	4632      	mov	r2, r6
 800e5e4:	463b      	mov	r3, r7
 800e5e6:	f7f2 fa97 	bl	8000b18 <__aeabi_dcmpeq>
 800e5ea:	b908      	cbnz	r0, 800e5f0 <_dtoa_r+0x190>
 800e5ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e5f0:	f1bb 0f16 	cmp.w	fp, #22
 800e5f4:	d857      	bhi.n	800e6a6 <_dtoa_r+0x246>
 800e5f6:	4b5b      	ldr	r3, [pc, #364]	; (800e764 <_dtoa_r+0x304>)
 800e5f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e600:	ec51 0b18 	vmov	r0, r1, d8
 800e604:	f7f2 fa92 	bl	8000b2c <__aeabi_dcmplt>
 800e608:	2800      	cmp	r0, #0
 800e60a:	d04e      	beq.n	800e6aa <_dtoa_r+0x24a>
 800e60c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e610:	2300      	movs	r3, #0
 800e612:	930c      	str	r3, [sp, #48]	; 0x30
 800e614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e616:	1b5b      	subs	r3, r3, r5
 800e618:	1e5a      	subs	r2, r3, #1
 800e61a:	bf45      	ittet	mi
 800e61c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e620:	9305      	strmi	r3, [sp, #20]
 800e622:	2300      	movpl	r3, #0
 800e624:	2300      	movmi	r3, #0
 800e626:	9206      	str	r2, [sp, #24]
 800e628:	bf54      	ite	pl
 800e62a:	9305      	strpl	r3, [sp, #20]
 800e62c:	9306      	strmi	r3, [sp, #24]
 800e62e:	f1bb 0f00 	cmp.w	fp, #0
 800e632:	db3c      	blt.n	800e6ae <_dtoa_r+0x24e>
 800e634:	9b06      	ldr	r3, [sp, #24]
 800e636:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e63a:	445b      	add	r3, fp
 800e63c:	9306      	str	r3, [sp, #24]
 800e63e:	2300      	movs	r3, #0
 800e640:	9308      	str	r3, [sp, #32]
 800e642:	9b07      	ldr	r3, [sp, #28]
 800e644:	2b09      	cmp	r3, #9
 800e646:	d868      	bhi.n	800e71a <_dtoa_r+0x2ba>
 800e648:	2b05      	cmp	r3, #5
 800e64a:	bfc4      	itt	gt
 800e64c:	3b04      	subgt	r3, #4
 800e64e:	9307      	strgt	r3, [sp, #28]
 800e650:	9b07      	ldr	r3, [sp, #28]
 800e652:	f1a3 0302 	sub.w	r3, r3, #2
 800e656:	bfcc      	ite	gt
 800e658:	2500      	movgt	r5, #0
 800e65a:	2501      	movle	r5, #1
 800e65c:	2b03      	cmp	r3, #3
 800e65e:	f200 8085 	bhi.w	800e76c <_dtoa_r+0x30c>
 800e662:	e8df f003 	tbb	[pc, r3]
 800e666:	3b2e      	.short	0x3b2e
 800e668:	5839      	.short	0x5839
 800e66a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e66e:	441d      	add	r5, r3
 800e670:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e674:	2b20      	cmp	r3, #32
 800e676:	bfc1      	itttt	gt
 800e678:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e67c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e680:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e684:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e688:	bfd6      	itet	le
 800e68a:	f1c3 0320 	rsble	r3, r3, #32
 800e68e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e692:	fa06 f003 	lslle.w	r0, r6, r3
 800e696:	f7f1 ff5d 	bl	8000554 <__aeabi_ui2d>
 800e69a:	2201      	movs	r2, #1
 800e69c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e6a0:	3d01      	subs	r5, #1
 800e6a2:	920e      	str	r2, [sp, #56]	; 0x38
 800e6a4:	e76f      	b.n	800e586 <_dtoa_r+0x126>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e7b3      	b.n	800e612 <_dtoa_r+0x1b2>
 800e6aa:	900c      	str	r0, [sp, #48]	; 0x30
 800e6ac:	e7b2      	b.n	800e614 <_dtoa_r+0x1b4>
 800e6ae:	9b05      	ldr	r3, [sp, #20]
 800e6b0:	eba3 030b 	sub.w	r3, r3, fp
 800e6b4:	9305      	str	r3, [sp, #20]
 800e6b6:	f1cb 0300 	rsb	r3, fp, #0
 800e6ba:	9308      	str	r3, [sp, #32]
 800e6bc:	2300      	movs	r3, #0
 800e6be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6c0:	e7bf      	b.n	800e642 <_dtoa_r+0x1e2>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dc52      	bgt.n	800e772 <_dtoa_r+0x312>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	9301      	str	r3, [sp, #4]
 800e6d0:	9304      	str	r3, [sp, #16]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	920a      	str	r2, [sp, #40]	; 0x28
 800e6d6:	e00b      	b.n	800e6f0 <_dtoa_r+0x290>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e7f3      	b.n	800e6c4 <_dtoa_r+0x264>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e2:	445b      	add	r3, fp
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	9304      	str	r3, [sp, #16]
 800e6ec:	bfb8      	it	lt
 800e6ee:	2301      	movlt	r3, #1
 800e6f0:	69e0      	ldr	r0, [r4, #28]
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	2204      	movs	r2, #4
 800e6f6:	f102 0614 	add.w	r6, r2, #20
 800e6fa:	429e      	cmp	r6, r3
 800e6fc:	d93d      	bls.n	800e77a <_dtoa_r+0x31a>
 800e6fe:	6041      	str	r1, [r0, #4]
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fd9f 	bl	800f244 <_Balloc>
 800e706:	9000      	str	r0, [sp, #0]
 800e708:	2800      	cmp	r0, #0
 800e70a:	d139      	bne.n	800e780 <_dtoa_r+0x320>
 800e70c:	4b16      	ldr	r3, [pc, #88]	; (800e768 <_dtoa_r+0x308>)
 800e70e:	4602      	mov	r2, r0
 800e710:	f240 11af 	movw	r1, #431	; 0x1af
 800e714:	e6bd      	b.n	800e492 <_dtoa_r+0x32>
 800e716:	2301      	movs	r3, #1
 800e718:	e7e1      	b.n	800e6de <_dtoa_r+0x27e>
 800e71a:	2501      	movs	r5, #1
 800e71c:	2300      	movs	r3, #0
 800e71e:	9307      	str	r3, [sp, #28]
 800e720:	9509      	str	r5, [sp, #36]	; 0x24
 800e722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	9304      	str	r3, [sp, #16]
 800e72a:	2200      	movs	r2, #0
 800e72c:	2312      	movs	r3, #18
 800e72e:	e7d1      	b.n	800e6d4 <_dtoa_r+0x274>
 800e730:	636f4361 	.word	0x636f4361
 800e734:	3fd287a7 	.word	0x3fd287a7
 800e738:	8b60c8b3 	.word	0x8b60c8b3
 800e73c:	3fc68a28 	.word	0x3fc68a28
 800e740:	509f79fb 	.word	0x509f79fb
 800e744:	3fd34413 	.word	0x3fd34413
 800e748:	080105b5 	.word	0x080105b5
 800e74c:	080105cc 	.word	0x080105cc
 800e750:	7ff00000 	.word	0x7ff00000
 800e754:	080105b1 	.word	0x080105b1
 800e758:	080105a8 	.word	0x080105a8
 800e75c:	08010585 	.word	0x08010585
 800e760:	3ff80000 	.word	0x3ff80000
 800e764:	080106b8 	.word	0x080106b8
 800e768:	08010624 	.word	0x08010624
 800e76c:	2301      	movs	r3, #1
 800e76e:	9309      	str	r3, [sp, #36]	; 0x24
 800e770:	e7d7      	b.n	800e722 <_dtoa_r+0x2c2>
 800e772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	9304      	str	r3, [sp, #16]
 800e778:	e7ba      	b.n	800e6f0 <_dtoa_r+0x290>
 800e77a:	3101      	adds	r1, #1
 800e77c:	0052      	lsls	r2, r2, #1
 800e77e:	e7ba      	b.n	800e6f6 <_dtoa_r+0x296>
 800e780:	69e3      	ldr	r3, [r4, #28]
 800e782:	9a00      	ldr	r2, [sp, #0]
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	9b04      	ldr	r3, [sp, #16]
 800e788:	2b0e      	cmp	r3, #14
 800e78a:	f200 80a8 	bhi.w	800e8de <_dtoa_r+0x47e>
 800e78e:	2d00      	cmp	r5, #0
 800e790:	f000 80a5 	beq.w	800e8de <_dtoa_r+0x47e>
 800e794:	f1bb 0f00 	cmp.w	fp, #0
 800e798:	dd38      	ble.n	800e80c <_dtoa_r+0x3ac>
 800e79a:	4bc0      	ldr	r3, [pc, #768]	; (800ea9c <_dtoa_r+0x63c>)
 800e79c:	f00b 020f 	and.w	r2, fp, #15
 800e7a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e7a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e7ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e7b0:	d019      	beq.n	800e7e6 <_dtoa_r+0x386>
 800e7b2:	4bbb      	ldr	r3, [pc, #748]	; (800eaa0 <_dtoa_r+0x640>)
 800e7b4:	ec51 0b18 	vmov	r0, r1, d8
 800e7b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7bc:	f7f2 f86e 	bl	800089c <__aeabi_ddiv>
 800e7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c4:	f008 080f 	and.w	r8, r8, #15
 800e7c8:	2503      	movs	r5, #3
 800e7ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800eaa0 <_dtoa_r+0x640>
 800e7ce:	f1b8 0f00 	cmp.w	r8, #0
 800e7d2:	d10a      	bne.n	800e7ea <_dtoa_r+0x38a>
 800e7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7d8:	4632      	mov	r2, r6
 800e7da:	463b      	mov	r3, r7
 800e7dc:	f7f2 f85e 	bl	800089c <__aeabi_ddiv>
 800e7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7e4:	e02b      	b.n	800e83e <_dtoa_r+0x3de>
 800e7e6:	2502      	movs	r5, #2
 800e7e8:	e7ef      	b.n	800e7ca <_dtoa_r+0x36a>
 800e7ea:	f018 0f01 	tst.w	r8, #1
 800e7ee:	d008      	beq.n	800e802 <_dtoa_r+0x3a2>
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7f8:	f7f1 ff26 	bl	8000648 <__aeabi_dmul>
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	4606      	mov	r6, r0
 800e800:	460f      	mov	r7, r1
 800e802:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e806:	f109 0908 	add.w	r9, r9, #8
 800e80a:	e7e0      	b.n	800e7ce <_dtoa_r+0x36e>
 800e80c:	f000 809f 	beq.w	800e94e <_dtoa_r+0x4ee>
 800e810:	f1cb 0600 	rsb	r6, fp, #0
 800e814:	4ba1      	ldr	r3, [pc, #644]	; (800ea9c <_dtoa_r+0x63c>)
 800e816:	4fa2      	ldr	r7, [pc, #648]	; (800eaa0 <_dtoa_r+0x640>)
 800e818:	f006 020f 	and.w	r2, r6, #15
 800e81c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	ec51 0b18 	vmov	r0, r1, d8
 800e828:	f7f1 ff0e 	bl	8000648 <__aeabi_dmul>
 800e82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e830:	1136      	asrs	r6, r6, #4
 800e832:	2300      	movs	r3, #0
 800e834:	2502      	movs	r5, #2
 800e836:	2e00      	cmp	r6, #0
 800e838:	d17e      	bne.n	800e938 <_dtoa_r+0x4d8>
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1d0      	bne.n	800e7e0 <_dtoa_r+0x380>
 800e83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e840:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 8084 	beq.w	800e952 <_dtoa_r+0x4f2>
 800e84a:	4b96      	ldr	r3, [pc, #600]	; (800eaa4 <_dtoa_r+0x644>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	4640      	mov	r0, r8
 800e850:	4649      	mov	r1, r9
 800e852:	f7f2 f96b 	bl	8000b2c <__aeabi_dcmplt>
 800e856:	2800      	cmp	r0, #0
 800e858:	d07b      	beq.n	800e952 <_dtoa_r+0x4f2>
 800e85a:	9b04      	ldr	r3, [sp, #16]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d078      	beq.n	800e952 <_dtoa_r+0x4f2>
 800e860:	9b01      	ldr	r3, [sp, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	dd39      	ble.n	800e8da <_dtoa_r+0x47a>
 800e866:	4b90      	ldr	r3, [pc, #576]	; (800eaa8 <_dtoa_r+0x648>)
 800e868:	2200      	movs	r2, #0
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7f1 feeb 	bl	8000648 <__aeabi_dmul>
 800e872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e876:	9e01      	ldr	r6, [sp, #4]
 800e878:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e87c:	3501      	adds	r5, #1
 800e87e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e882:	4628      	mov	r0, r5
 800e884:	f7f1 fe76 	bl	8000574 <__aeabi_i2d>
 800e888:	4642      	mov	r2, r8
 800e88a:	464b      	mov	r3, r9
 800e88c:	f7f1 fedc 	bl	8000648 <__aeabi_dmul>
 800e890:	4b86      	ldr	r3, [pc, #536]	; (800eaac <_dtoa_r+0x64c>)
 800e892:	2200      	movs	r2, #0
 800e894:	f7f1 fd22 	bl	80002dc <__adddf3>
 800e898:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8a0:	9303      	str	r3, [sp, #12]
 800e8a2:	2e00      	cmp	r6, #0
 800e8a4:	d158      	bne.n	800e958 <_dtoa_r+0x4f8>
 800e8a6:	4b82      	ldr	r3, [pc, #520]	; (800eab0 <_dtoa_r+0x650>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	4649      	mov	r1, r9
 800e8ae:	f7f1 fd13 	bl	80002d8 <__aeabi_dsub>
 800e8b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8b6:	4680      	mov	r8, r0
 800e8b8:	4689      	mov	r9, r1
 800e8ba:	f7f2 f955 	bl	8000b68 <__aeabi_dcmpgt>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f040 8296 	bne.w	800edf0 <_dtoa_r+0x990>
 800e8c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	f7f2 f92c 	bl	8000b2c <__aeabi_dcmplt>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	f040 8289 	bne.w	800edec <_dtoa_r+0x98c>
 800e8da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e8de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f2c0 814e 	blt.w	800eb82 <_dtoa_r+0x722>
 800e8e6:	f1bb 0f0e 	cmp.w	fp, #14
 800e8ea:	f300 814a 	bgt.w	800eb82 <_dtoa_r+0x722>
 800e8ee:	4b6b      	ldr	r3, [pc, #428]	; (800ea9c <_dtoa_r+0x63c>)
 800e8f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f280 80dc 	bge.w	800eab8 <_dtoa_r+0x658>
 800e900:	9b04      	ldr	r3, [sp, #16]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f300 80d8 	bgt.w	800eab8 <_dtoa_r+0x658>
 800e908:	f040 826f 	bne.w	800edea <_dtoa_r+0x98a>
 800e90c:	4b68      	ldr	r3, [pc, #416]	; (800eab0 <_dtoa_r+0x650>)
 800e90e:	2200      	movs	r2, #0
 800e910:	4640      	mov	r0, r8
 800e912:	4649      	mov	r1, r9
 800e914:	f7f1 fe98 	bl	8000648 <__aeabi_dmul>
 800e918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e91c:	f7f2 f91a 	bl	8000b54 <__aeabi_dcmpge>
 800e920:	9e04      	ldr	r6, [sp, #16]
 800e922:	4637      	mov	r7, r6
 800e924:	2800      	cmp	r0, #0
 800e926:	f040 8245 	bne.w	800edb4 <_dtoa_r+0x954>
 800e92a:	9d00      	ldr	r5, [sp, #0]
 800e92c:	2331      	movs	r3, #49	; 0x31
 800e92e:	f805 3b01 	strb.w	r3, [r5], #1
 800e932:	f10b 0b01 	add.w	fp, fp, #1
 800e936:	e241      	b.n	800edbc <_dtoa_r+0x95c>
 800e938:	07f2      	lsls	r2, r6, #31
 800e93a:	d505      	bpl.n	800e948 <_dtoa_r+0x4e8>
 800e93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e940:	f7f1 fe82 	bl	8000648 <__aeabi_dmul>
 800e944:	3501      	adds	r5, #1
 800e946:	2301      	movs	r3, #1
 800e948:	1076      	asrs	r6, r6, #1
 800e94a:	3708      	adds	r7, #8
 800e94c:	e773      	b.n	800e836 <_dtoa_r+0x3d6>
 800e94e:	2502      	movs	r5, #2
 800e950:	e775      	b.n	800e83e <_dtoa_r+0x3de>
 800e952:	9e04      	ldr	r6, [sp, #16]
 800e954:	465f      	mov	r7, fp
 800e956:	e792      	b.n	800e87e <_dtoa_r+0x41e>
 800e958:	9900      	ldr	r1, [sp, #0]
 800e95a:	4b50      	ldr	r3, [pc, #320]	; (800ea9c <_dtoa_r+0x63c>)
 800e95c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e960:	4431      	add	r1, r6
 800e962:	9102      	str	r1, [sp, #8]
 800e964:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e966:	eeb0 9a47 	vmov.f32	s18, s14
 800e96a:	eef0 9a67 	vmov.f32	s19, s15
 800e96e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e972:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e976:	2900      	cmp	r1, #0
 800e978:	d044      	beq.n	800ea04 <_dtoa_r+0x5a4>
 800e97a:	494e      	ldr	r1, [pc, #312]	; (800eab4 <_dtoa_r+0x654>)
 800e97c:	2000      	movs	r0, #0
 800e97e:	f7f1 ff8d 	bl	800089c <__aeabi_ddiv>
 800e982:	ec53 2b19 	vmov	r2, r3, d9
 800e986:	f7f1 fca7 	bl	80002d8 <__aeabi_dsub>
 800e98a:	9d00      	ldr	r5, [sp, #0]
 800e98c:	ec41 0b19 	vmov	d9, r0, r1
 800e990:	4649      	mov	r1, r9
 800e992:	4640      	mov	r0, r8
 800e994:	f7f2 f908 	bl	8000ba8 <__aeabi_d2iz>
 800e998:	4606      	mov	r6, r0
 800e99a:	f7f1 fdeb 	bl	8000574 <__aeabi_i2d>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	4649      	mov	r1, r9
 800e9a6:	f7f1 fc97 	bl	80002d8 <__aeabi_dsub>
 800e9aa:	3630      	adds	r6, #48	; 0x30
 800e9ac:	f805 6b01 	strb.w	r6, [r5], #1
 800e9b0:	ec53 2b19 	vmov	r2, r3, d9
 800e9b4:	4680      	mov	r8, r0
 800e9b6:	4689      	mov	r9, r1
 800e9b8:	f7f2 f8b8 	bl	8000b2c <__aeabi_dcmplt>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d164      	bne.n	800ea8a <_dtoa_r+0x62a>
 800e9c0:	4642      	mov	r2, r8
 800e9c2:	464b      	mov	r3, r9
 800e9c4:	4937      	ldr	r1, [pc, #220]	; (800eaa4 <_dtoa_r+0x644>)
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	f7f1 fc86 	bl	80002d8 <__aeabi_dsub>
 800e9cc:	ec53 2b19 	vmov	r2, r3, d9
 800e9d0:	f7f2 f8ac 	bl	8000b2c <__aeabi_dcmplt>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	f040 80b6 	bne.w	800eb46 <_dtoa_r+0x6e6>
 800e9da:	9b02      	ldr	r3, [sp, #8]
 800e9dc:	429d      	cmp	r5, r3
 800e9de:	f43f af7c 	beq.w	800e8da <_dtoa_r+0x47a>
 800e9e2:	4b31      	ldr	r3, [pc, #196]	; (800eaa8 <_dtoa_r+0x648>)
 800e9e4:	ec51 0b19 	vmov	r0, r1, d9
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f7f1 fe2d 	bl	8000648 <__aeabi_dmul>
 800e9ee:	4b2e      	ldr	r3, [pc, #184]	; (800eaa8 <_dtoa_r+0x648>)
 800e9f0:	ec41 0b19 	vmov	d9, r0, r1
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f1 fe25 	bl	8000648 <__aeabi_dmul>
 800e9fe:	4680      	mov	r8, r0
 800ea00:	4689      	mov	r9, r1
 800ea02:	e7c5      	b.n	800e990 <_dtoa_r+0x530>
 800ea04:	ec51 0b17 	vmov	r0, r1, d7
 800ea08:	f7f1 fe1e 	bl	8000648 <__aeabi_dmul>
 800ea0c:	9b02      	ldr	r3, [sp, #8]
 800ea0e:	9d00      	ldr	r5, [sp, #0]
 800ea10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea12:	ec41 0b19 	vmov	d9, r0, r1
 800ea16:	4649      	mov	r1, r9
 800ea18:	4640      	mov	r0, r8
 800ea1a:	f7f2 f8c5 	bl	8000ba8 <__aeabi_d2iz>
 800ea1e:	4606      	mov	r6, r0
 800ea20:	f7f1 fda8 	bl	8000574 <__aeabi_i2d>
 800ea24:	3630      	adds	r6, #48	; 0x30
 800ea26:	4602      	mov	r2, r0
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	f7f1 fc53 	bl	80002d8 <__aeabi_dsub>
 800ea32:	f805 6b01 	strb.w	r6, [r5], #1
 800ea36:	9b02      	ldr	r3, [sp, #8]
 800ea38:	429d      	cmp	r5, r3
 800ea3a:	4680      	mov	r8, r0
 800ea3c:	4689      	mov	r9, r1
 800ea3e:	f04f 0200 	mov.w	r2, #0
 800ea42:	d124      	bne.n	800ea8e <_dtoa_r+0x62e>
 800ea44:	4b1b      	ldr	r3, [pc, #108]	; (800eab4 <_dtoa_r+0x654>)
 800ea46:	ec51 0b19 	vmov	r0, r1, d9
 800ea4a:	f7f1 fc47 	bl	80002dc <__adddf3>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f2 f887 	bl	8000b68 <__aeabi_dcmpgt>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d173      	bne.n	800eb46 <_dtoa_r+0x6e6>
 800ea5e:	ec53 2b19 	vmov	r2, r3, d9
 800ea62:	4914      	ldr	r1, [pc, #80]	; (800eab4 <_dtoa_r+0x654>)
 800ea64:	2000      	movs	r0, #0
 800ea66:	f7f1 fc37 	bl	80002d8 <__aeabi_dsub>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	4640      	mov	r0, r8
 800ea70:	4649      	mov	r1, r9
 800ea72:	f7f2 f85b 	bl	8000b2c <__aeabi_dcmplt>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	f43f af2f 	beq.w	800e8da <_dtoa_r+0x47a>
 800ea7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea7e:	1e6b      	subs	r3, r5, #1
 800ea80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea86:	2b30      	cmp	r3, #48	; 0x30
 800ea88:	d0f8      	beq.n	800ea7c <_dtoa_r+0x61c>
 800ea8a:	46bb      	mov	fp, r7
 800ea8c:	e04a      	b.n	800eb24 <_dtoa_r+0x6c4>
 800ea8e:	4b06      	ldr	r3, [pc, #24]	; (800eaa8 <_dtoa_r+0x648>)
 800ea90:	f7f1 fdda 	bl	8000648 <__aeabi_dmul>
 800ea94:	4680      	mov	r8, r0
 800ea96:	4689      	mov	r9, r1
 800ea98:	e7bd      	b.n	800ea16 <_dtoa_r+0x5b6>
 800ea9a:	bf00      	nop
 800ea9c:	080106b8 	.word	0x080106b8
 800eaa0:	08010690 	.word	0x08010690
 800eaa4:	3ff00000 	.word	0x3ff00000
 800eaa8:	40240000 	.word	0x40240000
 800eaac:	401c0000 	.word	0x401c0000
 800eab0:	40140000 	.word	0x40140000
 800eab4:	3fe00000 	.word	0x3fe00000
 800eab8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eabc:	9d00      	ldr	r5, [sp, #0]
 800eabe:	4642      	mov	r2, r8
 800eac0:	464b      	mov	r3, r9
 800eac2:	4630      	mov	r0, r6
 800eac4:	4639      	mov	r1, r7
 800eac6:	f7f1 fee9 	bl	800089c <__aeabi_ddiv>
 800eaca:	f7f2 f86d 	bl	8000ba8 <__aeabi_d2iz>
 800eace:	9001      	str	r0, [sp, #4]
 800ead0:	f7f1 fd50 	bl	8000574 <__aeabi_i2d>
 800ead4:	4642      	mov	r2, r8
 800ead6:	464b      	mov	r3, r9
 800ead8:	f7f1 fdb6 	bl	8000648 <__aeabi_dmul>
 800eadc:	4602      	mov	r2, r0
 800eade:	460b      	mov	r3, r1
 800eae0:	4630      	mov	r0, r6
 800eae2:	4639      	mov	r1, r7
 800eae4:	f7f1 fbf8 	bl	80002d8 <__aeabi_dsub>
 800eae8:	9e01      	ldr	r6, [sp, #4]
 800eaea:	9f04      	ldr	r7, [sp, #16]
 800eaec:	3630      	adds	r6, #48	; 0x30
 800eaee:	f805 6b01 	strb.w	r6, [r5], #1
 800eaf2:	9e00      	ldr	r6, [sp, #0]
 800eaf4:	1bae      	subs	r6, r5, r6
 800eaf6:	42b7      	cmp	r7, r6
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	d134      	bne.n	800eb68 <_dtoa_r+0x708>
 800eafe:	f7f1 fbed 	bl	80002dc <__adddf3>
 800eb02:	4642      	mov	r2, r8
 800eb04:	464b      	mov	r3, r9
 800eb06:	4606      	mov	r6, r0
 800eb08:	460f      	mov	r7, r1
 800eb0a:	f7f2 f82d 	bl	8000b68 <__aeabi_dcmpgt>
 800eb0e:	b9c8      	cbnz	r0, 800eb44 <_dtoa_r+0x6e4>
 800eb10:	4642      	mov	r2, r8
 800eb12:	464b      	mov	r3, r9
 800eb14:	4630      	mov	r0, r6
 800eb16:	4639      	mov	r1, r7
 800eb18:	f7f1 fffe 	bl	8000b18 <__aeabi_dcmpeq>
 800eb1c:	b110      	cbz	r0, 800eb24 <_dtoa_r+0x6c4>
 800eb1e:	9b01      	ldr	r3, [sp, #4]
 800eb20:	07db      	lsls	r3, r3, #31
 800eb22:	d40f      	bmi.n	800eb44 <_dtoa_r+0x6e4>
 800eb24:	4651      	mov	r1, sl
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fbcc 	bl	800f2c4 <_Bfree>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb30:	702b      	strb	r3, [r5, #0]
 800eb32:	f10b 0301 	add.w	r3, fp, #1
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f43f ace2 	beq.w	800e504 <_dtoa_r+0xa4>
 800eb40:	601d      	str	r5, [r3, #0]
 800eb42:	e4df      	b.n	800e504 <_dtoa_r+0xa4>
 800eb44:	465f      	mov	r7, fp
 800eb46:	462b      	mov	r3, r5
 800eb48:	461d      	mov	r5, r3
 800eb4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb4e:	2a39      	cmp	r2, #57	; 0x39
 800eb50:	d106      	bne.n	800eb60 <_dtoa_r+0x700>
 800eb52:	9a00      	ldr	r2, [sp, #0]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d1f7      	bne.n	800eb48 <_dtoa_r+0x6e8>
 800eb58:	9900      	ldr	r1, [sp, #0]
 800eb5a:	2230      	movs	r2, #48	; 0x30
 800eb5c:	3701      	adds	r7, #1
 800eb5e:	700a      	strb	r2, [r1, #0]
 800eb60:	781a      	ldrb	r2, [r3, #0]
 800eb62:	3201      	adds	r2, #1
 800eb64:	701a      	strb	r2, [r3, #0]
 800eb66:	e790      	b.n	800ea8a <_dtoa_r+0x62a>
 800eb68:	4ba3      	ldr	r3, [pc, #652]	; (800edf8 <_dtoa_r+0x998>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f7f1 fd6c 	bl	8000648 <__aeabi_dmul>
 800eb70:	2200      	movs	r2, #0
 800eb72:	2300      	movs	r3, #0
 800eb74:	4606      	mov	r6, r0
 800eb76:	460f      	mov	r7, r1
 800eb78:	f7f1 ffce 	bl	8000b18 <__aeabi_dcmpeq>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d09e      	beq.n	800eabe <_dtoa_r+0x65e>
 800eb80:	e7d0      	b.n	800eb24 <_dtoa_r+0x6c4>
 800eb82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb84:	2a00      	cmp	r2, #0
 800eb86:	f000 80ca 	beq.w	800ed1e <_dtoa_r+0x8be>
 800eb8a:	9a07      	ldr	r2, [sp, #28]
 800eb8c:	2a01      	cmp	r2, #1
 800eb8e:	f300 80ad 	bgt.w	800ecec <_dtoa_r+0x88c>
 800eb92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb94:	2a00      	cmp	r2, #0
 800eb96:	f000 80a5 	beq.w	800ece4 <_dtoa_r+0x884>
 800eb9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb9e:	9e08      	ldr	r6, [sp, #32]
 800eba0:	9d05      	ldr	r5, [sp, #20]
 800eba2:	9a05      	ldr	r2, [sp, #20]
 800eba4:	441a      	add	r2, r3
 800eba6:	9205      	str	r2, [sp, #20]
 800eba8:	9a06      	ldr	r2, [sp, #24]
 800ebaa:	2101      	movs	r1, #1
 800ebac:	441a      	add	r2, r3
 800ebae:	4620      	mov	r0, r4
 800ebb0:	9206      	str	r2, [sp, #24]
 800ebb2:	f000 fc3d 	bl	800f430 <__i2b>
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	b165      	cbz	r5, 800ebd4 <_dtoa_r+0x774>
 800ebba:	9b06      	ldr	r3, [sp, #24]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	dd09      	ble.n	800ebd4 <_dtoa_r+0x774>
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	9a05      	ldr	r2, [sp, #20]
 800ebc4:	bfa8      	it	ge
 800ebc6:	462b      	movge	r3, r5
 800ebc8:	1ad2      	subs	r2, r2, r3
 800ebca:	9205      	str	r2, [sp, #20]
 800ebcc:	9a06      	ldr	r2, [sp, #24]
 800ebce:	1aed      	subs	r5, r5, r3
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	9306      	str	r3, [sp, #24]
 800ebd4:	9b08      	ldr	r3, [sp, #32]
 800ebd6:	b1f3      	cbz	r3, 800ec16 <_dtoa_r+0x7b6>
 800ebd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 80a3 	beq.w	800ed26 <_dtoa_r+0x8c6>
 800ebe0:	2e00      	cmp	r6, #0
 800ebe2:	dd10      	ble.n	800ec06 <_dtoa_r+0x7a6>
 800ebe4:	4639      	mov	r1, r7
 800ebe6:	4632      	mov	r2, r6
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f000 fce1 	bl	800f5b0 <__pow5mult>
 800ebee:	4652      	mov	r2, sl
 800ebf0:	4601      	mov	r1, r0
 800ebf2:	4607      	mov	r7, r0
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f000 fc31 	bl	800f45c <__multiply>
 800ebfa:	4651      	mov	r1, sl
 800ebfc:	4680      	mov	r8, r0
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 fb60 	bl	800f2c4 <_Bfree>
 800ec04:	46c2      	mov	sl, r8
 800ec06:	9b08      	ldr	r3, [sp, #32]
 800ec08:	1b9a      	subs	r2, r3, r6
 800ec0a:	d004      	beq.n	800ec16 <_dtoa_r+0x7b6>
 800ec0c:	4651      	mov	r1, sl
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f000 fcce 	bl	800f5b0 <__pow5mult>
 800ec14:	4682      	mov	sl, r0
 800ec16:	2101      	movs	r1, #1
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 fc09 	bl	800f430 <__i2b>
 800ec1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	4606      	mov	r6, r0
 800ec24:	f340 8081 	ble.w	800ed2a <_dtoa_r+0x8ca>
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f000 fcbf 	bl	800f5b0 <__pow5mult>
 800ec32:	9b07      	ldr	r3, [sp, #28]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	4606      	mov	r6, r0
 800ec38:	dd7a      	ble.n	800ed30 <_dtoa_r+0x8d0>
 800ec3a:	f04f 0800 	mov.w	r8, #0
 800ec3e:	6933      	ldr	r3, [r6, #16]
 800ec40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec44:	6918      	ldr	r0, [r3, #16]
 800ec46:	f000 fba5 	bl	800f394 <__hi0bits>
 800ec4a:	f1c0 0020 	rsb	r0, r0, #32
 800ec4e:	9b06      	ldr	r3, [sp, #24]
 800ec50:	4418      	add	r0, r3
 800ec52:	f010 001f 	ands.w	r0, r0, #31
 800ec56:	f000 8094 	beq.w	800ed82 <_dtoa_r+0x922>
 800ec5a:	f1c0 0320 	rsb	r3, r0, #32
 800ec5e:	2b04      	cmp	r3, #4
 800ec60:	f340 8085 	ble.w	800ed6e <_dtoa_r+0x90e>
 800ec64:	9b05      	ldr	r3, [sp, #20]
 800ec66:	f1c0 001c 	rsb	r0, r0, #28
 800ec6a:	4403      	add	r3, r0
 800ec6c:	9305      	str	r3, [sp, #20]
 800ec6e:	9b06      	ldr	r3, [sp, #24]
 800ec70:	4403      	add	r3, r0
 800ec72:	4405      	add	r5, r0
 800ec74:	9306      	str	r3, [sp, #24]
 800ec76:	9b05      	ldr	r3, [sp, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	dd05      	ble.n	800ec88 <_dtoa_r+0x828>
 800ec7c:	4651      	mov	r1, sl
 800ec7e:	461a      	mov	r2, r3
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 fcef 	bl	800f664 <__lshift>
 800ec86:	4682      	mov	sl, r0
 800ec88:	9b06      	ldr	r3, [sp, #24]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	dd05      	ble.n	800ec9a <_dtoa_r+0x83a>
 800ec8e:	4631      	mov	r1, r6
 800ec90:	461a      	mov	r2, r3
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 fce6 	bl	800f664 <__lshift>
 800ec98:	4606      	mov	r6, r0
 800ec9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d072      	beq.n	800ed86 <_dtoa_r+0x926>
 800eca0:	4631      	mov	r1, r6
 800eca2:	4650      	mov	r0, sl
 800eca4:	f000 fd4a 	bl	800f73c <__mcmp>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	da6c      	bge.n	800ed86 <_dtoa_r+0x926>
 800ecac:	2300      	movs	r3, #0
 800ecae:	4651      	mov	r1, sl
 800ecb0:	220a      	movs	r2, #10
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f000 fb28 	bl	800f308 <__multadd>
 800ecb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ecbe:	4682      	mov	sl, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 81b0 	beq.w	800f026 <_dtoa_r+0xbc6>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	4639      	mov	r1, r7
 800ecca:	220a      	movs	r2, #10
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 fb1b 	bl	800f308 <__multadd>
 800ecd2:	9b01      	ldr	r3, [sp, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	4607      	mov	r7, r0
 800ecd8:	f300 8096 	bgt.w	800ee08 <_dtoa_r+0x9a8>
 800ecdc:	9b07      	ldr	r3, [sp, #28]
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	dc59      	bgt.n	800ed96 <_dtoa_r+0x936>
 800ece2:	e091      	b.n	800ee08 <_dtoa_r+0x9a8>
 800ece4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ece6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecea:	e758      	b.n	800eb9e <_dtoa_r+0x73e>
 800ecec:	9b04      	ldr	r3, [sp, #16]
 800ecee:	1e5e      	subs	r6, r3, #1
 800ecf0:	9b08      	ldr	r3, [sp, #32]
 800ecf2:	42b3      	cmp	r3, r6
 800ecf4:	bfbf      	itttt	lt
 800ecf6:	9b08      	ldrlt	r3, [sp, #32]
 800ecf8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ecfa:	9608      	strlt	r6, [sp, #32]
 800ecfc:	1af3      	sublt	r3, r6, r3
 800ecfe:	bfb4      	ite	lt
 800ed00:	18d2      	addlt	r2, r2, r3
 800ed02:	1b9e      	subge	r6, r3, r6
 800ed04:	9b04      	ldr	r3, [sp, #16]
 800ed06:	bfbc      	itt	lt
 800ed08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ed0a:	2600      	movlt	r6, #0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bfb7      	itett	lt
 800ed10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ed14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ed18:	1a9d      	sublt	r5, r3, r2
 800ed1a:	2300      	movlt	r3, #0
 800ed1c:	e741      	b.n	800eba2 <_dtoa_r+0x742>
 800ed1e:	9e08      	ldr	r6, [sp, #32]
 800ed20:	9d05      	ldr	r5, [sp, #20]
 800ed22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ed24:	e748      	b.n	800ebb8 <_dtoa_r+0x758>
 800ed26:	9a08      	ldr	r2, [sp, #32]
 800ed28:	e770      	b.n	800ec0c <_dtoa_r+0x7ac>
 800ed2a:	9b07      	ldr	r3, [sp, #28]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	dc19      	bgt.n	800ed64 <_dtoa_r+0x904>
 800ed30:	9b02      	ldr	r3, [sp, #8]
 800ed32:	b9bb      	cbnz	r3, 800ed64 <_dtoa_r+0x904>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed3a:	b99b      	cbnz	r3, 800ed64 <_dtoa_r+0x904>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed42:	0d1b      	lsrs	r3, r3, #20
 800ed44:	051b      	lsls	r3, r3, #20
 800ed46:	b183      	cbz	r3, 800ed6a <_dtoa_r+0x90a>
 800ed48:	9b05      	ldr	r3, [sp, #20]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	9305      	str	r3, [sp, #20]
 800ed4e:	9b06      	ldr	r3, [sp, #24]
 800ed50:	3301      	adds	r3, #1
 800ed52:	9306      	str	r3, [sp, #24]
 800ed54:	f04f 0801 	mov.w	r8, #1
 800ed58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f47f af6f 	bne.w	800ec3e <_dtoa_r+0x7de>
 800ed60:	2001      	movs	r0, #1
 800ed62:	e774      	b.n	800ec4e <_dtoa_r+0x7ee>
 800ed64:	f04f 0800 	mov.w	r8, #0
 800ed68:	e7f6      	b.n	800ed58 <_dtoa_r+0x8f8>
 800ed6a:	4698      	mov	r8, r3
 800ed6c:	e7f4      	b.n	800ed58 <_dtoa_r+0x8f8>
 800ed6e:	d082      	beq.n	800ec76 <_dtoa_r+0x816>
 800ed70:	9a05      	ldr	r2, [sp, #20]
 800ed72:	331c      	adds	r3, #28
 800ed74:	441a      	add	r2, r3
 800ed76:	9205      	str	r2, [sp, #20]
 800ed78:	9a06      	ldr	r2, [sp, #24]
 800ed7a:	441a      	add	r2, r3
 800ed7c:	441d      	add	r5, r3
 800ed7e:	9206      	str	r2, [sp, #24]
 800ed80:	e779      	b.n	800ec76 <_dtoa_r+0x816>
 800ed82:	4603      	mov	r3, r0
 800ed84:	e7f4      	b.n	800ed70 <_dtoa_r+0x910>
 800ed86:	9b04      	ldr	r3, [sp, #16]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	dc37      	bgt.n	800edfc <_dtoa_r+0x99c>
 800ed8c:	9b07      	ldr	r3, [sp, #28]
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	dd34      	ble.n	800edfc <_dtoa_r+0x99c>
 800ed92:	9b04      	ldr	r3, [sp, #16]
 800ed94:	9301      	str	r3, [sp, #4]
 800ed96:	9b01      	ldr	r3, [sp, #4]
 800ed98:	b963      	cbnz	r3, 800edb4 <_dtoa_r+0x954>
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	2205      	movs	r2, #5
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 fab2 	bl	800f308 <__multadd>
 800eda4:	4601      	mov	r1, r0
 800eda6:	4606      	mov	r6, r0
 800eda8:	4650      	mov	r0, sl
 800edaa:	f000 fcc7 	bl	800f73c <__mcmp>
 800edae:	2800      	cmp	r0, #0
 800edb0:	f73f adbb 	bgt.w	800e92a <_dtoa_r+0x4ca>
 800edb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb6:	9d00      	ldr	r5, [sp, #0]
 800edb8:	ea6f 0b03 	mvn.w	fp, r3
 800edbc:	f04f 0800 	mov.w	r8, #0
 800edc0:	4631      	mov	r1, r6
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 fa7e 	bl	800f2c4 <_Bfree>
 800edc8:	2f00      	cmp	r7, #0
 800edca:	f43f aeab 	beq.w	800eb24 <_dtoa_r+0x6c4>
 800edce:	f1b8 0f00 	cmp.w	r8, #0
 800edd2:	d005      	beq.n	800ede0 <_dtoa_r+0x980>
 800edd4:	45b8      	cmp	r8, r7
 800edd6:	d003      	beq.n	800ede0 <_dtoa_r+0x980>
 800edd8:	4641      	mov	r1, r8
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 fa72 	bl	800f2c4 <_Bfree>
 800ede0:	4639      	mov	r1, r7
 800ede2:	4620      	mov	r0, r4
 800ede4:	f000 fa6e 	bl	800f2c4 <_Bfree>
 800ede8:	e69c      	b.n	800eb24 <_dtoa_r+0x6c4>
 800edea:	2600      	movs	r6, #0
 800edec:	4637      	mov	r7, r6
 800edee:	e7e1      	b.n	800edb4 <_dtoa_r+0x954>
 800edf0:	46bb      	mov	fp, r7
 800edf2:	4637      	mov	r7, r6
 800edf4:	e599      	b.n	800e92a <_dtoa_r+0x4ca>
 800edf6:	bf00      	nop
 800edf8:	40240000 	.word	0x40240000
 800edfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f000 80c8 	beq.w	800ef94 <_dtoa_r+0xb34>
 800ee04:	9b04      	ldr	r3, [sp, #16]
 800ee06:	9301      	str	r3, [sp, #4]
 800ee08:	2d00      	cmp	r5, #0
 800ee0a:	dd05      	ble.n	800ee18 <_dtoa_r+0x9b8>
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	462a      	mov	r2, r5
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 fc27 	bl	800f664 <__lshift>
 800ee16:	4607      	mov	r7, r0
 800ee18:	f1b8 0f00 	cmp.w	r8, #0
 800ee1c:	d05b      	beq.n	800eed6 <_dtoa_r+0xa76>
 800ee1e:	6879      	ldr	r1, [r7, #4]
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fa0f 	bl	800f244 <_Balloc>
 800ee26:	4605      	mov	r5, r0
 800ee28:	b928      	cbnz	r0, 800ee36 <_dtoa_r+0x9d6>
 800ee2a:	4b83      	ldr	r3, [pc, #524]	; (800f038 <_dtoa_r+0xbd8>)
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ee32:	f7ff bb2e 	b.w	800e492 <_dtoa_r+0x32>
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	3202      	adds	r2, #2
 800ee3a:	0092      	lsls	r2, r2, #2
 800ee3c:	f107 010c 	add.w	r1, r7, #12
 800ee40:	300c      	adds	r0, #12
 800ee42:	f000 ffab 	bl	800fd9c <memcpy>
 800ee46:	2201      	movs	r2, #1
 800ee48:	4629      	mov	r1, r5
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 fc0a 	bl	800f664 <__lshift>
 800ee50:	9b00      	ldr	r3, [sp, #0]
 800ee52:	3301      	adds	r3, #1
 800ee54:	9304      	str	r3, [sp, #16]
 800ee56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	9308      	str	r3, [sp, #32]
 800ee5e:	9b02      	ldr	r3, [sp, #8]
 800ee60:	f003 0301 	and.w	r3, r3, #1
 800ee64:	46b8      	mov	r8, r7
 800ee66:	9306      	str	r3, [sp, #24]
 800ee68:	4607      	mov	r7, r0
 800ee6a:	9b04      	ldr	r3, [sp, #16]
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	3b01      	subs	r3, #1
 800ee70:	4650      	mov	r0, sl
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	f7ff fa69 	bl	800e34a <quorem>
 800ee78:	4641      	mov	r1, r8
 800ee7a:	9002      	str	r0, [sp, #8]
 800ee7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee80:	4650      	mov	r0, sl
 800ee82:	f000 fc5b 	bl	800f73c <__mcmp>
 800ee86:	463a      	mov	r2, r7
 800ee88:	9005      	str	r0, [sp, #20]
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fc71 	bl	800f774 <__mdiff>
 800ee92:	68c2      	ldr	r2, [r0, #12]
 800ee94:	4605      	mov	r5, r0
 800ee96:	bb02      	cbnz	r2, 800eeda <_dtoa_r+0xa7a>
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4650      	mov	r0, sl
 800ee9c:	f000 fc4e 	bl	800f73c <__mcmp>
 800eea0:	4602      	mov	r2, r0
 800eea2:	4629      	mov	r1, r5
 800eea4:	4620      	mov	r0, r4
 800eea6:	9209      	str	r2, [sp, #36]	; 0x24
 800eea8:	f000 fa0c 	bl	800f2c4 <_Bfree>
 800eeac:	9b07      	ldr	r3, [sp, #28]
 800eeae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eeb0:	9d04      	ldr	r5, [sp, #16]
 800eeb2:	ea43 0102 	orr.w	r1, r3, r2
 800eeb6:	9b06      	ldr	r3, [sp, #24]
 800eeb8:	4319      	orrs	r1, r3
 800eeba:	d110      	bne.n	800eede <_dtoa_r+0xa7e>
 800eebc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eec0:	d029      	beq.n	800ef16 <_dtoa_r+0xab6>
 800eec2:	9b05      	ldr	r3, [sp, #20]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	dd02      	ble.n	800eece <_dtoa_r+0xa6e>
 800eec8:	9b02      	ldr	r3, [sp, #8]
 800eeca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	f883 9000 	strb.w	r9, [r3]
 800eed4:	e774      	b.n	800edc0 <_dtoa_r+0x960>
 800eed6:	4638      	mov	r0, r7
 800eed8:	e7ba      	b.n	800ee50 <_dtoa_r+0x9f0>
 800eeda:	2201      	movs	r2, #1
 800eedc:	e7e1      	b.n	800eea2 <_dtoa_r+0xa42>
 800eede:	9b05      	ldr	r3, [sp, #20]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	db04      	blt.n	800eeee <_dtoa_r+0xa8e>
 800eee4:	9907      	ldr	r1, [sp, #28]
 800eee6:	430b      	orrs	r3, r1
 800eee8:	9906      	ldr	r1, [sp, #24]
 800eeea:	430b      	orrs	r3, r1
 800eeec:	d120      	bne.n	800ef30 <_dtoa_r+0xad0>
 800eeee:	2a00      	cmp	r2, #0
 800eef0:	dded      	ble.n	800eece <_dtoa_r+0xa6e>
 800eef2:	4651      	mov	r1, sl
 800eef4:	2201      	movs	r2, #1
 800eef6:	4620      	mov	r0, r4
 800eef8:	f000 fbb4 	bl	800f664 <__lshift>
 800eefc:	4631      	mov	r1, r6
 800eefe:	4682      	mov	sl, r0
 800ef00:	f000 fc1c 	bl	800f73c <__mcmp>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	dc03      	bgt.n	800ef10 <_dtoa_r+0xab0>
 800ef08:	d1e1      	bne.n	800eece <_dtoa_r+0xa6e>
 800ef0a:	f019 0f01 	tst.w	r9, #1
 800ef0e:	d0de      	beq.n	800eece <_dtoa_r+0xa6e>
 800ef10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ef14:	d1d8      	bne.n	800eec8 <_dtoa_r+0xa68>
 800ef16:	9a01      	ldr	r2, [sp, #4]
 800ef18:	2339      	movs	r3, #57	; 0x39
 800ef1a:	7013      	strb	r3, [r2, #0]
 800ef1c:	462b      	mov	r3, r5
 800ef1e:	461d      	mov	r5, r3
 800ef20:	3b01      	subs	r3, #1
 800ef22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef26:	2a39      	cmp	r2, #57	; 0x39
 800ef28:	d06c      	beq.n	800f004 <_dtoa_r+0xba4>
 800ef2a:	3201      	adds	r2, #1
 800ef2c:	701a      	strb	r2, [r3, #0]
 800ef2e:	e747      	b.n	800edc0 <_dtoa_r+0x960>
 800ef30:	2a00      	cmp	r2, #0
 800ef32:	dd07      	ble.n	800ef44 <_dtoa_r+0xae4>
 800ef34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ef38:	d0ed      	beq.n	800ef16 <_dtoa_r+0xab6>
 800ef3a:	9a01      	ldr	r2, [sp, #4]
 800ef3c:	f109 0301 	add.w	r3, r9, #1
 800ef40:	7013      	strb	r3, [r2, #0]
 800ef42:	e73d      	b.n	800edc0 <_dtoa_r+0x960>
 800ef44:	9b04      	ldr	r3, [sp, #16]
 800ef46:	9a08      	ldr	r2, [sp, #32]
 800ef48:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d043      	beq.n	800efd8 <_dtoa_r+0xb78>
 800ef50:	4651      	mov	r1, sl
 800ef52:	2300      	movs	r3, #0
 800ef54:	220a      	movs	r2, #10
 800ef56:	4620      	mov	r0, r4
 800ef58:	f000 f9d6 	bl	800f308 <__multadd>
 800ef5c:	45b8      	cmp	r8, r7
 800ef5e:	4682      	mov	sl, r0
 800ef60:	f04f 0300 	mov.w	r3, #0
 800ef64:	f04f 020a 	mov.w	r2, #10
 800ef68:	4641      	mov	r1, r8
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	d107      	bne.n	800ef7e <_dtoa_r+0xb1e>
 800ef6e:	f000 f9cb 	bl	800f308 <__multadd>
 800ef72:	4680      	mov	r8, r0
 800ef74:	4607      	mov	r7, r0
 800ef76:	9b04      	ldr	r3, [sp, #16]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	9304      	str	r3, [sp, #16]
 800ef7c:	e775      	b.n	800ee6a <_dtoa_r+0xa0a>
 800ef7e:	f000 f9c3 	bl	800f308 <__multadd>
 800ef82:	4639      	mov	r1, r7
 800ef84:	4680      	mov	r8, r0
 800ef86:	2300      	movs	r3, #0
 800ef88:	220a      	movs	r2, #10
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 f9bc 	bl	800f308 <__multadd>
 800ef90:	4607      	mov	r7, r0
 800ef92:	e7f0      	b.n	800ef76 <_dtoa_r+0xb16>
 800ef94:	9b04      	ldr	r3, [sp, #16]
 800ef96:	9301      	str	r3, [sp, #4]
 800ef98:	9d00      	ldr	r5, [sp, #0]
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4650      	mov	r0, sl
 800ef9e:	f7ff f9d4 	bl	800e34a <quorem>
 800efa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800efa6:	9b00      	ldr	r3, [sp, #0]
 800efa8:	f805 9b01 	strb.w	r9, [r5], #1
 800efac:	1aea      	subs	r2, r5, r3
 800efae:	9b01      	ldr	r3, [sp, #4]
 800efb0:	4293      	cmp	r3, r2
 800efb2:	dd07      	ble.n	800efc4 <_dtoa_r+0xb64>
 800efb4:	4651      	mov	r1, sl
 800efb6:	2300      	movs	r3, #0
 800efb8:	220a      	movs	r2, #10
 800efba:	4620      	mov	r0, r4
 800efbc:	f000 f9a4 	bl	800f308 <__multadd>
 800efc0:	4682      	mov	sl, r0
 800efc2:	e7ea      	b.n	800ef9a <_dtoa_r+0xb3a>
 800efc4:	9b01      	ldr	r3, [sp, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	bfc8      	it	gt
 800efca:	461d      	movgt	r5, r3
 800efcc:	9b00      	ldr	r3, [sp, #0]
 800efce:	bfd8      	it	le
 800efd0:	2501      	movle	r5, #1
 800efd2:	441d      	add	r5, r3
 800efd4:	f04f 0800 	mov.w	r8, #0
 800efd8:	4651      	mov	r1, sl
 800efda:	2201      	movs	r2, #1
 800efdc:	4620      	mov	r0, r4
 800efde:	f000 fb41 	bl	800f664 <__lshift>
 800efe2:	4631      	mov	r1, r6
 800efe4:	4682      	mov	sl, r0
 800efe6:	f000 fba9 	bl	800f73c <__mcmp>
 800efea:	2800      	cmp	r0, #0
 800efec:	dc96      	bgt.n	800ef1c <_dtoa_r+0xabc>
 800efee:	d102      	bne.n	800eff6 <_dtoa_r+0xb96>
 800eff0:	f019 0f01 	tst.w	r9, #1
 800eff4:	d192      	bne.n	800ef1c <_dtoa_r+0xabc>
 800eff6:	462b      	mov	r3, r5
 800eff8:	461d      	mov	r5, r3
 800effa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800effe:	2a30      	cmp	r2, #48	; 0x30
 800f000:	d0fa      	beq.n	800eff8 <_dtoa_r+0xb98>
 800f002:	e6dd      	b.n	800edc0 <_dtoa_r+0x960>
 800f004:	9a00      	ldr	r2, [sp, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d189      	bne.n	800ef1e <_dtoa_r+0xabe>
 800f00a:	f10b 0b01 	add.w	fp, fp, #1
 800f00e:	2331      	movs	r3, #49	; 0x31
 800f010:	e796      	b.n	800ef40 <_dtoa_r+0xae0>
 800f012:	4b0a      	ldr	r3, [pc, #40]	; (800f03c <_dtoa_r+0xbdc>)
 800f014:	f7ff ba99 	b.w	800e54a <_dtoa_r+0xea>
 800f018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f47f aa6d 	bne.w	800e4fa <_dtoa_r+0x9a>
 800f020:	4b07      	ldr	r3, [pc, #28]	; (800f040 <_dtoa_r+0xbe0>)
 800f022:	f7ff ba92 	b.w	800e54a <_dtoa_r+0xea>
 800f026:	9b01      	ldr	r3, [sp, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	dcb5      	bgt.n	800ef98 <_dtoa_r+0xb38>
 800f02c:	9b07      	ldr	r3, [sp, #28]
 800f02e:	2b02      	cmp	r3, #2
 800f030:	f73f aeb1 	bgt.w	800ed96 <_dtoa_r+0x936>
 800f034:	e7b0      	b.n	800ef98 <_dtoa_r+0xb38>
 800f036:	bf00      	nop
 800f038:	08010624 	.word	0x08010624
 800f03c:	08010584 	.word	0x08010584
 800f040:	080105a8 	.word	0x080105a8

0800f044 <_free_r>:
 800f044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f046:	2900      	cmp	r1, #0
 800f048:	d044      	beq.n	800f0d4 <_free_r+0x90>
 800f04a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f04e:	9001      	str	r0, [sp, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f1a1 0404 	sub.w	r4, r1, #4
 800f056:	bfb8      	it	lt
 800f058:	18e4      	addlt	r4, r4, r3
 800f05a:	f000 f8e7 	bl	800f22c <__malloc_lock>
 800f05e:	4a1e      	ldr	r2, [pc, #120]	; (800f0d8 <_free_r+0x94>)
 800f060:	9801      	ldr	r0, [sp, #4]
 800f062:	6813      	ldr	r3, [r2, #0]
 800f064:	b933      	cbnz	r3, 800f074 <_free_r+0x30>
 800f066:	6063      	str	r3, [r4, #4]
 800f068:	6014      	str	r4, [r2, #0]
 800f06a:	b003      	add	sp, #12
 800f06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f070:	f000 b8e2 	b.w	800f238 <__malloc_unlock>
 800f074:	42a3      	cmp	r3, r4
 800f076:	d908      	bls.n	800f08a <_free_r+0x46>
 800f078:	6825      	ldr	r5, [r4, #0]
 800f07a:	1961      	adds	r1, r4, r5
 800f07c:	428b      	cmp	r3, r1
 800f07e:	bf01      	itttt	eq
 800f080:	6819      	ldreq	r1, [r3, #0]
 800f082:	685b      	ldreq	r3, [r3, #4]
 800f084:	1949      	addeq	r1, r1, r5
 800f086:	6021      	streq	r1, [r4, #0]
 800f088:	e7ed      	b.n	800f066 <_free_r+0x22>
 800f08a:	461a      	mov	r2, r3
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	b10b      	cbz	r3, 800f094 <_free_r+0x50>
 800f090:	42a3      	cmp	r3, r4
 800f092:	d9fa      	bls.n	800f08a <_free_r+0x46>
 800f094:	6811      	ldr	r1, [r2, #0]
 800f096:	1855      	adds	r5, r2, r1
 800f098:	42a5      	cmp	r5, r4
 800f09a:	d10b      	bne.n	800f0b4 <_free_r+0x70>
 800f09c:	6824      	ldr	r4, [r4, #0]
 800f09e:	4421      	add	r1, r4
 800f0a0:	1854      	adds	r4, r2, r1
 800f0a2:	42a3      	cmp	r3, r4
 800f0a4:	6011      	str	r1, [r2, #0]
 800f0a6:	d1e0      	bne.n	800f06a <_free_r+0x26>
 800f0a8:	681c      	ldr	r4, [r3, #0]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	6053      	str	r3, [r2, #4]
 800f0ae:	440c      	add	r4, r1
 800f0b0:	6014      	str	r4, [r2, #0]
 800f0b2:	e7da      	b.n	800f06a <_free_r+0x26>
 800f0b4:	d902      	bls.n	800f0bc <_free_r+0x78>
 800f0b6:	230c      	movs	r3, #12
 800f0b8:	6003      	str	r3, [r0, #0]
 800f0ba:	e7d6      	b.n	800f06a <_free_r+0x26>
 800f0bc:	6825      	ldr	r5, [r4, #0]
 800f0be:	1961      	adds	r1, r4, r5
 800f0c0:	428b      	cmp	r3, r1
 800f0c2:	bf04      	itt	eq
 800f0c4:	6819      	ldreq	r1, [r3, #0]
 800f0c6:	685b      	ldreq	r3, [r3, #4]
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	bf04      	itt	eq
 800f0cc:	1949      	addeq	r1, r1, r5
 800f0ce:	6021      	streq	r1, [r4, #0]
 800f0d0:	6054      	str	r4, [r2, #4]
 800f0d2:	e7ca      	b.n	800f06a <_free_r+0x26>
 800f0d4:	b003      	add	sp, #12
 800f0d6:	bd30      	pop	{r4, r5, pc}
 800f0d8:	20001a14 	.word	0x20001a14

0800f0dc <malloc>:
 800f0dc:	4b02      	ldr	r3, [pc, #8]	; (800f0e8 <malloc+0xc>)
 800f0de:	4601      	mov	r1, r0
 800f0e0:	6818      	ldr	r0, [r3, #0]
 800f0e2:	f000 b823 	b.w	800f12c <_malloc_r>
 800f0e6:	bf00      	nop
 800f0e8:	200001dc 	.word	0x200001dc

0800f0ec <sbrk_aligned>:
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	4e0e      	ldr	r6, [pc, #56]	; (800f128 <sbrk_aligned+0x3c>)
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	6831      	ldr	r1, [r6, #0]
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	b911      	cbnz	r1, 800f0fe <sbrk_aligned+0x12>
 800f0f8:	f000 fe40 	bl	800fd7c <_sbrk_r>
 800f0fc:	6030      	str	r0, [r6, #0]
 800f0fe:	4621      	mov	r1, r4
 800f100:	4628      	mov	r0, r5
 800f102:	f000 fe3b 	bl	800fd7c <_sbrk_r>
 800f106:	1c43      	adds	r3, r0, #1
 800f108:	d00a      	beq.n	800f120 <sbrk_aligned+0x34>
 800f10a:	1cc4      	adds	r4, r0, #3
 800f10c:	f024 0403 	bic.w	r4, r4, #3
 800f110:	42a0      	cmp	r0, r4
 800f112:	d007      	beq.n	800f124 <sbrk_aligned+0x38>
 800f114:	1a21      	subs	r1, r4, r0
 800f116:	4628      	mov	r0, r5
 800f118:	f000 fe30 	bl	800fd7c <_sbrk_r>
 800f11c:	3001      	adds	r0, #1
 800f11e:	d101      	bne.n	800f124 <sbrk_aligned+0x38>
 800f120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f124:	4620      	mov	r0, r4
 800f126:	bd70      	pop	{r4, r5, r6, pc}
 800f128:	20001a18 	.word	0x20001a18

0800f12c <_malloc_r>:
 800f12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f130:	1ccd      	adds	r5, r1, #3
 800f132:	f025 0503 	bic.w	r5, r5, #3
 800f136:	3508      	adds	r5, #8
 800f138:	2d0c      	cmp	r5, #12
 800f13a:	bf38      	it	cc
 800f13c:	250c      	movcc	r5, #12
 800f13e:	2d00      	cmp	r5, #0
 800f140:	4607      	mov	r7, r0
 800f142:	db01      	blt.n	800f148 <_malloc_r+0x1c>
 800f144:	42a9      	cmp	r1, r5
 800f146:	d905      	bls.n	800f154 <_malloc_r+0x28>
 800f148:	230c      	movs	r3, #12
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	2600      	movs	r6, #0
 800f14e:	4630      	mov	r0, r6
 800f150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f154:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f228 <_malloc_r+0xfc>
 800f158:	f000 f868 	bl	800f22c <__malloc_lock>
 800f15c:	f8d8 3000 	ldr.w	r3, [r8]
 800f160:	461c      	mov	r4, r3
 800f162:	bb5c      	cbnz	r4, 800f1bc <_malloc_r+0x90>
 800f164:	4629      	mov	r1, r5
 800f166:	4638      	mov	r0, r7
 800f168:	f7ff ffc0 	bl	800f0ec <sbrk_aligned>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	4604      	mov	r4, r0
 800f170:	d155      	bne.n	800f21e <_malloc_r+0xf2>
 800f172:	f8d8 4000 	ldr.w	r4, [r8]
 800f176:	4626      	mov	r6, r4
 800f178:	2e00      	cmp	r6, #0
 800f17a:	d145      	bne.n	800f208 <_malloc_r+0xdc>
 800f17c:	2c00      	cmp	r4, #0
 800f17e:	d048      	beq.n	800f212 <_malloc_r+0xe6>
 800f180:	6823      	ldr	r3, [r4, #0]
 800f182:	4631      	mov	r1, r6
 800f184:	4638      	mov	r0, r7
 800f186:	eb04 0903 	add.w	r9, r4, r3
 800f18a:	f000 fdf7 	bl	800fd7c <_sbrk_r>
 800f18e:	4581      	cmp	r9, r0
 800f190:	d13f      	bne.n	800f212 <_malloc_r+0xe6>
 800f192:	6821      	ldr	r1, [r4, #0]
 800f194:	1a6d      	subs	r5, r5, r1
 800f196:	4629      	mov	r1, r5
 800f198:	4638      	mov	r0, r7
 800f19a:	f7ff ffa7 	bl	800f0ec <sbrk_aligned>
 800f19e:	3001      	adds	r0, #1
 800f1a0:	d037      	beq.n	800f212 <_malloc_r+0xe6>
 800f1a2:	6823      	ldr	r3, [r4, #0]
 800f1a4:	442b      	add	r3, r5
 800f1a6:	6023      	str	r3, [r4, #0]
 800f1a8:	f8d8 3000 	ldr.w	r3, [r8]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d038      	beq.n	800f222 <_malloc_r+0xf6>
 800f1b0:	685a      	ldr	r2, [r3, #4]
 800f1b2:	42a2      	cmp	r2, r4
 800f1b4:	d12b      	bne.n	800f20e <_malloc_r+0xe2>
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	605a      	str	r2, [r3, #4]
 800f1ba:	e00f      	b.n	800f1dc <_malloc_r+0xb0>
 800f1bc:	6822      	ldr	r2, [r4, #0]
 800f1be:	1b52      	subs	r2, r2, r5
 800f1c0:	d41f      	bmi.n	800f202 <_malloc_r+0xd6>
 800f1c2:	2a0b      	cmp	r2, #11
 800f1c4:	d917      	bls.n	800f1f6 <_malloc_r+0xca>
 800f1c6:	1961      	adds	r1, r4, r5
 800f1c8:	42a3      	cmp	r3, r4
 800f1ca:	6025      	str	r5, [r4, #0]
 800f1cc:	bf18      	it	ne
 800f1ce:	6059      	strne	r1, [r3, #4]
 800f1d0:	6863      	ldr	r3, [r4, #4]
 800f1d2:	bf08      	it	eq
 800f1d4:	f8c8 1000 	streq.w	r1, [r8]
 800f1d8:	5162      	str	r2, [r4, r5]
 800f1da:	604b      	str	r3, [r1, #4]
 800f1dc:	4638      	mov	r0, r7
 800f1de:	f104 060b 	add.w	r6, r4, #11
 800f1e2:	f000 f829 	bl	800f238 <__malloc_unlock>
 800f1e6:	f026 0607 	bic.w	r6, r6, #7
 800f1ea:	1d23      	adds	r3, r4, #4
 800f1ec:	1af2      	subs	r2, r6, r3
 800f1ee:	d0ae      	beq.n	800f14e <_malloc_r+0x22>
 800f1f0:	1b9b      	subs	r3, r3, r6
 800f1f2:	50a3      	str	r3, [r4, r2]
 800f1f4:	e7ab      	b.n	800f14e <_malloc_r+0x22>
 800f1f6:	42a3      	cmp	r3, r4
 800f1f8:	6862      	ldr	r2, [r4, #4]
 800f1fa:	d1dd      	bne.n	800f1b8 <_malloc_r+0x8c>
 800f1fc:	f8c8 2000 	str.w	r2, [r8]
 800f200:	e7ec      	b.n	800f1dc <_malloc_r+0xb0>
 800f202:	4623      	mov	r3, r4
 800f204:	6864      	ldr	r4, [r4, #4]
 800f206:	e7ac      	b.n	800f162 <_malloc_r+0x36>
 800f208:	4634      	mov	r4, r6
 800f20a:	6876      	ldr	r6, [r6, #4]
 800f20c:	e7b4      	b.n	800f178 <_malloc_r+0x4c>
 800f20e:	4613      	mov	r3, r2
 800f210:	e7cc      	b.n	800f1ac <_malloc_r+0x80>
 800f212:	230c      	movs	r3, #12
 800f214:	603b      	str	r3, [r7, #0]
 800f216:	4638      	mov	r0, r7
 800f218:	f000 f80e 	bl	800f238 <__malloc_unlock>
 800f21c:	e797      	b.n	800f14e <_malloc_r+0x22>
 800f21e:	6025      	str	r5, [r4, #0]
 800f220:	e7dc      	b.n	800f1dc <_malloc_r+0xb0>
 800f222:	605b      	str	r3, [r3, #4]
 800f224:	deff      	udf	#255	; 0xff
 800f226:	bf00      	nop
 800f228:	20001a14 	.word	0x20001a14

0800f22c <__malloc_lock>:
 800f22c:	4801      	ldr	r0, [pc, #4]	; (800f234 <__malloc_lock+0x8>)
 800f22e:	f7ff b88a 	b.w	800e346 <__retarget_lock_acquire_recursive>
 800f232:	bf00      	nop
 800f234:	20001a10 	.word	0x20001a10

0800f238 <__malloc_unlock>:
 800f238:	4801      	ldr	r0, [pc, #4]	; (800f240 <__malloc_unlock+0x8>)
 800f23a:	f7ff b885 	b.w	800e348 <__retarget_lock_release_recursive>
 800f23e:	bf00      	nop
 800f240:	20001a10 	.word	0x20001a10

0800f244 <_Balloc>:
 800f244:	b570      	push	{r4, r5, r6, lr}
 800f246:	69c6      	ldr	r6, [r0, #28]
 800f248:	4604      	mov	r4, r0
 800f24a:	460d      	mov	r5, r1
 800f24c:	b976      	cbnz	r6, 800f26c <_Balloc+0x28>
 800f24e:	2010      	movs	r0, #16
 800f250:	f7ff ff44 	bl	800f0dc <malloc>
 800f254:	4602      	mov	r2, r0
 800f256:	61e0      	str	r0, [r4, #28]
 800f258:	b920      	cbnz	r0, 800f264 <_Balloc+0x20>
 800f25a:	4b18      	ldr	r3, [pc, #96]	; (800f2bc <_Balloc+0x78>)
 800f25c:	4818      	ldr	r0, [pc, #96]	; (800f2c0 <_Balloc+0x7c>)
 800f25e:	216b      	movs	r1, #107	; 0x6b
 800f260:	f000 fdaa 	bl	800fdb8 <__assert_func>
 800f264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f268:	6006      	str	r6, [r0, #0]
 800f26a:	60c6      	str	r6, [r0, #12]
 800f26c:	69e6      	ldr	r6, [r4, #28]
 800f26e:	68f3      	ldr	r3, [r6, #12]
 800f270:	b183      	cbz	r3, 800f294 <_Balloc+0x50>
 800f272:	69e3      	ldr	r3, [r4, #28]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f27a:	b9b8      	cbnz	r0, 800f2ac <_Balloc+0x68>
 800f27c:	2101      	movs	r1, #1
 800f27e:	fa01 f605 	lsl.w	r6, r1, r5
 800f282:	1d72      	adds	r2, r6, #5
 800f284:	0092      	lsls	r2, r2, #2
 800f286:	4620      	mov	r0, r4
 800f288:	f000 fdb4 	bl	800fdf4 <_calloc_r>
 800f28c:	b160      	cbz	r0, 800f2a8 <_Balloc+0x64>
 800f28e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f292:	e00e      	b.n	800f2b2 <_Balloc+0x6e>
 800f294:	2221      	movs	r2, #33	; 0x21
 800f296:	2104      	movs	r1, #4
 800f298:	4620      	mov	r0, r4
 800f29a:	f000 fdab 	bl	800fdf4 <_calloc_r>
 800f29e:	69e3      	ldr	r3, [r4, #28]
 800f2a0:	60f0      	str	r0, [r6, #12]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1e4      	bne.n	800f272 <_Balloc+0x2e>
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	bd70      	pop	{r4, r5, r6, pc}
 800f2ac:	6802      	ldr	r2, [r0, #0]
 800f2ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2b8:	e7f7      	b.n	800f2aa <_Balloc+0x66>
 800f2ba:	bf00      	nop
 800f2bc:	080105b5 	.word	0x080105b5
 800f2c0:	08010635 	.word	0x08010635

0800f2c4 <_Bfree>:
 800f2c4:	b570      	push	{r4, r5, r6, lr}
 800f2c6:	69c6      	ldr	r6, [r0, #28]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	b976      	cbnz	r6, 800f2ec <_Bfree+0x28>
 800f2ce:	2010      	movs	r0, #16
 800f2d0:	f7ff ff04 	bl	800f0dc <malloc>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	61e8      	str	r0, [r5, #28]
 800f2d8:	b920      	cbnz	r0, 800f2e4 <_Bfree+0x20>
 800f2da:	4b09      	ldr	r3, [pc, #36]	; (800f300 <_Bfree+0x3c>)
 800f2dc:	4809      	ldr	r0, [pc, #36]	; (800f304 <_Bfree+0x40>)
 800f2de:	218f      	movs	r1, #143	; 0x8f
 800f2e0:	f000 fd6a 	bl	800fdb8 <__assert_func>
 800f2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2e8:	6006      	str	r6, [r0, #0]
 800f2ea:	60c6      	str	r6, [r0, #12]
 800f2ec:	b13c      	cbz	r4, 800f2fe <_Bfree+0x3a>
 800f2ee:	69eb      	ldr	r3, [r5, #28]
 800f2f0:	6862      	ldr	r2, [r4, #4]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2f8:	6021      	str	r1, [r4, #0]
 800f2fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2fe:	bd70      	pop	{r4, r5, r6, pc}
 800f300:	080105b5 	.word	0x080105b5
 800f304:	08010635 	.word	0x08010635

0800f308 <__multadd>:
 800f308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30c:	690d      	ldr	r5, [r1, #16]
 800f30e:	4607      	mov	r7, r0
 800f310:	460c      	mov	r4, r1
 800f312:	461e      	mov	r6, r3
 800f314:	f101 0c14 	add.w	ip, r1, #20
 800f318:	2000      	movs	r0, #0
 800f31a:	f8dc 3000 	ldr.w	r3, [ip]
 800f31e:	b299      	uxth	r1, r3
 800f320:	fb02 6101 	mla	r1, r2, r1, r6
 800f324:	0c1e      	lsrs	r6, r3, #16
 800f326:	0c0b      	lsrs	r3, r1, #16
 800f328:	fb02 3306 	mla	r3, r2, r6, r3
 800f32c:	b289      	uxth	r1, r1
 800f32e:	3001      	adds	r0, #1
 800f330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f334:	4285      	cmp	r5, r0
 800f336:	f84c 1b04 	str.w	r1, [ip], #4
 800f33a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f33e:	dcec      	bgt.n	800f31a <__multadd+0x12>
 800f340:	b30e      	cbz	r6, 800f386 <__multadd+0x7e>
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	42ab      	cmp	r3, r5
 800f346:	dc19      	bgt.n	800f37c <__multadd+0x74>
 800f348:	6861      	ldr	r1, [r4, #4]
 800f34a:	4638      	mov	r0, r7
 800f34c:	3101      	adds	r1, #1
 800f34e:	f7ff ff79 	bl	800f244 <_Balloc>
 800f352:	4680      	mov	r8, r0
 800f354:	b928      	cbnz	r0, 800f362 <__multadd+0x5a>
 800f356:	4602      	mov	r2, r0
 800f358:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <__multadd+0x84>)
 800f35a:	480d      	ldr	r0, [pc, #52]	; (800f390 <__multadd+0x88>)
 800f35c:	21ba      	movs	r1, #186	; 0xba
 800f35e:	f000 fd2b 	bl	800fdb8 <__assert_func>
 800f362:	6922      	ldr	r2, [r4, #16]
 800f364:	3202      	adds	r2, #2
 800f366:	f104 010c 	add.w	r1, r4, #12
 800f36a:	0092      	lsls	r2, r2, #2
 800f36c:	300c      	adds	r0, #12
 800f36e:	f000 fd15 	bl	800fd9c <memcpy>
 800f372:	4621      	mov	r1, r4
 800f374:	4638      	mov	r0, r7
 800f376:	f7ff ffa5 	bl	800f2c4 <_Bfree>
 800f37a:	4644      	mov	r4, r8
 800f37c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f380:	3501      	adds	r5, #1
 800f382:	615e      	str	r6, [r3, #20]
 800f384:	6125      	str	r5, [r4, #16]
 800f386:	4620      	mov	r0, r4
 800f388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38c:	08010624 	.word	0x08010624
 800f390:	08010635 	.word	0x08010635

0800f394 <__hi0bits>:
 800f394:	0c03      	lsrs	r3, r0, #16
 800f396:	041b      	lsls	r3, r3, #16
 800f398:	b9d3      	cbnz	r3, 800f3d0 <__hi0bits+0x3c>
 800f39a:	0400      	lsls	r0, r0, #16
 800f39c:	2310      	movs	r3, #16
 800f39e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f3a2:	bf04      	itt	eq
 800f3a4:	0200      	lsleq	r0, r0, #8
 800f3a6:	3308      	addeq	r3, #8
 800f3a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f3ac:	bf04      	itt	eq
 800f3ae:	0100      	lsleq	r0, r0, #4
 800f3b0:	3304      	addeq	r3, #4
 800f3b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3b6:	bf04      	itt	eq
 800f3b8:	0080      	lsleq	r0, r0, #2
 800f3ba:	3302      	addeq	r3, #2
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	db05      	blt.n	800f3cc <__hi0bits+0x38>
 800f3c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3c4:	f103 0301 	add.w	r3, r3, #1
 800f3c8:	bf08      	it	eq
 800f3ca:	2320      	moveq	r3, #32
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	4770      	bx	lr
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	e7e4      	b.n	800f39e <__hi0bits+0xa>

0800f3d4 <__lo0bits>:
 800f3d4:	6803      	ldr	r3, [r0, #0]
 800f3d6:	f013 0207 	ands.w	r2, r3, #7
 800f3da:	d00c      	beq.n	800f3f6 <__lo0bits+0x22>
 800f3dc:	07d9      	lsls	r1, r3, #31
 800f3de:	d422      	bmi.n	800f426 <__lo0bits+0x52>
 800f3e0:	079a      	lsls	r2, r3, #30
 800f3e2:	bf49      	itett	mi
 800f3e4:	085b      	lsrmi	r3, r3, #1
 800f3e6:	089b      	lsrpl	r3, r3, #2
 800f3e8:	6003      	strmi	r3, [r0, #0]
 800f3ea:	2201      	movmi	r2, #1
 800f3ec:	bf5c      	itt	pl
 800f3ee:	6003      	strpl	r3, [r0, #0]
 800f3f0:	2202      	movpl	r2, #2
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	4770      	bx	lr
 800f3f6:	b299      	uxth	r1, r3
 800f3f8:	b909      	cbnz	r1, 800f3fe <__lo0bits+0x2a>
 800f3fa:	0c1b      	lsrs	r3, r3, #16
 800f3fc:	2210      	movs	r2, #16
 800f3fe:	b2d9      	uxtb	r1, r3
 800f400:	b909      	cbnz	r1, 800f406 <__lo0bits+0x32>
 800f402:	3208      	adds	r2, #8
 800f404:	0a1b      	lsrs	r3, r3, #8
 800f406:	0719      	lsls	r1, r3, #28
 800f408:	bf04      	itt	eq
 800f40a:	091b      	lsreq	r3, r3, #4
 800f40c:	3204      	addeq	r2, #4
 800f40e:	0799      	lsls	r1, r3, #30
 800f410:	bf04      	itt	eq
 800f412:	089b      	lsreq	r3, r3, #2
 800f414:	3202      	addeq	r2, #2
 800f416:	07d9      	lsls	r1, r3, #31
 800f418:	d403      	bmi.n	800f422 <__lo0bits+0x4e>
 800f41a:	085b      	lsrs	r3, r3, #1
 800f41c:	f102 0201 	add.w	r2, r2, #1
 800f420:	d003      	beq.n	800f42a <__lo0bits+0x56>
 800f422:	6003      	str	r3, [r0, #0]
 800f424:	e7e5      	b.n	800f3f2 <__lo0bits+0x1e>
 800f426:	2200      	movs	r2, #0
 800f428:	e7e3      	b.n	800f3f2 <__lo0bits+0x1e>
 800f42a:	2220      	movs	r2, #32
 800f42c:	e7e1      	b.n	800f3f2 <__lo0bits+0x1e>
	...

0800f430 <__i2b>:
 800f430:	b510      	push	{r4, lr}
 800f432:	460c      	mov	r4, r1
 800f434:	2101      	movs	r1, #1
 800f436:	f7ff ff05 	bl	800f244 <_Balloc>
 800f43a:	4602      	mov	r2, r0
 800f43c:	b928      	cbnz	r0, 800f44a <__i2b+0x1a>
 800f43e:	4b05      	ldr	r3, [pc, #20]	; (800f454 <__i2b+0x24>)
 800f440:	4805      	ldr	r0, [pc, #20]	; (800f458 <__i2b+0x28>)
 800f442:	f240 1145 	movw	r1, #325	; 0x145
 800f446:	f000 fcb7 	bl	800fdb8 <__assert_func>
 800f44a:	2301      	movs	r3, #1
 800f44c:	6144      	str	r4, [r0, #20]
 800f44e:	6103      	str	r3, [r0, #16]
 800f450:	bd10      	pop	{r4, pc}
 800f452:	bf00      	nop
 800f454:	08010624 	.word	0x08010624
 800f458:	08010635 	.word	0x08010635

0800f45c <__multiply>:
 800f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	4691      	mov	r9, r2
 800f462:	690a      	ldr	r2, [r1, #16]
 800f464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f468:	429a      	cmp	r2, r3
 800f46a:	bfb8      	it	lt
 800f46c:	460b      	movlt	r3, r1
 800f46e:	460c      	mov	r4, r1
 800f470:	bfbc      	itt	lt
 800f472:	464c      	movlt	r4, r9
 800f474:	4699      	movlt	r9, r3
 800f476:	6927      	ldr	r7, [r4, #16]
 800f478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f47c:	68a3      	ldr	r3, [r4, #8]
 800f47e:	6861      	ldr	r1, [r4, #4]
 800f480:	eb07 060a 	add.w	r6, r7, sl
 800f484:	42b3      	cmp	r3, r6
 800f486:	b085      	sub	sp, #20
 800f488:	bfb8      	it	lt
 800f48a:	3101      	addlt	r1, #1
 800f48c:	f7ff feda 	bl	800f244 <_Balloc>
 800f490:	b930      	cbnz	r0, 800f4a0 <__multiply+0x44>
 800f492:	4602      	mov	r2, r0
 800f494:	4b44      	ldr	r3, [pc, #272]	; (800f5a8 <__multiply+0x14c>)
 800f496:	4845      	ldr	r0, [pc, #276]	; (800f5ac <__multiply+0x150>)
 800f498:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f49c:	f000 fc8c 	bl	800fdb8 <__assert_func>
 800f4a0:	f100 0514 	add.w	r5, r0, #20
 800f4a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4a8:	462b      	mov	r3, r5
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4543      	cmp	r3, r8
 800f4ae:	d321      	bcc.n	800f4f4 <__multiply+0x98>
 800f4b0:	f104 0314 	add.w	r3, r4, #20
 800f4b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f4b8:	f109 0314 	add.w	r3, r9, #20
 800f4bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f4c0:	9202      	str	r2, [sp, #8]
 800f4c2:	1b3a      	subs	r2, r7, r4
 800f4c4:	3a15      	subs	r2, #21
 800f4c6:	f022 0203 	bic.w	r2, r2, #3
 800f4ca:	3204      	adds	r2, #4
 800f4cc:	f104 0115 	add.w	r1, r4, #21
 800f4d0:	428f      	cmp	r7, r1
 800f4d2:	bf38      	it	cc
 800f4d4:	2204      	movcc	r2, #4
 800f4d6:	9201      	str	r2, [sp, #4]
 800f4d8:	9a02      	ldr	r2, [sp, #8]
 800f4da:	9303      	str	r3, [sp, #12]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d80c      	bhi.n	800f4fa <__multiply+0x9e>
 800f4e0:	2e00      	cmp	r6, #0
 800f4e2:	dd03      	ble.n	800f4ec <__multiply+0x90>
 800f4e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d05b      	beq.n	800f5a4 <__multiply+0x148>
 800f4ec:	6106      	str	r6, [r0, #16]
 800f4ee:	b005      	add	sp, #20
 800f4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f4:	f843 2b04 	str.w	r2, [r3], #4
 800f4f8:	e7d8      	b.n	800f4ac <__multiply+0x50>
 800f4fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4fe:	f1ba 0f00 	cmp.w	sl, #0
 800f502:	d024      	beq.n	800f54e <__multiply+0xf2>
 800f504:	f104 0e14 	add.w	lr, r4, #20
 800f508:	46a9      	mov	r9, r5
 800f50a:	f04f 0c00 	mov.w	ip, #0
 800f50e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f512:	f8d9 1000 	ldr.w	r1, [r9]
 800f516:	fa1f fb82 	uxth.w	fp, r2
 800f51a:	b289      	uxth	r1, r1
 800f51c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f524:	f8d9 2000 	ldr.w	r2, [r9]
 800f528:	4461      	add	r1, ip
 800f52a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f52e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f536:	b289      	uxth	r1, r1
 800f538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f53c:	4577      	cmp	r7, lr
 800f53e:	f849 1b04 	str.w	r1, [r9], #4
 800f542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f546:	d8e2      	bhi.n	800f50e <__multiply+0xb2>
 800f548:	9a01      	ldr	r2, [sp, #4]
 800f54a:	f845 c002 	str.w	ip, [r5, r2]
 800f54e:	9a03      	ldr	r2, [sp, #12]
 800f550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f554:	3304      	adds	r3, #4
 800f556:	f1b9 0f00 	cmp.w	r9, #0
 800f55a:	d021      	beq.n	800f5a0 <__multiply+0x144>
 800f55c:	6829      	ldr	r1, [r5, #0]
 800f55e:	f104 0c14 	add.w	ip, r4, #20
 800f562:	46ae      	mov	lr, r5
 800f564:	f04f 0a00 	mov.w	sl, #0
 800f568:	f8bc b000 	ldrh.w	fp, [ip]
 800f56c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f570:	fb09 220b 	mla	r2, r9, fp, r2
 800f574:	4452      	add	r2, sl
 800f576:	b289      	uxth	r1, r1
 800f578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f57c:	f84e 1b04 	str.w	r1, [lr], #4
 800f580:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f588:	f8be 1000 	ldrh.w	r1, [lr]
 800f58c:	fb09 110a 	mla	r1, r9, sl, r1
 800f590:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f594:	4567      	cmp	r7, ip
 800f596:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f59a:	d8e5      	bhi.n	800f568 <__multiply+0x10c>
 800f59c:	9a01      	ldr	r2, [sp, #4]
 800f59e:	50a9      	str	r1, [r5, r2]
 800f5a0:	3504      	adds	r5, #4
 800f5a2:	e799      	b.n	800f4d8 <__multiply+0x7c>
 800f5a4:	3e01      	subs	r6, #1
 800f5a6:	e79b      	b.n	800f4e0 <__multiply+0x84>
 800f5a8:	08010624 	.word	0x08010624
 800f5ac:	08010635 	.word	0x08010635

0800f5b0 <__pow5mult>:
 800f5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b4:	4615      	mov	r5, r2
 800f5b6:	f012 0203 	ands.w	r2, r2, #3
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	460f      	mov	r7, r1
 800f5be:	d007      	beq.n	800f5d0 <__pow5mult+0x20>
 800f5c0:	4c25      	ldr	r4, [pc, #148]	; (800f658 <__pow5mult+0xa8>)
 800f5c2:	3a01      	subs	r2, #1
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5ca:	f7ff fe9d 	bl	800f308 <__multadd>
 800f5ce:	4607      	mov	r7, r0
 800f5d0:	10ad      	asrs	r5, r5, #2
 800f5d2:	d03d      	beq.n	800f650 <__pow5mult+0xa0>
 800f5d4:	69f4      	ldr	r4, [r6, #28]
 800f5d6:	b97c      	cbnz	r4, 800f5f8 <__pow5mult+0x48>
 800f5d8:	2010      	movs	r0, #16
 800f5da:	f7ff fd7f 	bl	800f0dc <malloc>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	61f0      	str	r0, [r6, #28]
 800f5e2:	b928      	cbnz	r0, 800f5f0 <__pow5mult+0x40>
 800f5e4:	4b1d      	ldr	r3, [pc, #116]	; (800f65c <__pow5mult+0xac>)
 800f5e6:	481e      	ldr	r0, [pc, #120]	; (800f660 <__pow5mult+0xb0>)
 800f5e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f5ec:	f000 fbe4 	bl	800fdb8 <__assert_func>
 800f5f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5f4:	6004      	str	r4, [r0, #0]
 800f5f6:	60c4      	str	r4, [r0, #12]
 800f5f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f5fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f600:	b94c      	cbnz	r4, 800f616 <__pow5mult+0x66>
 800f602:	f240 2171 	movw	r1, #625	; 0x271
 800f606:	4630      	mov	r0, r6
 800f608:	f7ff ff12 	bl	800f430 <__i2b>
 800f60c:	2300      	movs	r3, #0
 800f60e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f612:	4604      	mov	r4, r0
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	f04f 0900 	mov.w	r9, #0
 800f61a:	07eb      	lsls	r3, r5, #31
 800f61c:	d50a      	bpl.n	800f634 <__pow5mult+0x84>
 800f61e:	4639      	mov	r1, r7
 800f620:	4622      	mov	r2, r4
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ff1a 	bl	800f45c <__multiply>
 800f628:	4639      	mov	r1, r7
 800f62a:	4680      	mov	r8, r0
 800f62c:	4630      	mov	r0, r6
 800f62e:	f7ff fe49 	bl	800f2c4 <_Bfree>
 800f632:	4647      	mov	r7, r8
 800f634:	106d      	asrs	r5, r5, #1
 800f636:	d00b      	beq.n	800f650 <__pow5mult+0xa0>
 800f638:	6820      	ldr	r0, [r4, #0]
 800f63a:	b938      	cbnz	r0, 800f64c <__pow5mult+0x9c>
 800f63c:	4622      	mov	r2, r4
 800f63e:	4621      	mov	r1, r4
 800f640:	4630      	mov	r0, r6
 800f642:	f7ff ff0b 	bl	800f45c <__multiply>
 800f646:	6020      	str	r0, [r4, #0]
 800f648:	f8c0 9000 	str.w	r9, [r0]
 800f64c:	4604      	mov	r4, r0
 800f64e:	e7e4      	b.n	800f61a <__pow5mult+0x6a>
 800f650:	4638      	mov	r0, r7
 800f652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f656:	bf00      	nop
 800f658:	08010780 	.word	0x08010780
 800f65c:	080105b5 	.word	0x080105b5
 800f660:	08010635 	.word	0x08010635

0800f664 <__lshift>:
 800f664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f668:	460c      	mov	r4, r1
 800f66a:	6849      	ldr	r1, [r1, #4]
 800f66c:	6923      	ldr	r3, [r4, #16]
 800f66e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f672:	68a3      	ldr	r3, [r4, #8]
 800f674:	4607      	mov	r7, r0
 800f676:	4691      	mov	r9, r2
 800f678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f67c:	f108 0601 	add.w	r6, r8, #1
 800f680:	42b3      	cmp	r3, r6
 800f682:	db0b      	blt.n	800f69c <__lshift+0x38>
 800f684:	4638      	mov	r0, r7
 800f686:	f7ff fddd 	bl	800f244 <_Balloc>
 800f68a:	4605      	mov	r5, r0
 800f68c:	b948      	cbnz	r0, 800f6a2 <__lshift+0x3e>
 800f68e:	4602      	mov	r2, r0
 800f690:	4b28      	ldr	r3, [pc, #160]	; (800f734 <__lshift+0xd0>)
 800f692:	4829      	ldr	r0, [pc, #164]	; (800f738 <__lshift+0xd4>)
 800f694:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f698:	f000 fb8e 	bl	800fdb8 <__assert_func>
 800f69c:	3101      	adds	r1, #1
 800f69e:	005b      	lsls	r3, r3, #1
 800f6a0:	e7ee      	b.n	800f680 <__lshift+0x1c>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	f100 0114 	add.w	r1, r0, #20
 800f6a8:	f100 0210 	add.w	r2, r0, #16
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	4553      	cmp	r3, sl
 800f6b0:	db33      	blt.n	800f71a <__lshift+0xb6>
 800f6b2:	6920      	ldr	r0, [r4, #16]
 800f6b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6b8:	f104 0314 	add.w	r3, r4, #20
 800f6bc:	f019 091f 	ands.w	r9, r9, #31
 800f6c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6c8:	d02b      	beq.n	800f722 <__lshift+0xbe>
 800f6ca:	f1c9 0e20 	rsb	lr, r9, #32
 800f6ce:	468a      	mov	sl, r1
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	6818      	ldr	r0, [r3, #0]
 800f6d4:	fa00 f009 	lsl.w	r0, r0, r9
 800f6d8:	4310      	orrs	r0, r2
 800f6da:	f84a 0b04 	str.w	r0, [sl], #4
 800f6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e2:	459c      	cmp	ip, r3
 800f6e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6e8:	d8f3      	bhi.n	800f6d2 <__lshift+0x6e>
 800f6ea:	ebac 0304 	sub.w	r3, ip, r4
 800f6ee:	3b15      	subs	r3, #21
 800f6f0:	f023 0303 	bic.w	r3, r3, #3
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	f104 0015 	add.w	r0, r4, #21
 800f6fa:	4584      	cmp	ip, r0
 800f6fc:	bf38      	it	cc
 800f6fe:	2304      	movcc	r3, #4
 800f700:	50ca      	str	r2, [r1, r3]
 800f702:	b10a      	cbz	r2, 800f708 <__lshift+0xa4>
 800f704:	f108 0602 	add.w	r6, r8, #2
 800f708:	3e01      	subs	r6, #1
 800f70a:	4638      	mov	r0, r7
 800f70c:	612e      	str	r6, [r5, #16]
 800f70e:	4621      	mov	r1, r4
 800f710:	f7ff fdd8 	bl	800f2c4 <_Bfree>
 800f714:	4628      	mov	r0, r5
 800f716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f71a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f71e:	3301      	adds	r3, #1
 800f720:	e7c5      	b.n	800f6ae <__lshift+0x4a>
 800f722:	3904      	subs	r1, #4
 800f724:	f853 2b04 	ldr.w	r2, [r3], #4
 800f728:	f841 2f04 	str.w	r2, [r1, #4]!
 800f72c:	459c      	cmp	ip, r3
 800f72e:	d8f9      	bhi.n	800f724 <__lshift+0xc0>
 800f730:	e7ea      	b.n	800f708 <__lshift+0xa4>
 800f732:	bf00      	nop
 800f734:	08010624 	.word	0x08010624
 800f738:	08010635 	.word	0x08010635

0800f73c <__mcmp>:
 800f73c:	b530      	push	{r4, r5, lr}
 800f73e:	6902      	ldr	r2, [r0, #16]
 800f740:	690c      	ldr	r4, [r1, #16]
 800f742:	1b12      	subs	r2, r2, r4
 800f744:	d10e      	bne.n	800f764 <__mcmp+0x28>
 800f746:	f100 0314 	add.w	r3, r0, #20
 800f74a:	3114      	adds	r1, #20
 800f74c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f75c:	42a5      	cmp	r5, r4
 800f75e:	d003      	beq.n	800f768 <__mcmp+0x2c>
 800f760:	d305      	bcc.n	800f76e <__mcmp+0x32>
 800f762:	2201      	movs	r2, #1
 800f764:	4610      	mov	r0, r2
 800f766:	bd30      	pop	{r4, r5, pc}
 800f768:	4283      	cmp	r3, r0
 800f76a:	d3f3      	bcc.n	800f754 <__mcmp+0x18>
 800f76c:	e7fa      	b.n	800f764 <__mcmp+0x28>
 800f76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f772:	e7f7      	b.n	800f764 <__mcmp+0x28>

0800f774 <__mdiff>:
 800f774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f778:	460c      	mov	r4, r1
 800f77a:	4606      	mov	r6, r0
 800f77c:	4611      	mov	r1, r2
 800f77e:	4620      	mov	r0, r4
 800f780:	4690      	mov	r8, r2
 800f782:	f7ff ffdb 	bl	800f73c <__mcmp>
 800f786:	1e05      	subs	r5, r0, #0
 800f788:	d110      	bne.n	800f7ac <__mdiff+0x38>
 800f78a:	4629      	mov	r1, r5
 800f78c:	4630      	mov	r0, r6
 800f78e:	f7ff fd59 	bl	800f244 <_Balloc>
 800f792:	b930      	cbnz	r0, 800f7a2 <__mdiff+0x2e>
 800f794:	4b3a      	ldr	r3, [pc, #232]	; (800f880 <__mdiff+0x10c>)
 800f796:	4602      	mov	r2, r0
 800f798:	f240 2137 	movw	r1, #567	; 0x237
 800f79c:	4839      	ldr	r0, [pc, #228]	; (800f884 <__mdiff+0x110>)
 800f79e:	f000 fb0b 	bl	800fdb8 <__assert_func>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ac:	bfa4      	itt	ge
 800f7ae:	4643      	movge	r3, r8
 800f7b0:	46a0      	movge	r8, r4
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7b8:	bfa6      	itte	ge
 800f7ba:	461c      	movge	r4, r3
 800f7bc:	2500      	movge	r5, #0
 800f7be:	2501      	movlt	r5, #1
 800f7c0:	f7ff fd40 	bl	800f244 <_Balloc>
 800f7c4:	b920      	cbnz	r0, 800f7d0 <__mdiff+0x5c>
 800f7c6:	4b2e      	ldr	r3, [pc, #184]	; (800f880 <__mdiff+0x10c>)
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	f240 2145 	movw	r1, #581	; 0x245
 800f7ce:	e7e5      	b.n	800f79c <__mdiff+0x28>
 800f7d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7d4:	6926      	ldr	r6, [r4, #16]
 800f7d6:	60c5      	str	r5, [r0, #12]
 800f7d8:	f104 0914 	add.w	r9, r4, #20
 800f7dc:	f108 0514 	add.w	r5, r8, #20
 800f7e0:	f100 0e14 	add.w	lr, r0, #20
 800f7e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7ec:	f108 0210 	add.w	r2, r8, #16
 800f7f0:	46f2      	mov	sl, lr
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7fc:	fa11 f88b 	uxtah	r8, r1, fp
 800f800:	b299      	uxth	r1, r3
 800f802:	0c1b      	lsrs	r3, r3, #16
 800f804:	eba8 0801 	sub.w	r8, r8, r1
 800f808:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f80c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f810:	fa1f f888 	uxth.w	r8, r8
 800f814:	1419      	asrs	r1, r3, #16
 800f816:	454e      	cmp	r6, r9
 800f818:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f81c:	f84a 3b04 	str.w	r3, [sl], #4
 800f820:	d8e8      	bhi.n	800f7f4 <__mdiff+0x80>
 800f822:	1b33      	subs	r3, r6, r4
 800f824:	3b15      	subs	r3, #21
 800f826:	f023 0303 	bic.w	r3, r3, #3
 800f82a:	3304      	adds	r3, #4
 800f82c:	3415      	adds	r4, #21
 800f82e:	42a6      	cmp	r6, r4
 800f830:	bf38      	it	cc
 800f832:	2304      	movcc	r3, #4
 800f834:	441d      	add	r5, r3
 800f836:	4473      	add	r3, lr
 800f838:	469e      	mov	lr, r3
 800f83a:	462e      	mov	r6, r5
 800f83c:	4566      	cmp	r6, ip
 800f83e:	d30e      	bcc.n	800f85e <__mdiff+0xea>
 800f840:	f10c 0203 	add.w	r2, ip, #3
 800f844:	1b52      	subs	r2, r2, r5
 800f846:	f022 0203 	bic.w	r2, r2, #3
 800f84a:	3d03      	subs	r5, #3
 800f84c:	45ac      	cmp	ip, r5
 800f84e:	bf38      	it	cc
 800f850:	2200      	movcc	r2, #0
 800f852:	4413      	add	r3, r2
 800f854:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f858:	b17a      	cbz	r2, 800f87a <__mdiff+0x106>
 800f85a:	6107      	str	r7, [r0, #16]
 800f85c:	e7a4      	b.n	800f7a8 <__mdiff+0x34>
 800f85e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f862:	fa11 f288 	uxtah	r2, r1, r8
 800f866:	1414      	asrs	r4, r2, #16
 800f868:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f86c:	b292      	uxth	r2, r2
 800f86e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f872:	f84e 2b04 	str.w	r2, [lr], #4
 800f876:	1421      	asrs	r1, r4, #16
 800f878:	e7e0      	b.n	800f83c <__mdiff+0xc8>
 800f87a:	3f01      	subs	r7, #1
 800f87c:	e7ea      	b.n	800f854 <__mdiff+0xe0>
 800f87e:	bf00      	nop
 800f880:	08010624 	.word	0x08010624
 800f884:	08010635 	.word	0x08010635

0800f888 <__d2b>:
 800f888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f88c:	460f      	mov	r7, r1
 800f88e:	2101      	movs	r1, #1
 800f890:	ec59 8b10 	vmov	r8, r9, d0
 800f894:	4616      	mov	r6, r2
 800f896:	f7ff fcd5 	bl	800f244 <_Balloc>
 800f89a:	4604      	mov	r4, r0
 800f89c:	b930      	cbnz	r0, 800f8ac <__d2b+0x24>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	4b24      	ldr	r3, [pc, #144]	; (800f934 <__d2b+0xac>)
 800f8a2:	4825      	ldr	r0, [pc, #148]	; (800f938 <__d2b+0xb0>)
 800f8a4:	f240 310f 	movw	r1, #783	; 0x30f
 800f8a8:	f000 fa86 	bl	800fdb8 <__assert_func>
 800f8ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f8b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8b4:	bb2d      	cbnz	r5, 800f902 <__d2b+0x7a>
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	f1b8 0300 	subs.w	r3, r8, #0
 800f8bc:	d026      	beq.n	800f90c <__d2b+0x84>
 800f8be:	4668      	mov	r0, sp
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	f7ff fd87 	bl	800f3d4 <__lo0bits>
 800f8c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f8ca:	b1e8      	cbz	r0, 800f908 <__d2b+0x80>
 800f8cc:	f1c0 0320 	rsb	r3, r0, #32
 800f8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d4:	430b      	orrs	r3, r1
 800f8d6:	40c2      	lsrs	r2, r0
 800f8d8:	6163      	str	r3, [r4, #20]
 800f8da:	9201      	str	r2, [sp, #4]
 800f8dc:	9b01      	ldr	r3, [sp, #4]
 800f8de:	61a3      	str	r3, [r4, #24]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bf14      	ite	ne
 800f8e4:	2202      	movne	r2, #2
 800f8e6:	2201      	moveq	r2, #1
 800f8e8:	6122      	str	r2, [r4, #16]
 800f8ea:	b1bd      	cbz	r5, 800f91c <__d2b+0x94>
 800f8ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8f0:	4405      	add	r5, r0
 800f8f2:	603d      	str	r5, [r7, #0]
 800f8f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8f8:	6030      	str	r0, [r6, #0]
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	b003      	add	sp, #12
 800f8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f906:	e7d6      	b.n	800f8b6 <__d2b+0x2e>
 800f908:	6161      	str	r1, [r4, #20]
 800f90a:	e7e7      	b.n	800f8dc <__d2b+0x54>
 800f90c:	a801      	add	r0, sp, #4
 800f90e:	f7ff fd61 	bl	800f3d4 <__lo0bits>
 800f912:	9b01      	ldr	r3, [sp, #4]
 800f914:	6163      	str	r3, [r4, #20]
 800f916:	3020      	adds	r0, #32
 800f918:	2201      	movs	r2, #1
 800f91a:	e7e5      	b.n	800f8e8 <__d2b+0x60>
 800f91c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f920:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f924:	6038      	str	r0, [r7, #0]
 800f926:	6918      	ldr	r0, [r3, #16]
 800f928:	f7ff fd34 	bl	800f394 <__hi0bits>
 800f92c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f930:	e7e2      	b.n	800f8f8 <__d2b+0x70>
 800f932:	bf00      	nop
 800f934:	08010624 	.word	0x08010624
 800f938:	08010635 	.word	0x08010635

0800f93c <__ssputs_r>:
 800f93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f940:	688e      	ldr	r6, [r1, #8]
 800f942:	461f      	mov	r7, r3
 800f944:	42be      	cmp	r6, r7
 800f946:	680b      	ldr	r3, [r1, #0]
 800f948:	4682      	mov	sl, r0
 800f94a:	460c      	mov	r4, r1
 800f94c:	4690      	mov	r8, r2
 800f94e:	d82c      	bhi.n	800f9aa <__ssputs_r+0x6e>
 800f950:	898a      	ldrh	r2, [r1, #12]
 800f952:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f956:	d026      	beq.n	800f9a6 <__ssputs_r+0x6a>
 800f958:	6965      	ldr	r5, [r4, #20]
 800f95a:	6909      	ldr	r1, [r1, #16]
 800f95c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f960:	eba3 0901 	sub.w	r9, r3, r1
 800f964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f968:	1c7b      	adds	r3, r7, #1
 800f96a:	444b      	add	r3, r9
 800f96c:	106d      	asrs	r5, r5, #1
 800f96e:	429d      	cmp	r5, r3
 800f970:	bf38      	it	cc
 800f972:	461d      	movcc	r5, r3
 800f974:	0553      	lsls	r3, r2, #21
 800f976:	d527      	bpl.n	800f9c8 <__ssputs_r+0x8c>
 800f978:	4629      	mov	r1, r5
 800f97a:	f7ff fbd7 	bl	800f12c <_malloc_r>
 800f97e:	4606      	mov	r6, r0
 800f980:	b360      	cbz	r0, 800f9dc <__ssputs_r+0xa0>
 800f982:	6921      	ldr	r1, [r4, #16]
 800f984:	464a      	mov	r2, r9
 800f986:	f000 fa09 	bl	800fd9c <memcpy>
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	6126      	str	r6, [r4, #16]
 800f998:	6165      	str	r5, [r4, #20]
 800f99a:	444e      	add	r6, r9
 800f99c:	eba5 0509 	sub.w	r5, r5, r9
 800f9a0:	6026      	str	r6, [r4, #0]
 800f9a2:	60a5      	str	r5, [r4, #8]
 800f9a4:	463e      	mov	r6, r7
 800f9a6:	42be      	cmp	r6, r7
 800f9a8:	d900      	bls.n	800f9ac <__ssputs_r+0x70>
 800f9aa:	463e      	mov	r6, r7
 800f9ac:	6820      	ldr	r0, [r4, #0]
 800f9ae:	4632      	mov	r2, r6
 800f9b0:	4641      	mov	r1, r8
 800f9b2:	f000 f9c9 	bl	800fd48 <memmove>
 800f9b6:	68a3      	ldr	r3, [r4, #8]
 800f9b8:	1b9b      	subs	r3, r3, r6
 800f9ba:	60a3      	str	r3, [r4, #8]
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	4433      	add	r3, r6
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9c8:	462a      	mov	r2, r5
 800f9ca:	f000 fa3b 	bl	800fe44 <_realloc_r>
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d1e0      	bne.n	800f996 <__ssputs_r+0x5a>
 800f9d4:	6921      	ldr	r1, [r4, #16]
 800f9d6:	4650      	mov	r0, sl
 800f9d8:	f7ff fb34 	bl	800f044 <_free_r>
 800f9dc:	230c      	movs	r3, #12
 800f9de:	f8ca 3000 	str.w	r3, [sl]
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9ee:	e7e9      	b.n	800f9c4 <__ssputs_r+0x88>

0800f9f0 <_svfiprintf_r>:
 800f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f4:	4698      	mov	r8, r3
 800f9f6:	898b      	ldrh	r3, [r1, #12]
 800f9f8:	061b      	lsls	r3, r3, #24
 800f9fa:	b09d      	sub	sp, #116	; 0x74
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	460d      	mov	r5, r1
 800fa00:	4614      	mov	r4, r2
 800fa02:	d50e      	bpl.n	800fa22 <_svfiprintf_r+0x32>
 800fa04:	690b      	ldr	r3, [r1, #16]
 800fa06:	b963      	cbnz	r3, 800fa22 <_svfiprintf_r+0x32>
 800fa08:	2140      	movs	r1, #64	; 0x40
 800fa0a:	f7ff fb8f 	bl	800f12c <_malloc_r>
 800fa0e:	6028      	str	r0, [r5, #0]
 800fa10:	6128      	str	r0, [r5, #16]
 800fa12:	b920      	cbnz	r0, 800fa1e <_svfiprintf_r+0x2e>
 800fa14:	230c      	movs	r3, #12
 800fa16:	603b      	str	r3, [r7, #0]
 800fa18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa1c:	e0d0      	b.n	800fbc0 <_svfiprintf_r+0x1d0>
 800fa1e:	2340      	movs	r3, #64	; 0x40
 800fa20:	616b      	str	r3, [r5, #20]
 800fa22:	2300      	movs	r3, #0
 800fa24:	9309      	str	r3, [sp, #36]	; 0x24
 800fa26:	2320      	movs	r3, #32
 800fa28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa30:	2330      	movs	r3, #48	; 0x30
 800fa32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fbd8 <_svfiprintf_r+0x1e8>
 800fa36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa3a:	f04f 0901 	mov.w	r9, #1
 800fa3e:	4623      	mov	r3, r4
 800fa40:	469a      	mov	sl, r3
 800fa42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa46:	b10a      	cbz	r2, 800fa4c <_svfiprintf_r+0x5c>
 800fa48:	2a25      	cmp	r2, #37	; 0x25
 800fa4a:	d1f9      	bne.n	800fa40 <_svfiprintf_r+0x50>
 800fa4c:	ebba 0b04 	subs.w	fp, sl, r4
 800fa50:	d00b      	beq.n	800fa6a <_svfiprintf_r+0x7a>
 800fa52:	465b      	mov	r3, fp
 800fa54:	4622      	mov	r2, r4
 800fa56:	4629      	mov	r1, r5
 800fa58:	4638      	mov	r0, r7
 800fa5a:	f7ff ff6f 	bl	800f93c <__ssputs_r>
 800fa5e:	3001      	adds	r0, #1
 800fa60:	f000 80a9 	beq.w	800fbb6 <_svfiprintf_r+0x1c6>
 800fa64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa66:	445a      	add	r2, fp
 800fa68:	9209      	str	r2, [sp, #36]	; 0x24
 800fa6a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 80a1 	beq.w	800fbb6 <_svfiprintf_r+0x1c6>
 800fa74:	2300      	movs	r3, #0
 800fa76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa7e:	f10a 0a01 	add.w	sl, sl, #1
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	9307      	str	r3, [sp, #28]
 800fa86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa8a:	931a      	str	r3, [sp, #104]	; 0x68
 800fa8c:	4654      	mov	r4, sl
 800fa8e:	2205      	movs	r2, #5
 800fa90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa94:	4850      	ldr	r0, [pc, #320]	; (800fbd8 <_svfiprintf_r+0x1e8>)
 800fa96:	f7f0 fbc3 	bl	8000220 <memchr>
 800fa9a:	9a04      	ldr	r2, [sp, #16]
 800fa9c:	b9d8      	cbnz	r0, 800fad6 <_svfiprintf_r+0xe6>
 800fa9e:	06d0      	lsls	r0, r2, #27
 800faa0:	bf44      	itt	mi
 800faa2:	2320      	movmi	r3, #32
 800faa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faa8:	0711      	lsls	r1, r2, #28
 800faaa:	bf44      	itt	mi
 800faac:	232b      	movmi	r3, #43	; 0x2b
 800faae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fab2:	f89a 3000 	ldrb.w	r3, [sl]
 800fab6:	2b2a      	cmp	r3, #42	; 0x2a
 800fab8:	d015      	beq.n	800fae6 <_svfiprintf_r+0xf6>
 800faba:	9a07      	ldr	r2, [sp, #28]
 800fabc:	4654      	mov	r4, sl
 800fabe:	2000      	movs	r0, #0
 800fac0:	f04f 0c0a 	mov.w	ip, #10
 800fac4:	4621      	mov	r1, r4
 800fac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faca:	3b30      	subs	r3, #48	; 0x30
 800facc:	2b09      	cmp	r3, #9
 800face:	d94d      	bls.n	800fb6c <_svfiprintf_r+0x17c>
 800fad0:	b1b0      	cbz	r0, 800fb00 <_svfiprintf_r+0x110>
 800fad2:	9207      	str	r2, [sp, #28]
 800fad4:	e014      	b.n	800fb00 <_svfiprintf_r+0x110>
 800fad6:	eba0 0308 	sub.w	r3, r0, r8
 800fada:	fa09 f303 	lsl.w	r3, r9, r3
 800fade:	4313      	orrs	r3, r2
 800fae0:	9304      	str	r3, [sp, #16]
 800fae2:	46a2      	mov	sl, r4
 800fae4:	e7d2      	b.n	800fa8c <_svfiprintf_r+0x9c>
 800fae6:	9b03      	ldr	r3, [sp, #12]
 800fae8:	1d19      	adds	r1, r3, #4
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	9103      	str	r1, [sp, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	bfbb      	ittet	lt
 800faf2:	425b      	neglt	r3, r3
 800faf4:	f042 0202 	orrlt.w	r2, r2, #2
 800faf8:	9307      	strge	r3, [sp, #28]
 800fafa:	9307      	strlt	r3, [sp, #28]
 800fafc:	bfb8      	it	lt
 800fafe:	9204      	strlt	r2, [sp, #16]
 800fb00:	7823      	ldrb	r3, [r4, #0]
 800fb02:	2b2e      	cmp	r3, #46	; 0x2e
 800fb04:	d10c      	bne.n	800fb20 <_svfiprintf_r+0x130>
 800fb06:	7863      	ldrb	r3, [r4, #1]
 800fb08:	2b2a      	cmp	r3, #42	; 0x2a
 800fb0a:	d134      	bne.n	800fb76 <_svfiprintf_r+0x186>
 800fb0c:	9b03      	ldr	r3, [sp, #12]
 800fb0e:	1d1a      	adds	r2, r3, #4
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	9203      	str	r2, [sp, #12]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	bfb8      	it	lt
 800fb18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb1c:	3402      	adds	r4, #2
 800fb1e:	9305      	str	r3, [sp, #20]
 800fb20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fbe8 <_svfiprintf_r+0x1f8>
 800fb24:	7821      	ldrb	r1, [r4, #0]
 800fb26:	2203      	movs	r2, #3
 800fb28:	4650      	mov	r0, sl
 800fb2a:	f7f0 fb79 	bl	8000220 <memchr>
 800fb2e:	b138      	cbz	r0, 800fb40 <_svfiprintf_r+0x150>
 800fb30:	9b04      	ldr	r3, [sp, #16]
 800fb32:	eba0 000a 	sub.w	r0, r0, sl
 800fb36:	2240      	movs	r2, #64	; 0x40
 800fb38:	4082      	lsls	r2, r0
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	3401      	adds	r4, #1
 800fb3e:	9304      	str	r3, [sp, #16]
 800fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb44:	4825      	ldr	r0, [pc, #148]	; (800fbdc <_svfiprintf_r+0x1ec>)
 800fb46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb4a:	2206      	movs	r2, #6
 800fb4c:	f7f0 fb68 	bl	8000220 <memchr>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d038      	beq.n	800fbc6 <_svfiprintf_r+0x1d6>
 800fb54:	4b22      	ldr	r3, [pc, #136]	; (800fbe0 <_svfiprintf_r+0x1f0>)
 800fb56:	bb1b      	cbnz	r3, 800fba0 <_svfiprintf_r+0x1b0>
 800fb58:	9b03      	ldr	r3, [sp, #12]
 800fb5a:	3307      	adds	r3, #7
 800fb5c:	f023 0307 	bic.w	r3, r3, #7
 800fb60:	3308      	adds	r3, #8
 800fb62:	9303      	str	r3, [sp, #12]
 800fb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb66:	4433      	add	r3, r6
 800fb68:	9309      	str	r3, [sp, #36]	; 0x24
 800fb6a:	e768      	b.n	800fa3e <_svfiprintf_r+0x4e>
 800fb6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb70:	460c      	mov	r4, r1
 800fb72:	2001      	movs	r0, #1
 800fb74:	e7a6      	b.n	800fac4 <_svfiprintf_r+0xd4>
 800fb76:	2300      	movs	r3, #0
 800fb78:	3401      	adds	r4, #1
 800fb7a:	9305      	str	r3, [sp, #20]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	f04f 0c0a 	mov.w	ip, #10
 800fb82:	4620      	mov	r0, r4
 800fb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb88:	3a30      	subs	r2, #48	; 0x30
 800fb8a:	2a09      	cmp	r2, #9
 800fb8c:	d903      	bls.n	800fb96 <_svfiprintf_r+0x1a6>
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0c6      	beq.n	800fb20 <_svfiprintf_r+0x130>
 800fb92:	9105      	str	r1, [sp, #20]
 800fb94:	e7c4      	b.n	800fb20 <_svfiprintf_r+0x130>
 800fb96:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e7f0      	b.n	800fb82 <_svfiprintf_r+0x192>
 800fba0:	ab03      	add	r3, sp, #12
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	462a      	mov	r2, r5
 800fba6:	4b0f      	ldr	r3, [pc, #60]	; (800fbe4 <_svfiprintf_r+0x1f4>)
 800fba8:	a904      	add	r1, sp, #16
 800fbaa:	4638      	mov	r0, r7
 800fbac:	f7fd fe62 	bl	800d874 <_printf_float>
 800fbb0:	1c42      	adds	r2, r0, #1
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	d1d6      	bne.n	800fb64 <_svfiprintf_r+0x174>
 800fbb6:	89ab      	ldrh	r3, [r5, #12]
 800fbb8:	065b      	lsls	r3, r3, #25
 800fbba:	f53f af2d 	bmi.w	800fa18 <_svfiprintf_r+0x28>
 800fbbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbc0:	b01d      	add	sp, #116	; 0x74
 800fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc6:	ab03      	add	r3, sp, #12
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	462a      	mov	r2, r5
 800fbcc:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <_svfiprintf_r+0x1f4>)
 800fbce:	a904      	add	r1, sp, #16
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	f7fe f8f3 	bl	800ddbc <_printf_i>
 800fbd6:	e7eb      	b.n	800fbb0 <_svfiprintf_r+0x1c0>
 800fbd8:	0801078c 	.word	0x0801078c
 800fbdc:	08010796 	.word	0x08010796
 800fbe0:	0800d875 	.word	0x0800d875
 800fbe4:	0800f93d 	.word	0x0800f93d
 800fbe8:	08010792 	.word	0x08010792

0800fbec <__sflush_r>:
 800fbec:	898a      	ldrh	r2, [r1, #12]
 800fbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	0710      	lsls	r0, r2, #28
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	d458      	bmi.n	800fcac <__sflush_r+0xc0>
 800fbfa:	684b      	ldr	r3, [r1, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	dc05      	bgt.n	800fc0c <__sflush_r+0x20>
 800fc00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	dc02      	bgt.n	800fc0c <__sflush_r+0x20>
 800fc06:	2000      	movs	r0, #0
 800fc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc0e:	2e00      	cmp	r6, #0
 800fc10:	d0f9      	beq.n	800fc06 <__sflush_r+0x1a>
 800fc12:	2300      	movs	r3, #0
 800fc14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc18:	682f      	ldr	r7, [r5, #0]
 800fc1a:	6a21      	ldr	r1, [r4, #32]
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	d032      	beq.n	800fc86 <__sflush_r+0x9a>
 800fc20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	075a      	lsls	r2, r3, #29
 800fc26:	d505      	bpl.n	800fc34 <__sflush_r+0x48>
 800fc28:	6863      	ldr	r3, [r4, #4]
 800fc2a:	1ac0      	subs	r0, r0, r3
 800fc2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc2e:	b10b      	cbz	r3, 800fc34 <__sflush_r+0x48>
 800fc30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc32:	1ac0      	subs	r0, r0, r3
 800fc34:	2300      	movs	r3, #0
 800fc36:	4602      	mov	r2, r0
 800fc38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc3a:	6a21      	ldr	r1, [r4, #32]
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	47b0      	blx	r6
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	d106      	bne.n	800fc54 <__sflush_r+0x68>
 800fc46:	6829      	ldr	r1, [r5, #0]
 800fc48:	291d      	cmp	r1, #29
 800fc4a:	d82b      	bhi.n	800fca4 <__sflush_r+0xb8>
 800fc4c:	4a29      	ldr	r2, [pc, #164]	; (800fcf4 <__sflush_r+0x108>)
 800fc4e:	410a      	asrs	r2, r1
 800fc50:	07d6      	lsls	r6, r2, #31
 800fc52:	d427      	bmi.n	800fca4 <__sflush_r+0xb8>
 800fc54:	2200      	movs	r2, #0
 800fc56:	6062      	str	r2, [r4, #4]
 800fc58:	04d9      	lsls	r1, r3, #19
 800fc5a:	6922      	ldr	r2, [r4, #16]
 800fc5c:	6022      	str	r2, [r4, #0]
 800fc5e:	d504      	bpl.n	800fc6a <__sflush_r+0x7e>
 800fc60:	1c42      	adds	r2, r0, #1
 800fc62:	d101      	bne.n	800fc68 <__sflush_r+0x7c>
 800fc64:	682b      	ldr	r3, [r5, #0]
 800fc66:	b903      	cbnz	r3, 800fc6a <__sflush_r+0x7e>
 800fc68:	6560      	str	r0, [r4, #84]	; 0x54
 800fc6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc6c:	602f      	str	r7, [r5, #0]
 800fc6e:	2900      	cmp	r1, #0
 800fc70:	d0c9      	beq.n	800fc06 <__sflush_r+0x1a>
 800fc72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc76:	4299      	cmp	r1, r3
 800fc78:	d002      	beq.n	800fc80 <__sflush_r+0x94>
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f7ff f9e2 	bl	800f044 <_free_r>
 800fc80:	2000      	movs	r0, #0
 800fc82:	6360      	str	r0, [r4, #52]	; 0x34
 800fc84:	e7c0      	b.n	800fc08 <__sflush_r+0x1c>
 800fc86:	2301      	movs	r3, #1
 800fc88:	4628      	mov	r0, r5
 800fc8a:	47b0      	blx	r6
 800fc8c:	1c41      	adds	r1, r0, #1
 800fc8e:	d1c8      	bne.n	800fc22 <__sflush_r+0x36>
 800fc90:	682b      	ldr	r3, [r5, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d0c5      	beq.n	800fc22 <__sflush_r+0x36>
 800fc96:	2b1d      	cmp	r3, #29
 800fc98:	d001      	beq.n	800fc9e <__sflush_r+0xb2>
 800fc9a:	2b16      	cmp	r3, #22
 800fc9c:	d101      	bne.n	800fca2 <__sflush_r+0xb6>
 800fc9e:	602f      	str	r7, [r5, #0]
 800fca0:	e7b1      	b.n	800fc06 <__sflush_r+0x1a>
 800fca2:	89a3      	ldrh	r3, [r4, #12]
 800fca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca8:	81a3      	strh	r3, [r4, #12]
 800fcaa:	e7ad      	b.n	800fc08 <__sflush_r+0x1c>
 800fcac:	690f      	ldr	r7, [r1, #16]
 800fcae:	2f00      	cmp	r7, #0
 800fcb0:	d0a9      	beq.n	800fc06 <__sflush_r+0x1a>
 800fcb2:	0793      	lsls	r3, r2, #30
 800fcb4:	680e      	ldr	r6, [r1, #0]
 800fcb6:	bf08      	it	eq
 800fcb8:	694b      	ldreq	r3, [r1, #20]
 800fcba:	600f      	str	r7, [r1, #0]
 800fcbc:	bf18      	it	ne
 800fcbe:	2300      	movne	r3, #0
 800fcc0:	eba6 0807 	sub.w	r8, r6, r7
 800fcc4:	608b      	str	r3, [r1, #8]
 800fcc6:	f1b8 0f00 	cmp.w	r8, #0
 800fcca:	dd9c      	ble.n	800fc06 <__sflush_r+0x1a>
 800fccc:	6a21      	ldr	r1, [r4, #32]
 800fcce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fcd0:	4643      	mov	r3, r8
 800fcd2:	463a      	mov	r2, r7
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	47b0      	blx	r6
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	dc06      	bgt.n	800fcea <__sflush_r+0xfe>
 800fcdc:	89a3      	ldrh	r3, [r4, #12]
 800fcde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fce2:	81a3      	strh	r3, [r4, #12]
 800fce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fce8:	e78e      	b.n	800fc08 <__sflush_r+0x1c>
 800fcea:	4407      	add	r7, r0
 800fcec:	eba8 0800 	sub.w	r8, r8, r0
 800fcf0:	e7e9      	b.n	800fcc6 <__sflush_r+0xda>
 800fcf2:	bf00      	nop
 800fcf4:	dfbffffe 	.word	0xdfbffffe

0800fcf8 <_fflush_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	690b      	ldr	r3, [r1, #16]
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	460c      	mov	r4, r1
 800fd00:	b913      	cbnz	r3, 800fd08 <_fflush_r+0x10>
 800fd02:	2500      	movs	r5, #0
 800fd04:	4628      	mov	r0, r5
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	b118      	cbz	r0, 800fd12 <_fflush_r+0x1a>
 800fd0a:	6a03      	ldr	r3, [r0, #32]
 800fd0c:	b90b      	cbnz	r3, 800fd12 <_fflush_r+0x1a>
 800fd0e:	f7fe fa03 	bl	800e118 <__sinit>
 800fd12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d0f3      	beq.n	800fd02 <_fflush_r+0xa>
 800fd1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd1c:	07d0      	lsls	r0, r2, #31
 800fd1e:	d404      	bmi.n	800fd2a <_fflush_r+0x32>
 800fd20:	0599      	lsls	r1, r3, #22
 800fd22:	d402      	bmi.n	800fd2a <_fflush_r+0x32>
 800fd24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd26:	f7fe fb0e 	bl	800e346 <__retarget_lock_acquire_recursive>
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	f7ff ff5d 	bl	800fbec <__sflush_r>
 800fd32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd34:	07da      	lsls	r2, r3, #31
 800fd36:	4605      	mov	r5, r0
 800fd38:	d4e4      	bmi.n	800fd04 <_fflush_r+0xc>
 800fd3a:	89a3      	ldrh	r3, [r4, #12]
 800fd3c:	059b      	lsls	r3, r3, #22
 800fd3e:	d4e1      	bmi.n	800fd04 <_fflush_r+0xc>
 800fd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd42:	f7fe fb01 	bl	800e348 <__retarget_lock_release_recursive>
 800fd46:	e7dd      	b.n	800fd04 <_fflush_r+0xc>

0800fd48 <memmove>:
 800fd48:	4288      	cmp	r0, r1
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	eb01 0402 	add.w	r4, r1, r2
 800fd50:	d902      	bls.n	800fd58 <memmove+0x10>
 800fd52:	4284      	cmp	r4, r0
 800fd54:	4623      	mov	r3, r4
 800fd56:	d807      	bhi.n	800fd68 <memmove+0x20>
 800fd58:	1e43      	subs	r3, r0, #1
 800fd5a:	42a1      	cmp	r1, r4
 800fd5c:	d008      	beq.n	800fd70 <memmove+0x28>
 800fd5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd66:	e7f8      	b.n	800fd5a <memmove+0x12>
 800fd68:	4402      	add	r2, r0
 800fd6a:	4601      	mov	r1, r0
 800fd6c:	428a      	cmp	r2, r1
 800fd6e:	d100      	bne.n	800fd72 <memmove+0x2a>
 800fd70:	bd10      	pop	{r4, pc}
 800fd72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd7a:	e7f7      	b.n	800fd6c <memmove+0x24>

0800fd7c <_sbrk_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4d06      	ldr	r5, [pc, #24]	; (800fd98 <_sbrk_r+0x1c>)
 800fd80:	2300      	movs	r3, #0
 800fd82:	4604      	mov	r4, r0
 800fd84:	4608      	mov	r0, r1
 800fd86:	602b      	str	r3, [r5, #0]
 800fd88:	f7f2 f916 	bl	8001fb8 <_sbrk>
 800fd8c:	1c43      	adds	r3, r0, #1
 800fd8e:	d102      	bne.n	800fd96 <_sbrk_r+0x1a>
 800fd90:	682b      	ldr	r3, [r5, #0]
 800fd92:	b103      	cbz	r3, 800fd96 <_sbrk_r+0x1a>
 800fd94:	6023      	str	r3, [r4, #0]
 800fd96:	bd38      	pop	{r3, r4, r5, pc}
 800fd98:	20001a0c 	.word	0x20001a0c

0800fd9c <memcpy>:
 800fd9c:	440a      	add	r2, r1
 800fd9e:	4291      	cmp	r1, r2
 800fda0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fda4:	d100      	bne.n	800fda8 <memcpy+0xc>
 800fda6:	4770      	bx	lr
 800fda8:	b510      	push	{r4, lr}
 800fdaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdb2:	4291      	cmp	r1, r2
 800fdb4:	d1f9      	bne.n	800fdaa <memcpy+0xe>
 800fdb6:	bd10      	pop	{r4, pc}

0800fdb8 <__assert_func>:
 800fdb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdba:	4614      	mov	r4, r2
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <__assert_func+0x2c>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	68d8      	ldr	r0, [r3, #12]
 800fdc6:	b14c      	cbz	r4, 800fddc <__assert_func+0x24>
 800fdc8:	4b07      	ldr	r3, [pc, #28]	; (800fde8 <__assert_func+0x30>)
 800fdca:	9100      	str	r1, [sp, #0]
 800fdcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdd0:	4906      	ldr	r1, [pc, #24]	; (800fdec <__assert_func+0x34>)
 800fdd2:	462b      	mov	r3, r5
 800fdd4:	f000 f872 	bl	800febc <fiprintf>
 800fdd8:	f000 f882 	bl	800fee0 <abort>
 800fddc:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <__assert_func+0x38>)
 800fdde:	461c      	mov	r4, r3
 800fde0:	e7f3      	b.n	800fdca <__assert_func+0x12>
 800fde2:	bf00      	nop
 800fde4:	200001dc 	.word	0x200001dc
 800fde8:	080107a7 	.word	0x080107a7
 800fdec:	080107b4 	.word	0x080107b4
 800fdf0:	080107e2 	.word	0x080107e2

0800fdf4 <_calloc_r>:
 800fdf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdf6:	fba1 2402 	umull	r2, r4, r1, r2
 800fdfa:	b94c      	cbnz	r4, 800fe10 <_calloc_r+0x1c>
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	9201      	str	r2, [sp, #4]
 800fe00:	f7ff f994 	bl	800f12c <_malloc_r>
 800fe04:	9a01      	ldr	r2, [sp, #4]
 800fe06:	4605      	mov	r5, r0
 800fe08:	b930      	cbnz	r0, 800fe18 <_calloc_r+0x24>
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	b003      	add	sp, #12
 800fe0e:	bd30      	pop	{r4, r5, pc}
 800fe10:	220c      	movs	r2, #12
 800fe12:	6002      	str	r2, [r0, #0]
 800fe14:	2500      	movs	r5, #0
 800fe16:	e7f8      	b.n	800fe0a <_calloc_r+0x16>
 800fe18:	4621      	mov	r1, r4
 800fe1a:	f7fe fa16 	bl	800e24a <memset>
 800fe1e:	e7f4      	b.n	800fe0a <_calloc_r+0x16>

0800fe20 <__ascii_mbtowc>:
 800fe20:	b082      	sub	sp, #8
 800fe22:	b901      	cbnz	r1, 800fe26 <__ascii_mbtowc+0x6>
 800fe24:	a901      	add	r1, sp, #4
 800fe26:	b142      	cbz	r2, 800fe3a <__ascii_mbtowc+0x1a>
 800fe28:	b14b      	cbz	r3, 800fe3e <__ascii_mbtowc+0x1e>
 800fe2a:	7813      	ldrb	r3, [r2, #0]
 800fe2c:	600b      	str	r3, [r1, #0]
 800fe2e:	7812      	ldrb	r2, [r2, #0]
 800fe30:	1e10      	subs	r0, r2, #0
 800fe32:	bf18      	it	ne
 800fe34:	2001      	movne	r0, #1
 800fe36:	b002      	add	sp, #8
 800fe38:	4770      	bx	lr
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	e7fb      	b.n	800fe36 <__ascii_mbtowc+0x16>
 800fe3e:	f06f 0001 	mvn.w	r0, #1
 800fe42:	e7f8      	b.n	800fe36 <__ascii_mbtowc+0x16>

0800fe44 <_realloc_r>:
 800fe44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe48:	4680      	mov	r8, r0
 800fe4a:	4614      	mov	r4, r2
 800fe4c:	460e      	mov	r6, r1
 800fe4e:	b921      	cbnz	r1, 800fe5a <_realloc_r+0x16>
 800fe50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe54:	4611      	mov	r1, r2
 800fe56:	f7ff b969 	b.w	800f12c <_malloc_r>
 800fe5a:	b92a      	cbnz	r2, 800fe68 <_realloc_r+0x24>
 800fe5c:	f7ff f8f2 	bl	800f044 <_free_r>
 800fe60:	4625      	mov	r5, r4
 800fe62:	4628      	mov	r0, r5
 800fe64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe68:	f000 f841 	bl	800feee <_malloc_usable_size_r>
 800fe6c:	4284      	cmp	r4, r0
 800fe6e:	4607      	mov	r7, r0
 800fe70:	d802      	bhi.n	800fe78 <_realloc_r+0x34>
 800fe72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe76:	d812      	bhi.n	800fe9e <_realloc_r+0x5a>
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	f7ff f956 	bl	800f12c <_malloc_r>
 800fe80:	4605      	mov	r5, r0
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d0ed      	beq.n	800fe62 <_realloc_r+0x1e>
 800fe86:	42bc      	cmp	r4, r7
 800fe88:	4622      	mov	r2, r4
 800fe8a:	4631      	mov	r1, r6
 800fe8c:	bf28      	it	cs
 800fe8e:	463a      	movcs	r2, r7
 800fe90:	f7ff ff84 	bl	800fd9c <memcpy>
 800fe94:	4631      	mov	r1, r6
 800fe96:	4640      	mov	r0, r8
 800fe98:	f7ff f8d4 	bl	800f044 <_free_r>
 800fe9c:	e7e1      	b.n	800fe62 <_realloc_r+0x1e>
 800fe9e:	4635      	mov	r5, r6
 800fea0:	e7df      	b.n	800fe62 <_realloc_r+0x1e>

0800fea2 <__ascii_wctomb>:
 800fea2:	b149      	cbz	r1, 800feb8 <__ascii_wctomb+0x16>
 800fea4:	2aff      	cmp	r2, #255	; 0xff
 800fea6:	bf85      	ittet	hi
 800fea8:	238a      	movhi	r3, #138	; 0x8a
 800feaa:	6003      	strhi	r3, [r0, #0]
 800feac:	700a      	strbls	r2, [r1, #0]
 800feae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800feb2:	bf98      	it	ls
 800feb4:	2001      	movls	r0, #1
 800feb6:	4770      	bx	lr
 800feb8:	4608      	mov	r0, r1
 800feba:	4770      	bx	lr

0800febc <fiprintf>:
 800febc:	b40e      	push	{r1, r2, r3}
 800febe:	b503      	push	{r0, r1, lr}
 800fec0:	4601      	mov	r1, r0
 800fec2:	ab03      	add	r3, sp, #12
 800fec4:	4805      	ldr	r0, [pc, #20]	; (800fedc <fiprintf+0x20>)
 800fec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feca:	6800      	ldr	r0, [r0, #0]
 800fecc:	9301      	str	r3, [sp, #4]
 800fece:	f000 f83f 	bl	800ff50 <_vfiprintf_r>
 800fed2:	b002      	add	sp, #8
 800fed4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fed8:	b003      	add	sp, #12
 800feda:	4770      	bx	lr
 800fedc:	200001dc 	.word	0x200001dc

0800fee0 <abort>:
 800fee0:	b508      	push	{r3, lr}
 800fee2:	2006      	movs	r0, #6
 800fee4:	f000 fa0c 	bl	8010300 <raise>
 800fee8:	2001      	movs	r0, #1
 800feea:	f7f1 ffed 	bl	8001ec8 <_exit>

0800feee <_malloc_usable_size_r>:
 800feee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fef2:	1f18      	subs	r0, r3, #4
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	bfbc      	itt	lt
 800fef8:	580b      	ldrlt	r3, [r1, r0]
 800fefa:	18c0      	addlt	r0, r0, r3
 800fefc:	4770      	bx	lr

0800fefe <__sfputc_r>:
 800fefe:	6893      	ldr	r3, [r2, #8]
 800ff00:	3b01      	subs	r3, #1
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	b410      	push	{r4}
 800ff06:	6093      	str	r3, [r2, #8]
 800ff08:	da08      	bge.n	800ff1c <__sfputc_r+0x1e>
 800ff0a:	6994      	ldr	r4, [r2, #24]
 800ff0c:	42a3      	cmp	r3, r4
 800ff0e:	db01      	blt.n	800ff14 <__sfputc_r+0x16>
 800ff10:	290a      	cmp	r1, #10
 800ff12:	d103      	bne.n	800ff1c <__sfputc_r+0x1e>
 800ff14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff18:	f000 b934 	b.w	8010184 <__swbuf_r>
 800ff1c:	6813      	ldr	r3, [r2, #0]
 800ff1e:	1c58      	adds	r0, r3, #1
 800ff20:	6010      	str	r0, [r2, #0]
 800ff22:	7019      	strb	r1, [r3, #0]
 800ff24:	4608      	mov	r0, r1
 800ff26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <__sfputs_r>:
 800ff2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2e:	4606      	mov	r6, r0
 800ff30:	460f      	mov	r7, r1
 800ff32:	4614      	mov	r4, r2
 800ff34:	18d5      	adds	r5, r2, r3
 800ff36:	42ac      	cmp	r4, r5
 800ff38:	d101      	bne.n	800ff3e <__sfputs_r+0x12>
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	e007      	b.n	800ff4e <__sfputs_r+0x22>
 800ff3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff42:	463a      	mov	r2, r7
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7ff ffda 	bl	800fefe <__sfputc_r>
 800ff4a:	1c43      	adds	r3, r0, #1
 800ff4c:	d1f3      	bne.n	800ff36 <__sfputs_r+0xa>
 800ff4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff50 <_vfiprintf_r>:
 800ff50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff54:	460d      	mov	r5, r1
 800ff56:	b09d      	sub	sp, #116	; 0x74
 800ff58:	4614      	mov	r4, r2
 800ff5a:	4698      	mov	r8, r3
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	b118      	cbz	r0, 800ff68 <_vfiprintf_r+0x18>
 800ff60:	6a03      	ldr	r3, [r0, #32]
 800ff62:	b90b      	cbnz	r3, 800ff68 <_vfiprintf_r+0x18>
 800ff64:	f7fe f8d8 	bl	800e118 <__sinit>
 800ff68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff6a:	07d9      	lsls	r1, r3, #31
 800ff6c:	d405      	bmi.n	800ff7a <_vfiprintf_r+0x2a>
 800ff6e:	89ab      	ldrh	r3, [r5, #12]
 800ff70:	059a      	lsls	r2, r3, #22
 800ff72:	d402      	bmi.n	800ff7a <_vfiprintf_r+0x2a>
 800ff74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff76:	f7fe f9e6 	bl	800e346 <__retarget_lock_acquire_recursive>
 800ff7a:	89ab      	ldrh	r3, [r5, #12]
 800ff7c:	071b      	lsls	r3, r3, #28
 800ff7e:	d501      	bpl.n	800ff84 <_vfiprintf_r+0x34>
 800ff80:	692b      	ldr	r3, [r5, #16]
 800ff82:	b99b      	cbnz	r3, 800ffac <_vfiprintf_r+0x5c>
 800ff84:	4629      	mov	r1, r5
 800ff86:	4630      	mov	r0, r6
 800ff88:	f000 f93a 	bl	8010200 <__swsetup_r>
 800ff8c:	b170      	cbz	r0, 800ffac <_vfiprintf_r+0x5c>
 800ff8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff90:	07dc      	lsls	r4, r3, #31
 800ff92:	d504      	bpl.n	800ff9e <_vfiprintf_r+0x4e>
 800ff94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff98:	b01d      	add	sp, #116	; 0x74
 800ff9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff9e:	89ab      	ldrh	r3, [r5, #12]
 800ffa0:	0598      	lsls	r0, r3, #22
 800ffa2:	d4f7      	bmi.n	800ff94 <_vfiprintf_r+0x44>
 800ffa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffa6:	f7fe f9cf 	bl	800e348 <__retarget_lock_release_recursive>
 800ffaa:	e7f3      	b.n	800ff94 <_vfiprintf_r+0x44>
 800ffac:	2300      	movs	r3, #0
 800ffae:	9309      	str	r3, [sp, #36]	; 0x24
 800ffb0:	2320      	movs	r3, #32
 800ffb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffba:	2330      	movs	r3, #48	; 0x30
 800ffbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010170 <_vfiprintf_r+0x220>
 800ffc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffc4:	f04f 0901 	mov.w	r9, #1
 800ffc8:	4623      	mov	r3, r4
 800ffca:	469a      	mov	sl, r3
 800ffcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffd0:	b10a      	cbz	r2, 800ffd6 <_vfiprintf_r+0x86>
 800ffd2:	2a25      	cmp	r2, #37	; 0x25
 800ffd4:	d1f9      	bne.n	800ffca <_vfiprintf_r+0x7a>
 800ffd6:	ebba 0b04 	subs.w	fp, sl, r4
 800ffda:	d00b      	beq.n	800fff4 <_vfiprintf_r+0xa4>
 800ffdc:	465b      	mov	r3, fp
 800ffde:	4622      	mov	r2, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	f7ff ffa2 	bl	800ff2c <__sfputs_r>
 800ffe8:	3001      	adds	r0, #1
 800ffea:	f000 80a9 	beq.w	8010140 <_vfiprintf_r+0x1f0>
 800ffee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fff0:	445a      	add	r2, fp
 800fff2:	9209      	str	r2, [sp, #36]	; 0x24
 800fff4:	f89a 3000 	ldrb.w	r3, [sl]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f000 80a1 	beq.w	8010140 <_vfiprintf_r+0x1f0>
 800fffe:	2300      	movs	r3, #0
 8010000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010008:	f10a 0a01 	add.w	sl, sl, #1
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	9307      	str	r3, [sp, #28]
 8010010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010014:	931a      	str	r3, [sp, #104]	; 0x68
 8010016:	4654      	mov	r4, sl
 8010018:	2205      	movs	r2, #5
 801001a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801001e:	4854      	ldr	r0, [pc, #336]	; (8010170 <_vfiprintf_r+0x220>)
 8010020:	f7f0 f8fe 	bl	8000220 <memchr>
 8010024:	9a04      	ldr	r2, [sp, #16]
 8010026:	b9d8      	cbnz	r0, 8010060 <_vfiprintf_r+0x110>
 8010028:	06d1      	lsls	r1, r2, #27
 801002a:	bf44      	itt	mi
 801002c:	2320      	movmi	r3, #32
 801002e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010032:	0713      	lsls	r3, r2, #28
 8010034:	bf44      	itt	mi
 8010036:	232b      	movmi	r3, #43	; 0x2b
 8010038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801003c:	f89a 3000 	ldrb.w	r3, [sl]
 8010040:	2b2a      	cmp	r3, #42	; 0x2a
 8010042:	d015      	beq.n	8010070 <_vfiprintf_r+0x120>
 8010044:	9a07      	ldr	r2, [sp, #28]
 8010046:	4654      	mov	r4, sl
 8010048:	2000      	movs	r0, #0
 801004a:	f04f 0c0a 	mov.w	ip, #10
 801004e:	4621      	mov	r1, r4
 8010050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010054:	3b30      	subs	r3, #48	; 0x30
 8010056:	2b09      	cmp	r3, #9
 8010058:	d94d      	bls.n	80100f6 <_vfiprintf_r+0x1a6>
 801005a:	b1b0      	cbz	r0, 801008a <_vfiprintf_r+0x13a>
 801005c:	9207      	str	r2, [sp, #28]
 801005e:	e014      	b.n	801008a <_vfiprintf_r+0x13a>
 8010060:	eba0 0308 	sub.w	r3, r0, r8
 8010064:	fa09 f303 	lsl.w	r3, r9, r3
 8010068:	4313      	orrs	r3, r2
 801006a:	9304      	str	r3, [sp, #16]
 801006c:	46a2      	mov	sl, r4
 801006e:	e7d2      	b.n	8010016 <_vfiprintf_r+0xc6>
 8010070:	9b03      	ldr	r3, [sp, #12]
 8010072:	1d19      	adds	r1, r3, #4
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	9103      	str	r1, [sp, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	bfbb      	ittet	lt
 801007c:	425b      	neglt	r3, r3
 801007e:	f042 0202 	orrlt.w	r2, r2, #2
 8010082:	9307      	strge	r3, [sp, #28]
 8010084:	9307      	strlt	r3, [sp, #28]
 8010086:	bfb8      	it	lt
 8010088:	9204      	strlt	r2, [sp, #16]
 801008a:	7823      	ldrb	r3, [r4, #0]
 801008c:	2b2e      	cmp	r3, #46	; 0x2e
 801008e:	d10c      	bne.n	80100aa <_vfiprintf_r+0x15a>
 8010090:	7863      	ldrb	r3, [r4, #1]
 8010092:	2b2a      	cmp	r3, #42	; 0x2a
 8010094:	d134      	bne.n	8010100 <_vfiprintf_r+0x1b0>
 8010096:	9b03      	ldr	r3, [sp, #12]
 8010098:	1d1a      	adds	r2, r3, #4
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	9203      	str	r2, [sp, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	bfb8      	it	lt
 80100a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80100a6:	3402      	adds	r4, #2
 80100a8:	9305      	str	r3, [sp, #20]
 80100aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010180 <_vfiprintf_r+0x230>
 80100ae:	7821      	ldrb	r1, [r4, #0]
 80100b0:	2203      	movs	r2, #3
 80100b2:	4650      	mov	r0, sl
 80100b4:	f7f0 f8b4 	bl	8000220 <memchr>
 80100b8:	b138      	cbz	r0, 80100ca <_vfiprintf_r+0x17a>
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	eba0 000a 	sub.w	r0, r0, sl
 80100c0:	2240      	movs	r2, #64	; 0x40
 80100c2:	4082      	lsls	r2, r0
 80100c4:	4313      	orrs	r3, r2
 80100c6:	3401      	adds	r4, #1
 80100c8:	9304      	str	r3, [sp, #16]
 80100ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ce:	4829      	ldr	r0, [pc, #164]	; (8010174 <_vfiprintf_r+0x224>)
 80100d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100d4:	2206      	movs	r2, #6
 80100d6:	f7f0 f8a3 	bl	8000220 <memchr>
 80100da:	2800      	cmp	r0, #0
 80100dc:	d03f      	beq.n	801015e <_vfiprintf_r+0x20e>
 80100de:	4b26      	ldr	r3, [pc, #152]	; (8010178 <_vfiprintf_r+0x228>)
 80100e0:	bb1b      	cbnz	r3, 801012a <_vfiprintf_r+0x1da>
 80100e2:	9b03      	ldr	r3, [sp, #12]
 80100e4:	3307      	adds	r3, #7
 80100e6:	f023 0307 	bic.w	r3, r3, #7
 80100ea:	3308      	adds	r3, #8
 80100ec:	9303      	str	r3, [sp, #12]
 80100ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100f0:	443b      	add	r3, r7
 80100f2:	9309      	str	r3, [sp, #36]	; 0x24
 80100f4:	e768      	b.n	800ffc8 <_vfiprintf_r+0x78>
 80100f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80100fa:	460c      	mov	r4, r1
 80100fc:	2001      	movs	r0, #1
 80100fe:	e7a6      	b.n	801004e <_vfiprintf_r+0xfe>
 8010100:	2300      	movs	r3, #0
 8010102:	3401      	adds	r4, #1
 8010104:	9305      	str	r3, [sp, #20]
 8010106:	4619      	mov	r1, r3
 8010108:	f04f 0c0a 	mov.w	ip, #10
 801010c:	4620      	mov	r0, r4
 801010e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010112:	3a30      	subs	r2, #48	; 0x30
 8010114:	2a09      	cmp	r2, #9
 8010116:	d903      	bls.n	8010120 <_vfiprintf_r+0x1d0>
 8010118:	2b00      	cmp	r3, #0
 801011a:	d0c6      	beq.n	80100aa <_vfiprintf_r+0x15a>
 801011c:	9105      	str	r1, [sp, #20]
 801011e:	e7c4      	b.n	80100aa <_vfiprintf_r+0x15a>
 8010120:	fb0c 2101 	mla	r1, ip, r1, r2
 8010124:	4604      	mov	r4, r0
 8010126:	2301      	movs	r3, #1
 8010128:	e7f0      	b.n	801010c <_vfiprintf_r+0x1bc>
 801012a:	ab03      	add	r3, sp, #12
 801012c:	9300      	str	r3, [sp, #0]
 801012e:	462a      	mov	r2, r5
 8010130:	4b12      	ldr	r3, [pc, #72]	; (801017c <_vfiprintf_r+0x22c>)
 8010132:	a904      	add	r1, sp, #16
 8010134:	4630      	mov	r0, r6
 8010136:	f7fd fb9d 	bl	800d874 <_printf_float>
 801013a:	4607      	mov	r7, r0
 801013c:	1c78      	adds	r0, r7, #1
 801013e:	d1d6      	bne.n	80100ee <_vfiprintf_r+0x19e>
 8010140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010142:	07d9      	lsls	r1, r3, #31
 8010144:	d405      	bmi.n	8010152 <_vfiprintf_r+0x202>
 8010146:	89ab      	ldrh	r3, [r5, #12]
 8010148:	059a      	lsls	r2, r3, #22
 801014a:	d402      	bmi.n	8010152 <_vfiprintf_r+0x202>
 801014c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801014e:	f7fe f8fb 	bl	800e348 <__retarget_lock_release_recursive>
 8010152:	89ab      	ldrh	r3, [r5, #12]
 8010154:	065b      	lsls	r3, r3, #25
 8010156:	f53f af1d 	bmi.w	800ff94 <_vfiprintf_r+0x44>
 801015a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801015c:	e71c      	b.n	800ff98 <_vfiprintf_r+0x48>
 801015e:	ab03      	add	r3, sp, #12
 8010160:	9300      	str	r3, [sp, #0]
 8010162:	462a      	mov	r2, r5
 8010164:	4b05      	ldr	r3, [pc, #20]	; (801017c <_vfiprintf_r+0x22c>)
 8010166:	a904      	add	r1, sp, #16
 8010168:	4630      	mov	r0, r6
 801016a:	f7fd fe27 	bl	800ddbc <_printf_i>
 801016e:	e7e4      	b.n	801013a <_vfiprintf_r+0x1ea>
 8010170:	0801078c 	.word	0x0801078c
 8010174:	08010796 	.word	0x08010796
 8010178:	0800d875 	.word	0x0800d875
 801017c:	0800ff2d 	.word	0x0800ff2d
 8010180:	08010792 	.word	0x08010792

08010184 <__swbuf_r>:
 8010184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010186:	460e      	mov	r6, r1
 8010188:	4614      	mov	r4, r2
 801018a:	4605      	mov	r5, r0
 801018c:	b118      	cbz	r0, 8010196 <__swbuf_r+0x12>
 801018e:	6a03      	ldr	r3, [r0, #32]
 8010190:	b90b      	cbnz	r3, 8010196 <__swbuf_r+0x12>
 8010192:	f7fd ffc1 	bl	800e118 <__sinit>
 8010196:	69a3      	ldr	r3, [r4, #24]
 8010198:	60a3      	str	r3, [r4, #8]
 801019a:	89a3      	ldrh	r3, [r4, #12]
 801019c:	071a      	lsls	r2, r3, #28
 801019e:	d525      	bpl.n	80101ec <__swbuf_r+0x68>
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	b31b      	cbz	r3, 80101ec <__swbuf_r+0x68>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	6922      	ldr	r2, [r4, #16]
 80101a8:	1a98      	subs	r0, r3, r2
 80101aa:	6963      	ldr	r3, [r4, #20]
 80101ac:	b2f6      	uxtb	r6, r6
 80101ae:	4283      	cmp	r3, r0
 80101b0:	4637      	mov	r7, r6
 80101b2:	dc04      	bgt.n	80101be <__swbuf_r+0x3a>
 80101b4:	4621      	mov	r1, r4
 80101b6:	4628      	mov	r0, r5
 80101b8:	f7ff fd9e 	bl	800fcf8 <_fflush_r>
 80101bc:	b9e0      	cbnz	r0, 80101f8 <__swbuf_r+0x74>
 80101be:	68a3      	ldr	r3, [r4, #8]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	60a3      	str	r3, [r4, #8]
 80101c4:	6823      	ldr	r3, [r4, #0]
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	6022      	str	r2, [r4, #0]
 80101ca:	701e      	strb	r6, [r3, #0]
 80101cc:	6962      	ldr	r2, [r4, #20]
 80101ce:	1c43      	adds	r3, r0, #1
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d004      	beq.n	80101de <__swbuf_r+0x5a>
 80101d4:	89a3      	ldrh	r3, [r4, #12]
 80101d6:	07db      	lsls	r3, r3, #31
 80101d8:	d506      	bpl.n	80101e8 <__swbuf_r+0x64>
 80101da:	2e0a      	cmp	r6, #10
 80101dc:	d104      	bne.n	80101e8 <__swbuf_r+0x64>
 80101de:	4621      	mov	r1, r4
 80101e0:	4628      	mov	r0, r5
 80101e2:	f7ff fd89 	bl	800fcf8 <_fflush_r>
 80101e6:	b938      	cbnz	r0, 80101f8 <__swbuf_r+0x74>
 80101e8:	4638      	mov	r0, r7
 80101ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ec:	4621      	mov	r1, r4
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 f806 	bl	8010200 <__swsetup_r>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d0d5      	beq.n	80101a4 <__swbuf_r+0x20>
 80101f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80101fc:	e7f4      	b.n	80101e8 <__swbuf_r+0x64>
	...

08010200 <__swsetup_r>:
 8010200:	b538      	push	{r3, r4, r5, lr}
 8010202:	4b2a      	ldr	r3, [pc, #168]	; (80102ac <__swsetup_r+0xac>)
 8010204:	4605      	mov	r5, r0
 8010206:	6818      	ldr	r0, [r3, #0]
 8010208:	460c      	mov	r4, r1
 801020a:	b118      	cbz	r0, 8010214 <__swsetup_r+0x14>
 801020c:	6a03      	ldr	r3, [r0, #32]
 801020e:	b90b      	cbnz	r3, 8010214 <__swsetup_r+0x14>
 8010210:	f7fd ff82 	bl	800e118 <__sinit>
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801021a:	0718      	lsls	r0, r3, #28
 801021c:	d422      	bmi.n	8010264 <__swsetup_r+0x64>
 801021e:	06d9      	lsls	r1, r3, #27
 8010220:	d407      	bmi.n	8010232 <__swsetup_r+0x32>
 8010222:	2309      	movs	r3, #9
 8010224:	602b      	str	r3, [r5, #0]
 8010226:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801022a:	81a3      	strh	r3, [r4, #12]
 801022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010230:	e034      	b.n	801029c <__swsetup_r+0x9c>
 8010232:	0758      	lsls	r0, r3, #29
 8010234:	d512      	bpl.n	801025c <__swsetup_r+0x5c>
 8010236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010238:	b141      	cbz	r1, 801024c <__swsetup_r+0x4c>
 801023a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801023e:	4299      	cmp	r1, r3
 8010240:	d002      	beq.n	8010248 <__swsetup_r+0x48>
 8010242:	4628      	mov	r0, r5
 8010244:	f7fe fefe 	bl	800f044 <_free_r>
 8010248:	2300      	movs	r3, #0
 801024a:	6363      	str	r3, [r4, #52]	; 0x34
 801024c:	89a3      	ldrh	r3, [r4, #12]
 801024e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010252:	81a3      	strh	r3, [r4, #12]
 8010254:	2300      	movs	r3, #0
 8010256:	6063      	str	r3, [r4, #4]
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	6023      	str	r3, [r4, #0]
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	f043 0308 	orr.w	r3, r3, #8
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	6923      	ldr	r3, [r4, #16]
 8010266:	b94b      	cbnz	r3, 801027c <__swsetup_r+0x7c>
 8010268:	89a3      	ldrh	r3, [r4, #12]
 801026a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801026e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010272:	d003      	beq.n	801027c <__swsetup_r+0x7c>
 8010274:	4621      	mov	r1, r4
 8010276:	4628      	mov	r0, r5
 8010278:	f000 f884 	bl	8010384 <__smakebuf_r>
 801027c:	89a0      	ldrh	r0, [r4, #12]
 801027e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010282:	f010 0301 	ands.w	r3, r0, #1
 8010286:	d00a      	beq.n	801029e <__swsetup_r+0x9e>
 8010288:	2300      	movs	r3, #0
 801028a:	60a3      	str	r3, [r4, #8]
 801028c:	6963      	ldr	r3, [r4, #20]
 801028e:	425b      	negs	r3, r3
 8010290:	61a3      	str	r3, [r4, #24]
 8010292:	6923      	ldr	r3, [r4, #16]
 8010294:	b943      	cbnz	r3, 80102a8 <__swsetup_r+0xa8>
 8010296:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801029a:	d1c4      	bne.n	8010226 <__swsetup_r+0x26>
 801029c:	bd38      	pop	{r3, r4, r5, pc}
 801029e:	0781      	lsls	r1, r0, #30
 80102a0:	bf58      	it	pl
 80102a2:	6963      	ldrpl	r3, [r4, #20]
 80102a4:	60a3      	str	r3, [r4, #8]
 80102a6:	e7f4      	b.n	8010292 <__swsetup_r+0x92>
 80102a8:	2000      	movs	r0, #0
 80102aa:	e7f7      	b.n	801029c <__swsetup_r+0x9c>
 80102ac:	200001dc 	.word	0x200001dc

080102b0 <_raise_r>:
 80102b0:	291f      	cmp	r1, #31
 80102b2:	b538      	push	{r3, r4, r5, lr}
 80102b4:	4604      	mov	r4, r0
 80102b6:	460d      	mov	r5, r1
 80102b8:	d904      	bls.n	80102c4 <_raise_r+0x14>
 80102ba:	2316      	movs	r3, #22
 80102bc:	6003      	str	r3, [r0, #0]
 80102be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80102c6:	b112      	cbz	r2, 80102ce <_raise_r+0x1e>
 80102c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102cc:	b94b      	cbnz	r3, 80102e2 <_raise_r+0x32>
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 f830 	bl	8010334 <_getpid_r>
 80102d4:	462a      	mov	r2, r5
 80102d6:	4601      	mov	r1, r0
 80102d8:	4620      	mov	r0, r4
 80102da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102de:	f000 b817 	b.w	8010310 <_kill_r>
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d00a      	beq.n	80102fc <_raise_r+0x4c>
 80102e6:	1c59      	adds	r1, r3, #1
 80102e8:	d103      	bne.n	80102f2 <_raise_r+0x42>
 80102ea:	2316      	movs	r3, #22
 80102ec:	6003      	str	r3, [r0, #0]
 80102ee:	2001      	movs	r0, #1
 80102f0:	e7e7      	b.n	80102c2 <_raise_r+0x12>
 80102f2:	2400      	movs	r4, #0
 80102f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102f8:	4628      	mov	r0, r5
 80102fa:	4798      	blx	r3
 80102fc:	2000      	movs	r0, #0
 80102fe:	e7e0      	b.n	80102c2 <_raise_r+0x12>

08010300 <raise>:
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <raise+0xc>)
 8010302:	4601      	mov	r1, r0
 8010304:	6818      	ldr	r0, [r3, #0]
 8010306:	f7ff bfd3 	b.w	80102b0 <_raise_r>
 801030a:	bf00      	nop
 801030c:	200001dc 	.word	0x200001dc

08010310 <_kill_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4d07      	ldr	r5, [pc, #28]	; (8010330 <_kill_r+0x20>)
 8010314:	2300      	movs	r3, #0
 8010316:	4604      	mov	r4, r0
 8010318:	4608      	mov	r0, r1
 801031a:	4611      	mov	r1, r2
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	f7f1 fdc3 	bl	8001ea8 <_kill>
 8010322:	1c43      	adds	r3, r0, #1
 8010324:	d102      	bne.n	801032c <_kill_r+0x1c>
 8010326:	682b      	ldr	r3, [r5, #0]
 8010328:	b103      	cbz	r3, 801032c <_kill_r+0x1c>
 801032a:	6023      	str	r3, [r4, #0]
 801032c:	bd38      	pop	{r3, r4, r5, pc}
 801032e:	bf00      	nop
 8010330:	20001a0c 	.word	0x20001a0c

08010334 <_getpid_r>:
 8010334:	f7f1 bdb0 	b.w	8001e98 <_getpid>

08010338 <__swhatbuf_r>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	460c      	mov	r4, r1
 801033c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010340:	2900      	cmp	r1, #0
 8010342:	b096      	sub	sp, #88	; 0x58
 8010344:	4615      	mov	r5, r2
 8010346:	461e      	mov	r6, r3
 8010348:	da0d      	bge.n	8010366 <__swhatbuf_r+0x2e>
 801034a:	89a3      	ldrh	r3, [r4, #12]
 801034c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010350:	f04f 0100 	mov.w	r1, #0
 8010354:	bf0c      	ite	eq
 8010356:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801035a:	2340      	movne	r3, #64	; 0x40
 801035c:	2000      	movs	r0, #0
 801035e:	6031      	str	r1, [r6, #0]
 8010360:	602b      	str	r3, [r5, #0]
 8010362:	b016      	add	sp, #88	; 0x58
 8010364:	bd70      	pop	{r4, r5, r6, pc}
 8010366:	466a      	mov	r2, sp
 8010368:	f000 f848 	bl	80103fc <_fstat_r>
 801036c:	2800      	cmp	r0, #0
 801036e:	dbec      	blt.n	801034a <__swhatbuf_r+0x12>
 8010370:	9901      	ldr	r1, [sp, #4]
 8010372:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010376:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801037a:	4259      	negs	r1, r3
 801037c:	4159      	adcs	r1, r3
 801037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010382:	e7eb      	b.n	801035c <__swhatbuf_r+0x24>

08010384 <__smakebuf_r>:
 8010384:	898b      	ldrh	r3, [r1, #12]
 8010386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010388:	079d      	lsls	r5, r3, #30
 801038a:	4606      	mov	r6, r0
 801038c:	460c      	mov	r4, r1
 801038e:	d507      	bpl.n	80103a0 <__smakebuf_r+0x1c>
 8010390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	6123      	str	r3, [r4, #16]
 8010398:	2301      	movs	r3, #1
 801039a:	6163      	str	r3, [r4, #20]
 801039c:	b002      	add	sp, #8
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	ab01      	add	r3, sp, #4
 80103a2:	466a      	mov	r2, sp
 80103a4:	f7ff ffc8 	bl	8010338 <__swhatbuf_r>
 80103a8:	9900      	ldr	r1, [sp, #0]
 80103aa:	4605      	mov	r5, r0
 80103ac:	4630      	mov	r0, r6
 80103ae:	f7fe febd 	bl	800f12c <_malloc_r>
 80103b2:	b948      	cbnz	r0, 80103c8 <__smakebuf_r+0x44>
 80103b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103b8:	059a      	lsls	r2, r3, #22
 80103ba:	d4ef      	bmi.n	801039c <__smakebuf_r+0x18>
 80103bc:	f023 0303 	bic.w	r3, r3, #3
 80103c0:	f043 0302 	orr.w	r3, r3, #2
 80103c4:	81a3      	strh	r3, [r4, #12]
 80103c6:	e7e3      	b.n	8010390 <__smakebuf_r+0xc>
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	6020      	str	r0, [r4, #0]
 80103cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103d0:	81a3      	strh	r3, [r4, #12]
 80103d2:	9b00      	ldr	r3, [sp, #0]
 80103d4:	6163      	str	r3, [r4, #20]
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	6120      	str	r0, [r4, #16]
 80103da:	b15b      	cbz	r3, 80103f4 <__smakebuf_r+0x70>
 80103dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103e0:	4630      	mov	r0, r6
 80103e2:	f000 f81d 	bl	8010420 <_isatty_r>
 80103e6:	b128      	cbz	r0, 80103f4 <__smakebuf_r+0x70>
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f023 0303 	bic.w	r3, r3, #3
 80103ee:	f043 0301 	orr.w	r3, r3, #1
 80103f2:	81a3      	strh	r3, [r4, #12]
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	431d      	orrs	r5, r3
 80103f8:	81a5      	strh	r5, [r4, #12]
 80103fa:	e7cf      	b.n	801039c <__smakebuf_r+0x18>

080103fc <_fstat_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d07      	ldr	r5, [pc, #28]	; (801041c <_fstat_r+0x20>)
 8010400:	2300      	movs	r3, #0
 8010402:	4604      	mov	r4, r0
 8010404:	4608      	mov	r0, r1
 8010406:	4611      	mov	r1, r2
 8010408:	602b      	str	r3, [r5, #0]
 801040a:	f7f1 fdac 	bl	8001f66 <_fstat>
 801040e:	1c43      	adds	r3, r0, #1
 8010410:	d102      	bne.n	8010418 <_fstat_r+0x1c>
 8010412:	682b      	ldr	r3, [r5, #0]
 8010414:	b103      	cbz	r3, 8010418 <_fstat_r+0x1c>
 8010416:	6023      	str	r3, [r4, #0]
 8010418:	bd38      	pop	{r3, r4, r5, pc}
 801041a:	bf00      	nop
 801041c:	20001a0c 	.word	0x20001a0c

08010420 <_isatty_r>:
 8010420:	b538      	push	{r3, r4, r5, lr}
 8010422:	4d06      	ldr	r5, [pc, #24]	; (801043c <_isatty_r+0x1c>)
 8010424:	2300      	movs	r3, #0
 8010426:	4604      	mov	r4, r0
 8010428:	4608      	mov	r0, r1
 801042a:	602b      	str	r3, [r5, #0]
 801042c:	f7f1 fdab 	bl	8001f86 <_isatty>
 8010430:	1c43      	adds	r3, r0, #1
 8010432:	d102      	bne.n	801043a <_isatty_r+0x1a>
 8010434:	682b      	ldr	r3, [r5, #0]
 8010436:	b103      	cbz	r3, 801043a <_isatty_r+0x1a>
 8010438:	6023      	str	r3, [r4, #0]
 801043a:	bd38      	pop	{r3, r4, r5, pc}
 801043c:	20001a0c 	.word	0x20001a0c

08010440 <_init>:
 8010440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010442:	bf00      	nop
 8010444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010446:	bc08      	pop	{r3}
 8010448:	469e      	mov	lr, r3
 801044a:	4770      	bx	lr

0801044c <_fini>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	bf00      	nop
 8010450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010452:	bc08      	pop	{r3}
 8010454:	469e      	mov	lr, r3
 8010456:	4770      	bx	lr
